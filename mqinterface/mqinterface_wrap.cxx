/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040300
#define SWIGCSHARP

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_MQ2Sharp(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_MQ2Sharp(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_MQ2Sharp(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


  #include <functional>



#include <string>
#include <list>
#include <any>
#include <set>
#include <vector>
#include <memory>
#include <iostream>
#include <mq/Plugin.h>
#include "../dotnet_runtime.h"
#include "mq/imgui/ConsoleWidget.h"
#include "main/MQ2ImGuiTools.h"

#include "imgui/imconfig.h"
#include "imgui/imgui_internal.h"
#include "imgui/imgui.h"
#include "imgui/ImGuiUtils.h"

#include "eqlib/Config.h"
#include "eqlib/ChatFilters.h"
#include "eqlib/PlayerClient.h"
#include "eqlib/ForwardDecls.h"
#include "eqlib/Items.h"
#include "eqlib/Spells.h"
#include "eqlib/EQClasses.h"
#include "eqlib/CXStr.h"
#include "eqlib/Constants.h"
#include "eqlib/Containers.h"
#include "eqlib/EverQuest.h"
#include "eqlib/GraphicsEngine.h"



#include <typeinfo>
#include <stdexcept>


#include <list>
#include <algorithm>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <string>


#include <unordered_map>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <stdint.h>		// Use the C99 official header


const char* type_name_int() {
    return "int";
}
const char* type_name_double() {
    return "double";
}
const char* type_name_string() {
    return "std::string";
}


namespace eqlib {
    ActorBase::~ActorBase() {
        // Implementation code
    }
}
void MQLog(const std::string& msg, int color, int filter) {
    mq::WriteChatColor(msg.c_str(), color, filter);
}




std::function<void(eqlib::PlayerClient* , const char*)> make_eqcmd_func(fEQCommandConstChar cmd) {
    return [cmd](eqlib::PlayerClient* c, const char* y){
        cmd(c, y);
    };
}



#include <string.h>


#include <memory>


static bool *new_boolp(void) { 
  return new bool(); 
}

static bool *copy_boolp(bool value) { 
  return new bool(value); 
}

static void delete_boolp(bool *obj) { 
  delete obj; 
}

static void boolp_assign(bool *obj, bool value) {
  *obj = value;
}

static bool boolp_value(bool *obj) {
  return *obj;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT char * SWIGSTDCALL CSharp_type_name_int() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)type_name_int();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_type_name_double() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)type_name_double();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_type_name_string() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)type_name_string();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQLog(const char * jarg1, int jarg2, int jarg3) {
  std::string *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  MQLog((std::string const &)*arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQCmnd(void * jarg1) {
  void * jresult ;
  std::function< void (eqlib::PlayerClient *,char const *) > *arg1 = 0 ;
  std::function< void (eqlib::PlayerClient *,char const *) > *result = 0 ;
  
  arg1 = (std::function< void (eqlib::PlayerClient *,char const *) > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< void (eqlib::PlayerClient *,char const *) > const & is null", 0);
    return 0;
  } 
  result = (std::function< void (eqlib::PlayerClient *,char const *) > *)new std::function< void (eqlib::PlayerClient *,char const *) >((std::function< void (eqlib::PlayerClient *,char const *) > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQCmnd_call(void * jarg1, void * jarg2, char * jarg3) {
  std::function< void (eqlib::PlayerClient *,char const *) > *arg1 = (std::function< void (eqlib::PlayerClient *,char const *) > *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (std::function< void (eqlib::PlayerClient *,char const *) > *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  arg3 = (char *)jarg3; 
  ((std::function< void (eqlib::PlayerClient *,char const *) > const *)arg1)->operator ()(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQCmnd(void * jarg1) {
  std::function< void (eqlib::PlayerClient *,char const *) > *arg1 = (std::function< void (eqlib::PlayerClient *,char const *) > *) 0 ;
  
  arg1 = (std::function< void (eqlib::PlayerClient *,char const *) > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_make_eqcmd_func(void * jarg1) {
  void * jresult ;
  fEQCommandConstChar arg1 ;
  SwigValueWrapper< std::function< void (eqlib::PlayerClient *,char const *) > > result;
  
  {
    arg1 = (fEQCommandConstChar)jarg1;
  }
  result = make_eqcmd_func(SWIG_STD_MOVE(arg1));
  jresult = new std::function< void (eqlib::PlayerClient *,char const *) >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mq_event_subtype_set(void * jarg1, int jarg2) {
  mq_event *arg1 = (mq_event *) 0 ;
  EventSubtype arg2 ;
  
  arg1 = (mq_event *)jarg1; 
  arg2 = (EventSubtype)jarg2; 
  if (arg1) (arg1)->subtype = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_mq_event_subtype_get(void * jarg1) {
  int jresult ;
  mq_event *arg1 = (mq_event *) 0 ;
  EventSubtype result;
  
  arg1 = (mq_event *)jarg1; 
  result = (EventSubtype) ((arg1)->subtype);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_mq_event() {
  void * jresult ;
  mq_event *result = 0 ;
  
  result = (mq_event *)new mq_event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_mq_event(void * jarg1) {
  mq_event *arg1 = (mq_event *) 0 ;
  
  arg1 = (mq_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gamestate_event_event_type_set(void * jarg1, int jarg2) {
  gamestate_event *arg1 = (gamestate_event *) 0 ;
  int arg2 ;
  
  arg1 = (gamestate_event *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->event_type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gamestate_event_event_type_get(void * jarg1) {
  int jresult ;
  gamestate_event *arg1 = (gamestate_event *) 0 ;
  int result;
  
  arg1 = (gamestate_event *)jarg1; 
  result = (int) ((arg1)->event_type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_gamestate_event() {
  void * jresult ;
  gamestate_event *result = 0 ;
  
  result = (gamestate_event *)new gamestate_event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_gamestate_event(void * jarg1) {
  gamestate_event *arg1 = (gamestate_event *) 0 ;
  
  arg1 = (gamestate_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chat_color_event_line_set(void * jarg1, char * jarg2) {
  chat_color_event *arg1 = (chat_color_event *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (chat_color_event *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->line = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->line, (const char *)arg2);
    } else {
      arg1->line = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_chat_color_event_line_get(void * jarg1) {
  char * jresult ;
  chat_color_event *arg1 = (chat_color_event *) 0 ;
  char *result = 0 ;
  
  arg1 = (chat_color_event *)jarg1; 
  result = (char *) ((arg1)->line);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chat_color_event_color_set(void * jarg1, int jarg2) {
  chat_color_event *arg1 = (chat_color_event *) 0 ;
  int arg2 ;
  
  arg1 = (chat_color_event *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->color = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chat_color_event_color_get(void * jarg1) {
  int jresult ;
  chat_color_event *arg1 = (chat_color_event *) 0 ;
  int result;
  
  arg1 = (chat_color_event *)jarg1; 
  result = (int) ((arg1)->color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chat_color_event_filter_set(void * jarg1, int jarg2) {
  chat_color_event *arg1 = (chat_color_event *) 0 ;
  int arg2 ;
  
  arg1 = (chat_color_event *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->filter = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chat_color_event_filter_get(void * jarg1) {
  int jresult ;
  chat_color_event *arg1 = (chat_color_event *) 0 ;
  int result;
  
  arg1 = (chat_color_event *)jarg1; 
  result = (int) ((arg1)->filter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_chat_color_event() {
  void * jresult ;
  chat_color_event *result = 0 ;
  
  result = (chat_color_event *)new chat_color_event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_chat_color_event(void * jarg1) {
  chat_color_event *arg1 = (chat_color_event *) 0 ;
  
  arg1 = (chat_color_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_incoming_chat_event_line_set(void * jarg1, char * jarg2) {
  incoming_chat_event *arg1 = (incoming_chat_event *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (incoming_chat_event *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->line = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->line, (const char *)arg2);
    } else {
      arg1->line = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_incoming_chat_event_line_get(void * jarg1) {
  char * jresult ;
  incoming_chat_event *arg1 = (incoming_chat_event *) 0 ;
  char *result = 0 ;
  
  arg1 = (incoming_chat_event *)jarg1; 
  result = (char *) ((arg1)->line);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_incoming_chat_event_color_set(void * jarg1, unsigned int jarg2) {
  incoming_chat_event *arg1 = (incoming_chat_event *) 0 ;
  unsigned long arg2 ;
  
  arg1 = (incoming_chat_event *)jarg1; 
  arg2 = (unsigned long)jarg2; 
  if (arg1) (arg1)->color = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_incoming_chat_event_color_get(void * jarg1) {
  unsigned int jresult ;
  incoming_chat_event *arg1 = (incoming_chat_event *) 0 ;
  unsigned long result;
  
  arg1 = (incoming_chat_event *)jarg1; 
  result = (unsigned long) ((arg1)->color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_incoming_chat_event() {
  void * jresult ;
  incoming_chat_event *result = 0 ;
  
  result = (incoming_chat_event *)new incoming_chat_event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_incoming_chat_event(void * jarg1) {
  incoming_chat_event *arg1 = (incoming_chat_event *) 0 ;
  
  arg1 = (incoming_chat_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spawn_event_spawn_set(void * jarg1, void * jarg2) {
  spawn_event *arg1 = (spawn_event *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (spawn_event *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  if (arg1) (arg1)->spawn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_spawn_event_spawn_get(void * jarg1) {
  void * jresult ;
  spawn_event *arg1 = (spawn_event *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (spawn_event *)jarg1; 
  result = (eqlib::PlayerClient *) ((arg1)->spawn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_spawn_event() {
  void * jresult ;
  spawn_event *result = 0 ;
  
  result = (spawn_event *)new spawn_event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_spawn_event(void * jarg1) {
  spawn_event *arg1 = (spawn_event *) 0 ;
  
  arg1 = (spawn_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ground_item_event_item_set(void * jarg1, void * jarg2) {
  ground_item_event *arg1 = (ground_item_event *) 0 ;
  eqlib::EQGroundItem *arg2 = (eqlib::EQGroundItem *) 0 ;
  
  arg1 = (ground_item_event *)jarg1; 
  arg2 = (eqlib::EQGroundItem *)jarg2; 
  if (arg1) (arg1)->item = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ground_item_event_item_get(void * jarg1) {
  void * jresult ;
  ground_item_event *arg1 = (ground_item_event *) 0 ;
  eqlib::EQGroundItem *result = 0 ;
  
  arg1 = (ground_item_event *)jarg1; 
  result = (eqlib::EQGroundItem *) ((arg1)->item);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ground_item_event() {
  void * jresult ;
  ground_item_event *result = 0 ;
  
  result = (ground_item_event *)new ground_item_event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ground_item_event(void * jarg1) {
  ground_item_event *arg1 = (ground_item_event *) 0 ;
  
  arg1 = (ground_item_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_string_event_msg_set(void * jarg1, char * jarg2) {
  string_event *arg1 = (string_event *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (string_event *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->msg = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->msg, (const char *)arg2);
    } else {
      arg1->msg = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_string_event_msg_get(void * jarg1) {
  char * jresult ;
  string_event *arg1 = (string_event *) 0 ;
  char *result = 0 ;
  
  arg1 = (string_event *)jarg1; 
  result = (char *) ((arg1)->msg);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_string_event() {
  void * jresult ;
  string_event *result = 0 ;
  
  result = (string_event *)new string_event();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_string_event(void * jarg1) {
  string_event *arg1 = (string_event *) 0 ;
  
  arg1 = (string_event *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_mq_event_fn(void * jarg1) {
  mq_event arg1 ;
  mq_event *argp1 ;
  
  argp1 = (mq_event *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq_event", 0);
    return ;
  }
  arg1 = *argp1; 
  mq_event_fn(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void SWIGSTDCALL CSharp_game_state_event_fn(void * jarg1) {
  gamestate_event arg1 ;
  gamestate_event *argp1 ;
  
  argp1 = (gamestate_event *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null gamestate_event", 0);
    return ;
  }
  arg1 = *argp1; 
  game_state_event_fn(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void SWIGSTDCALL CSharp_write_chat_color_event_fn(void * jarg1) {
  chat_color_event arg1 ;
  chat_color_event *argp1 ;
  
  argp1 = (chat_color_event *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null chat_color_event", 0);
    return ;
  }
  arg1 = *argp1; 
  write_chat_color_event_fn(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_incoming_chat_event_fn(void * jarg1) {
  unsigned int jresult ;
  incoming_chat_event arg1 ;
  incoming_chat_event *argp1 ;
  bool result;
  
  argp1 = (incoming_chat_event *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null incoming_chat_event", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)incoming_chat_event_fn(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_spawn_event_fn(void * jarg1) {
  spawn_event arg1 ;
  spawn_event *argp1 ;
  
  argp1 = (spawn_event *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null spawn_event", 0);
    return ;
  }
  arg1 = *argp1; 
  spawn_event_fn(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void SWIGSTDCALL CSharp_ground_item_event_fn(void * jarg1) {
  ground_item_event arg1 ;
  ground_item_event *argp1 ;
  
  argp1 = (ground_item_event *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ground_item_event", 0);
    return ;
  }
  arg1 = *argp1; 
  ground_item_event_fn(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void SWIGSTDCALL CSharp_string_event_fn(void * jarg1) {
  string_event arg1 ;
  string_event *argp1 ;
  
  argp1 = (string_event *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null string_event", 0);
    return ;
  }
  arg1 = *argp1; 
  string_event_fn(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void SWIGSTDCALL CSharp_initialize() {
  initialize();
}


SWIGEXPORT void SWIGSTDCALL CSharp_shutdown() {
  shutdown();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FromPlugin_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)(false);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_STRING_get() {
  int jresult ;
  int result;
  
  result = (int)MAX_STRING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PrintMacroDataConversionError(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::detail::PrintMacroDataConversionError((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_Data_set(void * jarg1, void * jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  mq::MQVarPtr::MQVariant *arg2 = (mq::MQVarPtr::MQVariant *) 0 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (mq::MQVarPtr::MQVariant *)jarg2; 
  if (arg1) (arg1)->Data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQVarPtr_Data_get(void * jarg1) {
  void * jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  mq::MQVarPtr::MQVariant *result = 0 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (mq::MQVarPtr::MQVariant *)& ((arg1)->Data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_HighPart__set(void * jarg1, unsigned int jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->HighPart_ = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQVarPtr_HighPart__get(void * jarg1) {
  unsigned int jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint32_t result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (uint32_t) ((arg1)->HighPart_);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQVarPtr_IsType(void * jarg1, int jarg2) {
  unsigned int jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  mq::MQVarPtr::VariantIdx arg2 ;
  bool result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (mq::MQVarPtr::VariantIdx)jarg2; 
  result = (bool)((mq::MQVarPtr const *)arg1)->IsType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQVarPtr_GetType(void * jarg1) {
  int jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  mq::MQVarPtr::VariantIdx result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (mq::MQVarPtr::VariantIdx)((mq::MQVarPtr const *)arg1)->GetType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQVarPtr_SetString(void * jarg1, void * jarg2) {
  void * jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  std::string_view arg2 ;
  std::string_view *argp2 ;
  eqlib::CXStr result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  argp2 = (std::string_view *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->SetString(SWIG_STD_MOVE(arg2));
  jresult = new eqlib::CXStr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_Ptr_set(void * jarg1, void * jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->Ptr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQVarPtr_Ptr_get(void * jarg1) {
  void * jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  void *result = 0 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (void *) ((arg1)->Ptr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_Float_set(void * jarg1, float jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  float arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Float = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MQVarPtr_Float_get(void * jarg1) {
  float jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  float result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (float) ((arg1)->Float);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_Int_set(void * jarg1, int jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  int32_t arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Int = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQVarPtr_Int_get(void * jarg1) {
  int jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  int32_t result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (int32_t) ((arg1)->Int);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_DWord_set(void * jarg1, unsigned int jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DWord = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQVarPtr_DWord_get(void * jarg1) {
  unsigned int jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint32_t result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (uint32_t) ((arg1)->DWord);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_Double_set(void * jarg1, double jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  double arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->Double = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_MQVarPtr_Double_get(void * jarg1) {
  double jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  double result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (double) ((arg1)->Double);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_Int64_set(void * jarg1, long long jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  int64_t arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->Int64 = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_MQVarPtr_Int64_get(void * jarg1) {
  long long jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  int64_t result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (int64_t) ((arg1)->Int64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_UInt64_set(void * jarg1, unsigned long long jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->UInt64 = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_MQVarPtr_UInt64_get(void * jarg1) {
  unsigned long long jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint64_t result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (uint64_t) ((arg1)->UInt64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_Item_set(void * jarg1, void * jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  eqlib::ItemPtr *arg2 = (eqlib::ItemPtr *) 0 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2; 
  if (arg1) (arg1)->Item = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQVarPtr_Item_get(void * jarg1) {
  void * jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  eqlib::ItemPtr *result = 0 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (eqlib::ItemPtr *)& ((arg1)->Item);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_LowPart_set(void * jarg1, unsigned int jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LowPart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQVarPtr_LowPart_get(void * jarg1) {
  unsigned int jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint32_t result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (uint32_t) ((arg1)->LowPart);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_HighPart_set(void * jarg1, unsigned int jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->HighPart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQVarPtr_HighPart_get(void * jarg1) {
  unsigned int jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  uint32_t result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result = (uint32_t) ((arg1)->HighPart);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQVarPtr_Argb_set(void * jarg1, void * jarg2) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  eqlib::ARGBCOLOR arg2 ;
  eqlib::ARGBCOLOR *argp2 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  argp2 = (eqlib::ARGBCOLOR *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::ARGBCOLOR", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Argb = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQVarPtr_Argb_get(void * jarg1) {
  void * jresult ;
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  eqlib::ARGBCOLOR result;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  result =  ((arg1)->Argb);
  jresult = new eqlib::ARGBCOLOR(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQVarPtr__SWIG_0() {
  void * jresult ;
  mq::MQVarPtr *result = 0 ;
  
  result = (mq::MQVarPtr *)new mq::MQVarPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQVarPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  mq::MQVarPtr *arg1 = 0 ;
  mq::MQVarPtr *result = 0 ;
  
  arg1 = (mq::MQVarPtr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQVarPtr const & is null", 0);
    return 0;
  } 
  result = (mq::MQVarPtr *)new mq::MQVarPtr((mq::MQVarPtr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQVarPtr(void * jarg1) {
  mq::MQVarPtr *arg1 = (mq::MQVarPtr *) 0 ;
  
  arg1 = (mq::MQVarPtr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQTypeVar_Type_set(void * jarg1, void * jarg2) {
  mq::MQTypeVar *arg1 = (mq::MQTypeVar *) 0 ;
  mq::MQ2Type *arg2 = (mq::MQ2Type *) 0 ;
  
  arg1 = (mq::MQTypeVar *)jarg1; 
  arg2 = (mq::MQ2Type *)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQTypeVar_Type_get(void * jarg1) {
  void * jresult ;
  mq::MQTypeVar *arg1 = (mq::MQTypeVar *) 0 ;
  mq::MQ2Type *result = 0 ;
  
  arg1 = (mq::MQTypeVar *)jarg1; 
  result = (mq::MQ2Type *) ((arg1)->Type);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQTypeVar_GetVarPtr__SWIG_0(void * jarg1) {
  void * jresult ;
  mq::MQTypeVar *arg1 = (mq::MQTypeVar *) 0 ;
  mq::MQVarPtr *result = 0 ;
  
  arg1 = (mq::MQTypeVar *)jarg1; 
  result = (mq::MQVarPtr *) &(arg1)->GetVarPtr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQTypeVar_SetVarPtr(void * jarg1, void * jarg2) {
  void * jresult ;
  mq::MQTypeVar *arg1 = (mq::MQTypeVar *) 0 ;
  mq::MQVarPtr *arg2 = 0 ;
  mq::MQVarPtr *result = 0 ;
  
  arg1 = (mq::MQTypeVar *)jarg1; 
  arg2 = (mq::MQVarPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQVarPtr const & is null", 0);
    return 0;
  } 
  result = (mq::MQVarPtr *) &(arg1)->SetVarPtr((mq::MQVarPtr const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQTypeVar_VarPtr_set(void * jarg1, void * jarg2) {
  mq::MQTypeVar *arg1 = (mq::MQTypeVar *) 0 ;
  mq::MQVarPtr *arg2 = (mq::MQVarPtr *) 0 ;
  
  arg1 = (mq::MQTypeVar *)jarg1; 
  arg2 = (mq::MQVarPtr *)jarg2; 
  if (arg1) (arg1)->VarPtr = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQTypeVar_VarPtr_get(void * jarg1) {
  void * jresult ;
  mq::MQTypeVar *arg1 = (mq::MQTypeVar *) 0 ;
  mq::MQVarPtr *result = 0 ;
  
  arg1 = (mq::MQTypeVar *)jarg1; 
  result = (mq::MQVarPtr *)& ((arg1)->VarPtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQTypeVar() {
  void * jresult ;
  mq::MQTypeVar *result = 0 ;
  
  result = (mq::MQTypeVar *)new mq::MQTypeVar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQTypeVar(void * jarg1) {
  mq::MQTypeVar *arg1 = (mq::MQTypeVar *) 0 ;
  
  arg1 = (mq::MQTypeVar *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQTypeMember_ID_set(void * jarg1, int jarg2) {
  mq::MQTypeMember *arg1 = (mq::MQTypeMember *) 0 ;
  int arg2 ;
  
  arg1 = (mq::MQTypeMember *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQTypeMember_ID_get(void * jarg1) {
  int jresult ;
  mq::MQTypeMember *arg1 = (mq::MQTypeMember *) 0 ;
  int result;
  
  arg1 = (mq::MQTypeMember *)jarg1; 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQTypeMember_Type_set(void * jarg1, unsigned int jarg2) {
  mq::MQTypeMember *arg1 = (mq::MQTypeMember *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (mq::MQTypeMember *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQTypeMember_Type_get(void * jarg1) {
  unsigned int jresult ;
  mq::MQTypeMember *arg1 = (mq::MQTypeMember *) 0 ;
  uint32_t result;
  
  arg1 = (mq::MQTypeMember *)jarg1; 
  result = (uint32_t) ((arg1)->Type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQTypeMember_Name_set(void * jarg1, char * jarg2) {
  mq::MQTypeMember *arg1 = (mq::MQTypeMember *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (mq::MQTypeMember *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->Name = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Name, (const char *)arg2);
    } else {
      arg1->Name = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MQTypeMember_Name_get(void * jarg1) {
  char * jresult ;
  mq::MQTypeMember *arg1 = (mq::MQTypeMember *) 0 ;
  char *result = 0 ;
  
  arg1 = (mq::MQTypeMember *)jarg1; 
  result = (char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQTypeMember__SWIG_0(int jarg1, char * jarg2) {
  void * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  mq::MQTypeMember *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  result = (mq::MQTypeMember *)new mq::MQTypeMember(arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQTypeMember__SWIG_1(int jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  uint32_t arg3 ;
  mq::MQTypeMember *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (mq::MQTypeMember *)new mq::MQTypeMember(arg1,(char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQTypeMember(void * jarg1) {
  mq::MQTypeMember *arg1 = (mq::MQTypeMember *) 0 ;
  
  arg1 = (mq::MQTypeMember *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQ2Type(void * jarg1) {
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQ2Type_InitializeMembers(void * jarg1, void * jarg2) {
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::MQTypeMember *arg2 = (mq::MQTypeMember *) 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (mq::MQTypeMember *)jarg2; 
  (arg1)->InitializeMembers(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_FromData__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::MQVarPtr *arg2 = 0 ;
  mq::MQTypeVar *arg3 = 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (mq::MQVarPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQVarPtr & is null", 0);
    return 0;
  } 
  arg3 = (mq::MQTypeVar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQTypeVar const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->FromData(*arg2,(mq::MQTypeVar const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_FromString__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::MQVarPtr *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (mq::MQVarPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQVarPtr & is null", 0);
    return 0;
  } 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->FromString(*arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQ2Type_InitVariable(void * jarg1, void * jarg2) {
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::MQVarPtr *arg2 = 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (mq::MQVarPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQVarPtr & is null", 0);
    return ;
  } 
  (arg1)->InitVariable(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQ2Type_FreeVariable(void * jarg1, void * jarg2) {
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::MQVarPtr *arg2 = 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (mq::MQVarPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQVarPtr & is null", 0);
    return ;
  } 
  (arg1)->FreeVariable(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_GetMember__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, void * jarg5) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::MQVarPtr arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  mq::MQTypeVar *arg5 = 0 ;
  mq::MQVarPtr *argp2 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  argp2 = (mq::MQVarPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::MQVarPtr", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (mq::MQTypeVar *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQTypeVar & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->GetMember(SWIG_STD_MOVE(arg2),(char const *)arg3,arg4,*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_ToString(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::MQVarPtr arg2 ;
  char *arg3 = (char *) 0 ;
  mq::MQVarPtr *argp2 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  argp2 = (mq::MQVarPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::MQVarPtr", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->ToString(SWIG_STD_MOVE(arg2),arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MQ2Type_GetName(void * jarg1) {
  char * jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  char *result = 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  result = (char *)((mq::datatypes::MQ2Type const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MQ2Type_GetMemberName(void * jarg1, int jarg2) {
  char * jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)((mq::datatypes::MQ2Type const *)arg1)->GetMemberName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_GetMemberID(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  result = (bool)((mq::datatypes::MQ2Type const *)arg1)->GetMemberID((char const *)arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQ2Type_FindMember__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  char *arg2 = (char *) 0 ;
  mq::MQTypeMember *result = 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (mq::MQTypeMember *)(arg1)->FindMember((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQ2Type_FindMethod__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  char *arg2 = (char *) 0 ;
  mq::MQTypeMember *result = 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (mq::MQTypeMember *)(arg1)->FindMethod((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_CanEvaluateMethodOrMember(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->CanEvaluateMethodOrMember((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_InheritsFrom(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::datatypes::MQ2Type *arg2 = (mq::datatypes::MQ2Type *) 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (mq::datatypes::MQ2Type *)jarg2; 
  result = (bool)(arg1)->InheritsFrom(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_InheritedMember__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->InheritedMember((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQ2Type_SetInheritance(void * jarg1, void * jarg2) {
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::datatypes::MQ2Type *arg2 = (mq::datatypes::MQ2Type *) 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (mq::datatypes::MQ2Type *)jarg2; 
  (arg1)->SetInheritance(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQ2Type_GetParent(void * jarg1) {
  void * jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::datatypes::MQ2Type *result = 0 ;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  result = (mq::datatypes::MQ2Type *)((mq::datatypes::MQ2Type const *)arg1)->GetParent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_Downcast(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  mq::MQVarPtr *arg2 = 0 ;
  mq::MQVarPtr *arg3 = 0 ;
  mq::datatypes::MQ2Type *arg4 = (mq::datatypes::MQ2Type *) 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  arg2 = (mq::MQVarPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQVarPtr const & is null", 0);
    return 0;
  } 
  arg3 = (mq::MQVarPtr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQVarPtr & is null", 0);
    return 0;
  } 
  arg4 = (mq::datatypes::MQ2Type *)jarg4; 
  result = (bool)(arg1)->Downcast((mq::MQVarPtr const &)*arg2,*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2Type_GETMEMBER(void * jarg1) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = (mq::datatypes::MQ2Type *) 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1; 
  result = (bool)(arg1)->GETMEMBER();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddMQ2Type(void * jarg1) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::datatypes::MQ2Type & is null", 0);
    return 0;
  } 
  result = (bool)mq::AddMQ2Type(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveMQ2Type(void * jarg1) {
  unsigned int jresult ;
  mq::datatypes::MQ2Type *arg1 = 0 ;
  bool result;
  
  arg1 = (mq::datatypes::MQ2Type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::datatypes::MQ2Type & is null", 0);
    return 0;
  } 
  result = (bool)mq::RemoveMQ2Type(*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindMQ2DataType(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  mq::datatypes::MQ2Type *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (mq::datatypes::MQ2Type *)mq::FindMQ2DataType((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddMQ2TypeExtension(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  mq::datatypes::MQ2Type *arg2 = (mq::datatypes::MQ2Type *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::datatypes::MQ2Type *)jarg2; 
  result = (bool)mq::AddMQ2TypeExtension((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveMQ2TypeExtension(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  mq::datatypes::MQ2Type *arg2 = (mq::datatypes::MQ2Type *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::datatypes::MQ2Type *)jarg2; 
  result = (bool)mq::RemoveMQ2TypeExtension((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddTopLevelObject(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::function< bool (char const *,mq::MQTypeVar &) > > arg2 ;
  mq::MQTopLevelObjectFunction *argp2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  argp2 = (mq::MQTopLevelObjectFunction *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::MQTopLevelObjectFunction", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)mq::AddTopLevelObject((char const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveTopLevelObject(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::RemoveTopLevelObject((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindTopLevelObject(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  mq::MQTopLevelObject *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (mq::MQTopLevelObject *)mq::FindTopLevelObject((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ParseMacroData(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)mq::ParseMacroData(arg1,SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParseMacroParameter(char * jarg1, unsigned int jarg2) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)mq::ParseMacroParameter(arg1,SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EvaluateMacroDataMember(void * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  mq::MQ2Type *arg1 = (mq::MQ2Type *) 0 ;
  mq::MQVarPtr arg2 ;
  mq::MQTypeVar *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  mq::MQVarPtr *argp2 ;
  int result;
  
  arg1 = (mq::MQ2Type *)jarg1; 
  argp2 = (mq::MQVarPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::MQVarPtr", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (mq::MQTypeVar *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQTypeVar & is null", 0);
    return 0;
  } 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (int)mq::EvaluateMacroDataMember(arg1,SWIG_STD_MOVE(arg2),*arg3,(char const *)arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FindMacroDataMember(void * jarg1, const char * jarg2) {
  unsigned int jresult ;
  mq::MQ2Type *arg1 = (mq::MQ2Type *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (mq::MQ2Type *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)mq::FindMacroDataMember(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddMQ2Data__SWIG_0(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  mq::fMQData arg2 = (mq::fMQData) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::fMQData)jarg2; 
  result = (bool)mq::AddMQ2Data((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddMQ2Data__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::function< bool (char const *,mq::MQTypeVar &) > > arg2 ;
  mq::MQTopLevelObjectFunction *argp2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  argp2 = (mq::MQTopLevelObjectFunction *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::MQTopLevelObjectFunction", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)mq::AddMQ2Data((char const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindMQ2Data(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  mq::MQTopLevelObject *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (mq::MQTopLevelObject *)mq::FindMQ2Data((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveMQ2Data(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::RemoveMQ2Data((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MainInterface(void * jarg1) {
  mq::MainInterface *arg1 = (mq::MainInterface *) 0 ;
  
  arg1 = (mq::MainInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MainInterface_AddTopLevelObject(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  mq::MainInterface *arg1 = (mq::MainInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< std::function< bool (char const *,mq::MQTypeVar &) > > arg3 ;
  MQPlugin *arg4 = (MQPlugin *) 0 ;
  mq::MQTopLevelObjectFunction *argp3 ;
  bool result;
  
  arg1 = (mq::MainInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (mq::MQTopLevelObjectFunction *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::MQTopLevelObjectFunction", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (MQPlugin *)jarg4; 
  result = (bool)(arg1)->AddTopLevelObject((char const *)arg2,SWIG_STD_MOVE(arg3),arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MainInterface_RemoveTopLevelObject(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  mq::MainInterface *arg1 = (mq::MainInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  MQPlugin *arg3 = (MQPlugin *) 0 ;
  bool result;
  
  arg1 = (mq::MainInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (MQPlugin *)jarg3; 
  result = (bool)(arg1)->RemoveTopLevelObject((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MainInterface_FindTopLevelObject(void * jarg1, char * jarg2) {
  void * jresult ;
  mq::MainInterface *arg1 = (mq::MainInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  mq::MQTopLevelObject *result = 0 ;
  
  arg1 = (mq::MainInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (mq::MQTopLevelObject *)(arg1)->FindTopLevelObject((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainInterface_SendToActor(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, void * jarg5, void * jarg6) {
  mq::MainInterface *arg1 = (mq::MainInterface *) 0 ;
  postoffice::Dropbox *arg2 = (postoffice::Dropbox *) 0 ;
  postoffice::Address *arg3 = 0 ;
  std::string *arg4 = 0 ;
  postoffice::ResponseCallbackAPI *arg5 = 0 ;
  MQPlugin *arg6 = (MQPlugin *) 0 ;
  
  arg1 = (mq::MainInterface *)jarg1; 
  arg2 = (postoffice::Dropbox *)jarg2; 
  arg3 = (postoffice::Address *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "postoffice::Address const & is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (postoffice::ResponseCallbackAPI *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "postoffice::ResponseCallbackAPI const & is null", 0);
    return ;
  } 
  arg6 = (MQPlugin *)jarg6; 
  (arg1)->SendToActor(arg2,(postoffice::Address const &)*arg3,(std::string const &)*arg4,(postoffice::ResponseCallbackAPI const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainInterface_ReplyToActor(void * jarg1, void * jarg2, void * jarg3, const char * jarg4, unsigned char jarg5, void * jarg6) {
  mq::MainInterface *arg1 = (mq::MainInterface *) 0 ;
  postoffice::Dropbox *arg2 = (postoffice::Dropbox *) 0 ;
  std::shared_ptr< postoffice::Message > *arg3 = 0 ;
  std::string *arg4 = 0 ;
  uint8_t arg5 ;
  MQPlugin *arg6 = (MQPlugin *) 0 ;
  
  arg1 = (mq::MainInterface *)jarg1; 
  arg2 = (postoffice::Dropbox *)jarg2; 
  arg3 = (std::shared_ptr< postoffice::Message > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< postoffice::Message > const & is null", 0);
    return ;
  } 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (uint8_t)jarg5; 
  arg6 = (MQPlugin *)jarg6; 
  (arg1)->ReplyToActor(arg2,(std::shared_ptr< postoffice::Message > const &)*arg3,(std::string const &)*arg4,arg5,arg6);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MainInterface_AddActor(void * jarg1, char * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  mq::MainInterface *arg1 = (mq::MainInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  postoffice::ReceiveCallbackAPI *arg3 = 0 ;
  MQPlugin *arg4 = (MQPlugin *) 0 ;
  std::unique_ptr< postoffice::ReceiveCallbackAPI > rvrdeleter3 ;
  postoffice::Dropbox *result = 0 ;
  
  arg1 = (mq::MainInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (postoffice::ReceiveCallbackAPI *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "postoffice::ReceiveCallbackAPI && is null", 0);
    return 0;
  }
  rvrdeleter3.reset(arg3); 
  arg4 = (MQPlugin *)jarg4; 
  result = (postoffice::Dropbox *)(arg1)->AddActor((char const *)arg2,(postoffice::ReceiveCallbackAPI &&)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MainInterface_RemoveActor(void * jarg1, void * jarg2, void * jarg3) {
  mq::MainInterface *arg1 = (mq::MainInterface *) 0 ;
  postoffice::Dropbox **arg2 = 0 ;
  MQPlugin *arg3 = (MQPlugin *) 0 ;
  
  arg1 = (mq::MainInterface *)jarg1; 
  arg2 = (postoffice::Dropbox **)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "postoffice::Dropbox *& is null", 0);
    return ;
  } 
  arg3 = (MQPlugin *)jarg3; 
  (arg1)->RemoveActor(*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMainInterface() {
  void * jresult ;
  mq::MainInterface *result = 0 ;
  
  result = (mq::MainInterface *)mq::GetMainInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_szFilename_set(void * jarg1, char * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->szFilename, (const char *)arg2, MAX_PATH-1);
      arg1->szFilename[MAX_PATH-1] = 0;
    } else {
      arg1->szFilename[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MQPlugin_szFilename_get(void * jarg1) {
  char * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  char *result = 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (char *)(char *) ((arg1)->szFilename);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_Self_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::MQPlugin **arg2 = (mq::MQPlugin **) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::MQPlugin **)jarg2; 
  if (arg1) (arg1)->Self = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_Self_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::MQPlugin **result = 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::MQPlugin **) ((arg1)->Self);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_name_set(void * jarg1, const char * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MQPlugin_name_get(void * jarg1) {
  const char * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_hModule_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  HMODULE arg2 ;
  HMODULE *argp2 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  argp2 = (HMODULE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HMODULE", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->hModule = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_hModule_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  HMODULE result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result =  ((arg1)->hModule);
  jresult = new HMODULE(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_fpVersion_set(void * jarg1, float jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  float arg2 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fpVersion = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MQPlugin_fpVersion_get(void * jarg1) {
  float jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  float result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (float) ((arg1)->fpVersion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_bCustom_set(void * jarg1, unsigned int jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  bool arg2 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCustom = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQPlugin_bCustom_get(void * jarg1) {
  unsigned int jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  bool result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (bool) ((arg1)->bCustom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_Initialize_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQInitializePlugin arg2 = (mq::fMQInitializePlugin) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQInitializePlugin)jarg2; 
  if (arg1) (arg1)->Initialize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_Initialize_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQInitializePlugin result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQInitializePlugin) ((arg1)->Initialize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_Shutdown_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQShutdownPlugin arg2 = (mq::fMQShutdownPlugin) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQShutdownPlugin)jarg2; 
  if (arg1) (arg1)->Shutdown = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_Shutdown_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQShutdownPlugin result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQShutdownPlugin) ((arg1)->Shutdown);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_Zoned_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQZoned arg2 = (mq::fMQZoned) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQZoned)jarg2; 
  if (arg1) (arg1)->Zoned = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_Zoned_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQZoned result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQZoned) ((arg1)->Zoned);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_WriteChatColor_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQWriteChatColor arg2 = (mq::fMQWriteChatColor) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQWriteChatColor)jarg2; 
  if (arg1) (arg1)->WriteChatColor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_WriteChatColor_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQWriteChatColor result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQWriteChatColor) ((arg1)->WriteChatColor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_Pulse_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQPulse arg2 = (mq::fMQPulse) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQPulse)jarg2; 
  if (arg1) (arg1)->Pulse = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_Pulse_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQPulse result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQPulse) ((arg1)->Pulse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_IncomingChat_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQIncomingChat arg2 = (mq::fMQIncomingChat) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQIncomingChat)jarg2; 
  if (arg1) (arg1)->IncomingChat = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_IncomingChat_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQIncomingChat result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQIncomingChat) ((arg1)->IncomingChat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_CleanUI_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQCleanUI arg2 = (mq::fMQCleanUI) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQCleanUI)jarg2; 
  if (arg1) (arg1)->CleanUI = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_CleanUI_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQCleanUI result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQCleanUI) ((arg1)->CleanUI);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_ReloadUI_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQReloadUI arg2 = (mq::fMQReloadUI) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQReloadUI)jarg2; 
  if (arg1) (arg1)->ReloadUI = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_ReloadUI_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQReloadUI result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQReloadUI) ((arg1)->ReloadUI);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_DrawHUD_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQDrawHUD arg2 = (mq::fMQDrawHUD) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQDrawHUD)jarg2; 
  if (arg1) (arg1)->DrawHUD = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_DrawHUD_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQDrawHUD result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQDrawHUD) ((arg1)->DrawHUD);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_SetGameState_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQSetGameState arg2 = (mq::fMQSetGameState) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQSetGameState)jarg2; 
  if (arg1) (arg1)->SetGameState = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_SetGameState_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQSetGameState result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQSetGameState) ((arg1)->SetGameState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_AddSpawn_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQSpawn arg2 = (mq::fMQSpawn) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQSpawn)jarg2; 
  if (arg1) (arg1)->AddSpawn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_AddSpawn_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQSpawn result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQSpawn) ((arg1)->AddSpawn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_RemoveSpawn_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQSpawn arg2 = (mq::fMQSpawn) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQSpawn)jarg2; 
  if (arg1) (arg1)->RemoveSpawn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_RemoveSpawn_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQSpawn result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQSpawn) ((arg1)->RemoveSpawn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_AddGroundItem_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQGroundItem arg2 = (mq::fMQGroundItem) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQGroundItem)jarg2; 
  if (arg1) (arg1)->AddGroundItem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_AddGroundItem_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQGroundItem result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQGroundItem) ((arg1)->AddGroundItem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_RemoveGroundItem_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQGroundItem arg2 = (mq::fMQGroundItem) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQGroundItem)jarg2; 
  if (arg1) (arg1)->RemoveGroundItem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_RemoveGroundItem_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQGroundItem result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQGroundItem) ((arg1)->RemoveGroundItem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_BeginZone_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQBeginZone arg2 = (mq::fMQBeginZone) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQBeginZone)jarg2; 
  if (arg1) (arg1)->BeginZone = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_BeginZone_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQBeginZone result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQBeginZone) ((arg1)->BeginZone);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_EndZone_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQEndZone arg2 = (mq::fMQEndZone) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQEndZone)jarg2; 
  if (arg1) (arg1)->EndZone = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_EndZone_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQEndZone result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQEndZone) ((arg1)->EndZone);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_UpdateImGui_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQUpdateImGui arg2 = (mq::fMQUpdateImGui) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQUpdateImGui)jarg2; 
  if (arg1) (arg1)->UpdateImGui = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_UpdateImGui_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQUpdateImGui result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQUpdateImGui) ((arg1)->UpdateImGui);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_MacroStart_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQMacroStart arg2 = (mq::fMQMacroStart) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQMacroStart)jarg2; 
  if (arg1) (arg1)->MacroStart = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_MacroStart_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQMacroStart result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQMacroStart) ((arg1)->MacroStart);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_MacroStop_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQMacroStop arg2 = (mq::fMQMacroStop) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQMacroStop)jarg2; 
  if (arg1) (arg1)->MacroStop = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_MacroStop_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQMacroStop result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQMacroStop) ((arg1)->MacroStop);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_LoadPlugin_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQLoadPlugin arg2 = (mq::fMQLoadPlugin) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQLoadPlugin)jarg2; 
  if (arg1) (arg1)->LoadPlugin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_LoadPlugin_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQLoadPlugin result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQLoadPlugin) ((arg1)->LoadPlugin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_UnloadPlugin_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQUnloadPlugin arg2 = (mq::fMQUnloadPlugin) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQUnloadPlugin)jarg2; 
  if (arg1) (arg1)->UnloadPlugin = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_UnloadPlugin_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQUnloadPlugin result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQUnloadPlugin) ((arg1)->UnloadPlugin);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_GetPluginInterface_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQGetPluginInterface arg2 = (mq::fMQGetPluginInterface) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::fMQGetPluginInterface)jarg2; 
  if (arg1) (arg1)->GetPluginInterface = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_GetPluginInterface_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::fMQGetPluginInterface result;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::fMQGetPluginInterface) ((arg1)->GetPluginInterface);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_pLast_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::MQPlugin *arg2 = (mq::MQPlugin *) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::MQPlugin *)jarg2; 
  if (arg1) (arg1)->pLast = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_pLast_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::MQPlugin *result = 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::MQPlugin *) ((arg1)->pLast);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQPlugin_pNext_set(void * jarg1, void * jarg2) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::MQPlugin *arg2 = (mq::MQPlugin *) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  arg2 = (mq::MQPlugin *)jarg2; 
  if (arg1) (arg1)->pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQPlugin_pNext_get(void * jarg1) {
  void * jresult ;
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  mq::MQPlugin *result = 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  result = (mq::MQPlugin *) ((arg1)->pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQPlugin() {
  void * jresult ;
  mq::MQPlugin *result = 0 ;
  
  result = (mq::MQPlugin *)new mq::MQPlugin();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQPlugin(void * jarg1) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsPluginsInitialized() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::IsPluginsInitialized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetPluginProc(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (void *)mq::GetPluginProc((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetPlugin(void * jarg1) {
  void * jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  mq::MQPlugin *result = 0 ;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (mq::MQPlugin *)mq::GetPlugin(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsPluginLoaded(void * jarg1) {
  unsigned int jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  bool result;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)mq::IsPluginLoaded(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PluginInterface(void * jarg1) {
  mq::PluginInterface *arg1 = (mq::PluginInterface *) 0 ;
  
  arg1 = (mq::PluginInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PluginInterface() {
  void * jresult ;
  mq::PluginInterface *result = 0 ;
  
  result = (mq::PluginInterface *)new mq::PluginInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetPluginInterface(void * jarg1) {
  void * jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  mq::PluginInterface *result = 0 ;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (mq::PluginInterface *)mq::GetPluginInterface(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConsoleWidget_DEFAULT_COLOR_get() {
  void * jresult ;
  MQColor result;
  
  result = mq::imgui::ConsoleWidget::DEFAULT_COLOR;
  jresult = new MQColor(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConsoleWidget_Create(void * jarg1) {
  void * jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  SwigValueWrapper< std::shared_ptr< mq::imgui::ConsoleWidget > > result;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = mq::imgui::ConsoleWidget::Create(SWIG_STD_MOVE(arg1));
  jresult = new std::shared_ptr< mq::imgui::ConsoleWidget >(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ConsoleWidget(void * jarg1) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_Render__SWIG_0(void * jarg1, void * jarg2) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->Render((ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_Render__SWIG_1(void * jarg1) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  (arg1)->Render();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_Clear(void * jarg1) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_AppendText__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  std::string_view arg2 ;
  MQColor arg3 ;
  bool arg4 ;
  std::string_view *argp2 ;
  MQColor *argp3 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  argp2 = (std::string_view *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (MQColor *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MQColor", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AppendText(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_AppendText__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  std::string_view arg2 ;
  MQColor arg3 ;
  std::string_view *argp2 ;
  MQColor *argp3 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  argp2 = (std::string_view *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return ;
  }
  arg2 = *argp2; 
  argp3 = (MQColor *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MQColor", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AppendText(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_AppendText__SWIG_2(void * jarg1, void * jarg2) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  std::string_view arg2 ;
  std::string_view *argp2 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  argp2 = (std::string_view *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->AppendText(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConsoleWidget_IsCursorAtEnd(void * jarg1) {
  unsigned int jresult ;
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  bool result;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  result = (bool)((mq::imgui::ConsoleWidget const *)arg1)->IsCursorAtEnd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_ScrollToBottom(void * jarg1) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  (arg1)->ScrollToBottom();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ConsoleWidget_GetAutoScroll(void * jarg1) {
  unsigned int jresult ;
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  bool result;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  result = (bool)((mq::imgui::ConsoleWidget const *)arg1)->GetAutoScroll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_SetAutoScroll(void * jarg1, unsigned int jarg2) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  bool arg2 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAutoScroll(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConsoleWidget_GetMaxBufferLines(void * jarg1) {
  int jresult ;
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  int result;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  result = (int)((mq::imgui::ConsoleWidget const *)arg1)->GetMaxBufferLines();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_SetMaxBufferLines(void * jarg1, int jarg2) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  int arg2 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetMaxBufferLines(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ConsoleWidget_GetOpacity(void * jarg1) {
  float jresult ;
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  float result;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  result = (float)((mq::imgui::ConsoleWidget const *)arg1)->GetOpacity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleWidget_SetOpacity(void * jarg1, float jarg2) {
  mq::imgui::ConsoleWidget *arg1 = (mq::imgui::ConsoleWidget *) 0 ;
  float arg2 ;
  
  arg1 = (mq::imgui::ConsoleWidget *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetOpacity(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LoadedString_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MacroQuest Loaded.");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ToUnloadString_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MacroQuest Unloading...");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnloadedString_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("MacroQuest Unloaded.");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_VARNAME_get() {
  int jresult ;
  int result;
  
  result = (int)(64);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetNameSpriteState(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)mq::SetNameSpriteState(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsTargetable(void * jarg1) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (bool)mq::IsTargetable(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AreNameSpritesCustomized() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::AreNameSpritesCustomized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetOverlayEnabled(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::SetOverlayEnabled(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsOverlayEnabled() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::IsOverlayEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddSettingsPanel(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  mq::fPanelDrawFunction arg2 = (mq::fPanelDrawFunction) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::fPanelDrawFunction)jarg2; 
  mq::AddSettingsPanel((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveSettingsPanel(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::RemoveSettingsPanel((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCascadeMenuItem__SWIG_0(char * jarg1, char * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  mq::AddCascadeMenuItem((char const *)arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCascadeMenuItem__SWIG_1(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::AddCascadeMenuItem((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCascadeMenuItem__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  fCascadeItemFunction arg2 ;
  int arg3 ;
  fCascadeItemFunction *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (fCascadeItemFunction *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null fCascadeItemFunction", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  mq::AddCascadeMenuItem((char const *)arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCascadeMenuItem__SWIG_3(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  fCascadeItemFunction arg2 ;
  fCascadeItemFunction *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (fCascadeItemFunction *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null fCascadeItemFunction", 0);
    return ;
  }
  arg2 = *argp2; 
  mq::AddCascadeMenuItem((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveCascadeMenuItem(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::RemoveCascadeMenuItem((char const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetEQWindowHandle() {
  void * jresult ;
  HWND result;
  
  result = mq::GetEQWindowHandle();
  jresult = new HWND(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ReinitializeWindowList() {
  mq::ReinitializeWindowList();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveXMLFile(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::RemoveXMLFile((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddXMLFile(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::AddXMLFile((char const *)arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsXMLFilePresent(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsXMLFilePresent((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendWndClick(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)mq::SendWndClick((char const *)arg1,(char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendWndNotification(char * jarg1, char * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  void *arg4 = (void *) nullptr ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (void *)jarg4; 
  result = (bool)mq::SendWndNotification((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendTabSelect(char * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)mq::SendTabSelect((char const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindMQ2Window(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  CXWnd *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CXWnd *)mq::FindMQ2Window((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindMQ2WindowPath(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  CXWnd *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (CXWnd *)mq::FindMQ2WindowPath((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetParentWnd(void * jarg1) {
  void * jresult ;
  CXWnd *arg1 = (CXWnd *) 0 ;
  CXWnd *result = 0 ;
  
  arg1 = (CXWnd *)jarg1; 
  result = (CXWnd *)mq::GetParentWnd(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsScreenPieceLoaded(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsScreenPieceLoaded((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendComboSelect(char * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)mq::SendComboSelect((char const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendListSelect(char * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)mq::SendListSelect((char const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendListSelect2(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CXWnd *arg1 = (CXWnd *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (CXWnd *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)mq::SendListSelect2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SendWndClick2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  CXWnd *arg1 = (CXWnd *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (CXWnd *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)mq::SendWndClick2(arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CreateMQ2NewsWindow() {
  mq::CreateMQ2NewsWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DeleteMQ2NewsWindow() {
  mq::DeleteMQ2NewsWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_dsp_chat_no_events(char * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool arg3 = (bool) true ;
  bool arg4 = (bool) true ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  mq::dsp_chat_no_events((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WriteChatf(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::WriteChatf((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WriteChatColorf(char * jarg1, int jarg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  void *arg3 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  mq::WriteChatColorf((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WriteChatfSafe(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::WriteChatfSafe((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InitializeMQ2Plugins() {
  mq::InitializeMQ2Plugins();
}


SWIGEXPORT int SWIGSTDCALL CSharp_LoadMQ2Plugin(char * jarg1, unsigned int jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 = (bool) false ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)mq::LoadMQ2Plugin((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnloadMQ2Plugin(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::UnloadMQ2Plugin((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnloadMQ2Plugins() {
  mq::UnloadMQ2Plugins();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShutdownMQ2Plugins() {
  mq::ShutdownMQ2Plugins();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShutdownFailedPlugins() {
  mq::ShutdownFailedPlugins();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveMQ2PluginLoadStatus(char * jarg1, unsigned int jarg2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  mq::SaveMQ2PluginLoadStatus((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DrawHUD() {
  mq::DrawHUD();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCommand__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  char *arg1 = (char *) 0 ;
  fEQCommand arg2 ;
  bool arg3 = (bool) false ;
  bool arg4 = (bool) true ;
  bool arg5 = (bool) false ;
  fEQCommand *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (fEQCommand *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null fEQCommand", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  mq::AddCommand((char const *)arg1,SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddAlias(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::AddAlias((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveAlias(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::RemoveAlias((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddSubstitute(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::AddSubstitute((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveSubstitute(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::RemoveSubstitute((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveCommand(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::RemoveCommand((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PulseCommands() {
  mq::PulseCommands();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TimedCommand(char * jarg1, int jarg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  mq::TimedCommand((char const *)arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsCommand(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsCommand((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsAlias(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsAlias((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCommand__SWIG_1(char * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::function< void (eqlib::PlayerClient *,char const *) > > arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  std::function< void (eqlib::PlayerClient *,char const *) > *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (std::function< void (eqlib::PlayerClient *,char const *) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (eqlib::PlayerClient *,char const *) >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  mq::AddCommand((char const *)arg1,SWIG_STD_MOVE(arg2),arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCommand__SWIG_2(char * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::function< void (eqlib::PlayerClient *,char const *) > > arg2 ;
  bool arg3 ;
  bool arg4 ;
  std::function< void (eqlib::PlayerClient *,char const *) > *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (std::function< void (eqlib::PlayerClient *,char const *) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (eqlib::PlayerClient *,char const *) >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  mq::AddCommand((char const *)arg1,SWIG_STD_MOVE(arg2),arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCommand__SWIG_3(char * jarg1, void * jarg2, unsigned int jarg3) {
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::function< void (eqlib::PlayerClient *,char const *) > > arg2 ;
  bool arg3 ;
  std::function< void (eqlib::PlayerClient *,char const *) > *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (std::function< void (eqlib::PlayerClient *,char const *) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (eqlib::PlayerClient *,char const *) >", 0);
    return ;
  }
  arg2 = *argp2; 
  arg3 = jarg3 ? true : false; 
  mq::AddCommand((char const *)arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddCommand__SWIG_4(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  SwigValueWrapper< std::function< void (eqlib::PlayerClient *,char const *) > > arg2 ;
  std::function< void (eqlib::PlayerClient *,char const *) > *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (std::function< void (eqlib::PlayerClient *,char const *) > *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::function< void (eqlib::PlayerClient *,char const *) >", 0);
    return ;
  }
  arg2 = *argp2; 
  mq::AddCommand((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_EchoClean(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::EchoClean(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseWaiting() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::IsMouseWaiting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseWaitingForButton() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::IsMouseWaitingForButton();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MoveMouse(int jarg1, int jarg2) {
  unsigned int jresult ;
  int arg1 ;
  int arg2 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)mq::MoveMouse(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClickMouseButton(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)mq::ClickMouseButton(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MouseToPlayer(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  DWORD arg2 ;
  bool arg3 = (bool) false ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)mq::MouseToPlayer(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClickMouseItem__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  MQGroundSpawn *arg1 = 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (MQGroundSpawn *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQGroundSpawn const & is null", 0);
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (bool)mq::ClickMouseItem((MQGroundSpawn const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClickMouseItem__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  MQGroundSpawn *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (MQGroundSpawn *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQGroundSpawn const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)mq::ClickMouseItem(arg1,(MQGroundSpawn const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConvertCR(char * jarg1, unsigned int jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  mq::ConvertCR(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_DrawHUDText(char * jarg1, int jarg2, int jarg3, unsigned int jarg4, int jarg5) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  unsigned int arg4 ;
  int arg5 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = (int)jarg5; 
  mq::DrawHUDText((char const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugSpew(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::DebugSpew((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugSpewAlways(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::DebugSpewAlways((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugSpewAlwaysFile(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::DebugSpewAlwaysFile((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugSpewNoFile(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::DebugSpewNoFile((char const *)arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetArg(char * jarg1, char * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, char jarg7, unsigned int jarg8) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 = (bool) false ;
  bool arg5 = (bool) false ;
  bool arg6 = (bool) false ;
  char arg7 = (char) 0 ;
  bool arg8 = (bool) false ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = (char)jarg7; 
  arg8 = jarg8 ? true : false; 
  result = (char *)mq::GetArg(arg1,(char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetMaybeQuotedArg(char * jarg1, int jarg2, char * jarg3, int jarg4) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (char *)mq::GetMaybeQuotedArg(arg1,arg2,(char const *)arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetEQPath(char * jarg1, unsigned int jarg2) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (char *)mq::GetEQPath(arg1,SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HideDoCommand(void * jarg1, char * jarg2, unsigned int jarg3) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  mq::HideDoCommand(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoCommandf(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::DoCommandf((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoCommand(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EzCommand(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::EzCommand((char const *)arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQToSTML(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 = (size_t) MAX_STRING ;
  uint32_t arg4 = (uint32_t) 0xFFFFFF ;
  DWORD result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  result = (DWORD)mq::MQToSTML((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StripMQChat__SWIG_0(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::StripMQChat((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StripMQChat__SWIG_1(void * jarg1, char * jarg2) {
  std::string_view arg1 ;
  char *arg2 = (char *) 0 ;
  std::string_view *argp1 ;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (char *)jarg2; 
  mq::StripMQChat(SWIG_STD_MOVE(arg1),arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_STMLToPlainText(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::STMLToPlainText(arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSubFromLine(int jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (char *)mq::GetSubFromLine(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetFilenameFromFullPath(char * jarg1) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (char *)mq::GetFilenameFromFullPath((char const *)arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CompareTimes(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)mq::CompareTimes(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddFilter(char * jarg1, int jarg2, void * jarg3) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (bool *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "bool & is null", 0);
    return ;
  } 
  mq::AddFilter((char const *)arg1,arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DefaultFilters() {
  mq::DefaultFilters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CheckChatForEvent(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::CheckChatForEvent((char const *)arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindInvSlotForContents(void * jarg1) {
  int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  int result;
  
  arg1 = (ItemClient *)jarg1; 
  result = (int)mq::FindInvSlotForContents(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetLanguageIDByName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::GetLanguageIDByName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCurrencyIDByName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::GetCurrencyIDByName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSpellNameByID(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)mq::GetSpellNameByID(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSpellByName(void * jarg1) {
  void * jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  EQ_Spell *result = 0 ;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (EQ_Spell *)mq::GetSpellByName(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSpellByAAName(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  EQ_Spell *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (EQ_Spell *)mq::GetSpellByAAName((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetAAById(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 = (int) -1 ;
  CAltAbilityData *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (CAltAbilityData *)mq::GetAAById(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetAAByIdWrapper__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  CAltAbilityData *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (CAltAbilityData *)mq::GetAAByIdWrapper(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetAAByIdWrapper__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  CAltAbilityData *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (CAltAbilityData *)mq::GetAAByIdWrapper(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellRankByName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::GetSpellRankByName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TruncateSpellRankName(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::TruncateSpellRankName(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindBuffIndex(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  std::string_view arg1 ;
  int arg2 = (int) 0 ;
  int arg3 = (int) -1 ;
  std::string_view *argp1 ;
  int result;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)mq::FindBuffIndex(SWIG_STD_MOVE(arg1),arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveBuffByName(void * jarg1) {
  unsigned int jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  bool result;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)mq::RemoveBuffByName(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveBuffBySpellID(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)mq::RemoveBuffBySpellID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemoveBuffByIndex(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)mq::RemoveBuffByIndex(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RemovePetBuffByName(void * jarg1) {
  unsigned int jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  bool result;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)mq::RemovePetBuffByName(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StripQuotes(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::StripQuotes(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsActiveAA(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsActiveAA((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetAdvLootPersonalListItem(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  DWORD arg1 ;
  DWORD arg2 ;
  CXWnd *result = 0 ;
  
  arg1 = (DWORD)jarg1; 
  arg2 = (DWORD)jarg2; 
  result = (CXWnd *)mq::GetAdvLootPersonalListItem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetAdvLootSharedListItem(unsigned int jarg1, unsigned int jarg2) {
  void * jresult ;
  DWORD arg1 ;
  DWORD arg2 ;
  CXWnd *result = 0 ;
  
  arg1 = (DWORD)jarg1; 
  arg2 = (DWORD)jarg2; 
  result = (CXWnd *)mq::GetAdvLootSharedListItem(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LootInProgress(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  CAdvancedLootWnd *arg1 = (CAdvancedLootWnd *) 0 ;
  CListWnd *arg2 = (CListWnd *) 0 ;
  CListWnd *arg3 = (CListWnd *) 0 ;
  bool result;
  
  arg1 = (CAdvancedLootWnd *)jarg1; 
  arg2 = (CListWnd *)jarg2; 
  arg3 = (CListWnd *)jarg3; 
  result = (bool)mq::LootInProgress(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeDidStuff() {
  mq::WeDidStuff();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetFreeInventory(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)mq::GetFreeInventory(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetFreeStack(void * jarg1) {
  int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  int result;
  
  arg1 = (ItemClient *)jarg1; 
  result = (int)mq::GetFreeStack(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RangeRandom(int jarg1, int jarg2) {
  int jresult ;
  int arg1 ;
  int arg2 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)mq::RangeRandom(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCharMaxBuffSlots() {
  int jresult ;
  int result;
  
  result = (int)mq::GetCharMaxBuffSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCharMaxLevel() {
  int jresult ;
  int result;
  
  result = (int)mq::GetCharMaxLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetBodyType(void * jarg1) {
  int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  int result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (int)mq::GetBodyType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSpawnType(void * jarg1) {
  void * jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  eSpawnType result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = mq::GetSpawnType(arg1);
  jresult = new eSpawnType(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsRaidMember__SWIG_0(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsRaidMember((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsRaidMember__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (bool)mq::IsRaidMember(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetRaidMemberIndex__SWIG_0(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::GetRaidMemberIndex((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetRaidMemberIndex__SWIG_1(void * jarg1) {
  int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  int result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (int)mq::GetRaidMemberIndex(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsGroupMember__SWIG_0(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsGroupMember((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsGroupMember__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (bool)mq::IsGroupMember(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsFellowshipMember(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsFellowshipMember((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsGuildMember(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::IsGuildMember((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGroupMercenaryCount(unsigned int jarg1) {
  int jresult ;
  uint32_t arg1 ;
  int result;
  
  arg1 = (uint32_t)jarg1; 
  result = (int)mq::GetGroupMercenaryCount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetRaidMember(int jarg1) {
  void * jresult ;
  int arg1 ;
  SPAWNINFO *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (SPAWNINFO *)mq::GetRaidMember(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetGroupMember(int jarg1) {
  void * jresult ;
  int arg1 ;
  SPAWNINFO *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (SPAWNINFO *)mq::GetGroupMember(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetGroupMarkedTargetID(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  uint32_t result;
  
  arg1 = (int)jarg1; 
  result = (uint32_t)mq::GetGroupMarkedTargetID(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetRaidMarkedTargetID(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  uint32_t result;
  
  arg1 = (int)jarg1; 
  result = (uint32_t)mq::GetRaidMarkedTargetID(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsAssistNPC(void * jarg1) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (bool)mq::IsAssistNPC(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoFace(void * jarg1, void * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  CVector3 arg2 ;
  CVector3 *argp2 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  argp2 = (CVector3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector3", 0);
    return ;
  }
  arg2 = *argp2; 
  mq::DoFace(arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_RefreshKeyRingsThreadData_ItemName_set(void * jarg1, char * jarg2) {
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ItemName, (const char *)arg2, 256-1);
      arg1->ItemName[256-1] = 0;
    } else {
      arg1->ItemName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_RefreshKeyRingsThreadData_ItemName_get(void * jarg1) {
  char * jresult ;
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  char *result = 0 ;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  result = (char *)(char *) ((arg1)->ItemName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RefreshKeyRingsThreadData_phWnd_set(void * jarg1, void * jarg2) {
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  CSidlScreenWnd *arg2 = (CSidlScreenWnd *) 0 ;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  arg2 = (CSidlScreenWnd *)jarg2; 
  if (arg1) (arg1)->phWnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RefreshKeyRingsThreadData_phWnd_get(void * jarg1) {
  void * jresult ;
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  CSidlScreenWnd *result = 0 ;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  result = (CSidlScreenWnd *) ((arg1)->phWnd);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RefreshKeyRingsThreadData_bExact_set(void * jarg1, unsigned int jarg2) {
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  bool arg2 ;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bExact = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RefreshKeyRingsThreadData_bExact_get(void * jarg1) {
  unsigned int jresult ;
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  bool result;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  result = (bool) ((arg1)->bExact);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RefreshKeyRingsThreadData_bUseCmd_set(void * jarg1, unsigned int jarg2) {
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  bool arg2 ;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseCmd = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RefreshKeyRingsThreadData_bUseCmd_get(void * jarg1) {
  unsigned int jresult ;
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  bool result;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  result = (bool) ((arg1)->bUseCmd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RefreshKeyRingsThreadData() {
  void * jresult ;
  mq::RefreshKeyRingsThreadData *result = 0 ;
  
  result = (mq::RefreshKeyRingsThreadData *)new mq::RefreshKeyRingsThreadData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RefreshKeyRingsThreadData(void * jarg1) {
  mq::RefreshKeyRingsThreadData *arg1 = (mq::RefreshKeyRingsThreadData *) 0 ;
  
  arg1 = (mq::RefreshKeyRingsThreadData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetItemFromContents(void * jarg1) {
  void * jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  ItemDefinition *result = 0 ;
  
  arg1 = (ItemClient *)jarg1; 
  result = (ItemDefinition *)mq::GetItemFromContents(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddMacroLine(char * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)mq::AddMacroLine((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetLightForSpawn(void * jarg1) {
  char * jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *result = 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (char *)mq::GetLightForSpawn(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetDeityTeamByID(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)mq::GetDeityTeamByID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ConColor(void * jarg1) {
  int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  int result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (int)mq::ConColor(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetGuildByID(long long jarg1) {
  char * jresult ;
  int64_t arg1 ;
  char *result = 0 ;
  
  arg1 = (int64_t)jarg1; 
  result = (char *)mq::GetGuildByID(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GetGuildIDByName(char * jarg1) {
  long long jresult ;
  char *arg1 = (char *) 0 ;
  int64_t result;
  
  arg1 = (char *)jarg1; 
  result = (int64_t)mq::GetGuildIDByName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetEnviroContainer() {
  void * jresult ;
  ItemClient *result = 0 ;
  
  result = (ItemClient *)mq::GetEnviroContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindContainerForContents(void * jarg1) {
  void * jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  CContainerWnd *result = 0 ;
  
  arg1 = (ItemClient *)jarg1; 
  result = (CContainerWnd *)mq::FindContainerForContents(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FindSpeed(void * jarg1) {
  float jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  float result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (float)mq::FindSpeed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsNamed(void * jarg1) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (bool)mq::IsNamed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemHasStat__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  std::string_view arg2 ;
  std::string_view *argp2 ;
  int result;
  
  arg1 = (ItemClient *)jarg1; 
  argp2 = (std::string_view *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)mq::ItemHasStat(arg1,SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemHasStat__SWIG_1(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ItemClient *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)mq::ItemHasStat(arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetLoginName() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)mq::GetLoginName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DistanceToPoint(void * jarg1, float jarg2, float jarg3) {
  float jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  float arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)mq::DistanceToPoint(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_Distance3DToPoint(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)mq::Distance3DToPoint(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ShowSpellSlotInfo(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4) {
  char * jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *arg4 = (char *) "<br>" ;
  char *result = 0 ;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (char *)jarg4; 
  result = (char *)mq::ShowSpellSlotInfo(arg1,arg2,SWIG_STD_MOVE(arg3),(char const *)arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParseSpellEffect(void * jarg1, int jarg2, char * jarg3, unsigned int jarg4, int jarg5) {
  char * jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  int arg5 = (int) 100 ;
  char *result = 0 ;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (int)jarg5; 
  result = (char *)mq::ParseSpellEffect(arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellAttrib(void * jarg1, int jarg2) {
  int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)mq::GetSpellAttrib(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GetSpellBase(void * jarg1, int jarg2) {
  long long jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int arg2 ;
  int64_t result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)mq::GetSpellBase(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GetSpellBase2(void * jarg1, int jarg2) {
  long long jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int arg2 ;
  int64_t result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)mq::GetSpellBase2(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GetSpellMax(void * jarg1, int jarg2) {
  long long jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int arg2 ;
  int64_t result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)mq::GetSpellMax(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellCalc(void * jarg1, int jarg2) {
  int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)mq::GetSpellCalc(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SlotValueCalculate(char * jarg1, void * jarg2, int jarg3, double jarg4) {
  char *arg1 = (char *) 0 ;
  EQ_Spell *arg2 = (EQ_Spell *) 0 ;
  int arg3 ;
  double arg4 = (double) 1.0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (EQ_Spell *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (double)jarg4; 
  mq::SlotValueCalculate(arg1,arg2,arg3,arg4);
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CalcValue(int jarg1, long long jarg2, long long jarg3, int jarg4, int jarg5, int jarg6) {
  long long jresult ;
  int arg1 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int arg4 ;
  int arg5 = (int) eqlib::MAX_PC_LEVEL ;
  int arg6 = (int) eqlib::MAX_PC_LEVEL ;
  int64_t result;
  
  arg1 = (int)jarg1; 
  arg2 = (int64_t)jarg2; 
  arg3 = (int64_t)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (int64_t)mq::CalcValue(arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSpellEffectName(int jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (char *)mq::GetSpellEffectName(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetGameDate(void * jarg1, void * jarg2, void * jarg3) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  mq::GetGameDate(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetGameTime(void * jarg1, void * jarg2, void * jarg3) {
  int *arg1 = (int *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (int *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  mq::GetGameTime(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SyntaxError(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::SyntaxError((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MacroError(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::MacroError((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_FatalError(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::FatalError((char const *)arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSpellRestrictions(void * jarg1, unsigned int jarg2, char * jarg3, unsigned int jarg4) {
  char * jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *result = 0 ;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (char *)mq::GetSpellRestrictions(arg1,arg2,arg3,SWIG_STD_MOVE(arg4));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQ2DataError(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  mq::MQ2DataError(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DisplayOverlayText(char * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  uint32_t arg3 ;
  uint32_t arg4 ;
  uint32_t arg5 ;
  uint32_t arg6 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = (uint32_t)jarg6; 
  mq::DisplayOverlayText((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CustomPopup(char * jarg1, unsigned int jarg2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  mq::CustomPopup(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsBardSong(void * jarg1) {
  unsigned int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (EQ_Spell *)jarg1; 
  result = (bool)mq::IsBardSong(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsSPAEffect(void * jarg1, int jarg2) {
  unsigned int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)mq::IsSPAEffect(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetLDoNTheme(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)mq::GetLDoNTheme(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TriggeringEffectSpell(void * jarg1, int jarg2) {
  unsigned int jresult ;
  SPELL *arg1 = (SPELL *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (SPELL *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)mq::TriggeringEffectSpell(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BuffStackTest(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  SPELL *arg1 = (SPELL *) 0 ;
  SPELL *arg2 = (SPELL *) 0 ;
  bool arg3 = (bool) false ;
  bool arg4 = (bool) false ;
  bool result;
  
  arg1 = (SPELL *)jarg1; 
  arg2 = (SPELL *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)mq::BuffStackTest(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WillStackWith(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  EQ_Spell *arg2 = (EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (EQ_Spell *)jarg2; 
  result = (bool)mq::WillStackWith((EQ_Spell const *)arg1,(EQ_Spell const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsSpellTooPowerful(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  EQ_Spell *arg3 = (EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  arg3 = (EQ_Spell *)jarg3; 
  result = (bool)mq::IsSpellTooPowerful(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetItemTimer(void * jarg1) {
  unsigned int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  uint32_t result;
  
  arg1 = (ItemClient *)jarg1; 
  result = (uint32_t)mq::GetItemTimer(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetItemContentsByName(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ItemClient *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ItemClient *)mq::GetItemContentsByName((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LoH_HT_Ready() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::LoH_HT_Ready();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetFuncParam(char * jarg1, int jarg2, char * jarg3, unsigned int jarg4, char * jarg5, unsigned int jarg6) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  char *arg5 = (char *) 0 ;
  size_t arg6 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (size_t)jarg6; 
  result = (char *)mq::GetFuncParam((char const *)arg1,arg2,arg3,SWIG_STD_MOVE(arg4),arg5,SWIG_STD_MOVE(arg6));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DropTimers() {
  mq::DropTimers();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LoadCfgFile(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 = (bool) false ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)mq::LoadCfgFile((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQGroundSpawn_Type_set(void * jarg1, int jarg2) {
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  mq::MQGroundSpawnType arg2 ;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  arg2 = (mq::MQGroundSpawnType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQGroundSpawn_Type_get(void * jarg1) {
  int jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  mq::MQGroundSpawnType result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = (mq::MQGroundSpawnType) ((arg1)->Type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQGroundSpawn_Object_set(void * jarg1, void * jarg2) {
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  mq::AnyMQGroundItem *arg2 = (mq::AnyMQGroundItem *) 0 ;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  arg2 = (mq::AnyMQGroundItem *)jarg2; 
  if (arg1) (arg1)->Object = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQGroundSpawn_Object_get(void * jarg1) {
  void * jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  mq::AnyMQGroundItem *result = 0 ;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = (mq::AnyMQGroundItem *)& ((arg1)->Object);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQGroundSpawn__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  mq::MQGroundSpawn *result = 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (mq::MQGroundSpawn *)new mq::MQGroundSpawn(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQGroundSpawn__SWIG_1(void * jarg1) {
  void * jresult ;
  EQPlacedItem *arg1 = (EQPlacedItem *) 0 ;
  mq::MQGroundSpawn *result = 0 ;
  
  arg1 = (EQPlacedItem *)jarg1; 
  result = (mq::MQGroundSpawn *)new mq::MQGroundSpawn(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQGroundSpawn__SWIG_2() {
  void * jresult ;
  mq::MQGroundSpawn *result = 0 ;
  
  result = (mq::MQGroundSpawn *)new mq::MQGroundSpawn();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MQGroundSpawn_Distance(void * jarg1, void * jarg2) {
  float jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  float result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  result = (float)((mq::MQGroundSpawn const *)arg1)->Distance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MQGroundSpawn_Distance3D(void * jarg1, void * jarg2) {
  float jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  float result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  result = (float)((mq::MQGroundSpawn const *)arg1)->Distance3D(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQGroundSpawn_Actor(void * jarg1) {
  void * jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  CActorInterface *result = 0 ;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = (CActorInterface *)((mq::MQGroundSpawn const *)arg1)->Actor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQGroundSpawn_Name(void * jarg1) {
  void * jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  CXStr result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = ((mq::MQGroundSpawn const *)arg1)->Name();
  jresult = new CXStr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQGroundSpawn_DisplayName(void * jarg1) {
  void * jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  CXStr result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = ((mq::MQGroundSpawn const *)arg1)->DisplayName();
  jresult = new CXStr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQGroundSpawn_Position(void * jarg1) {
  void * jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  CVector3 result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = ((mq::MQGroundSpawn const *)arg1)->Position();
  jresult = new CVector3(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQGroundSpawn_ID(void * jarg1) {
  int jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  int result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = (int)((mq::MQGroundSpawn const *)arg1)->ID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQGroundSpawn_SubID(void * jarg1) {
  int jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  int result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = (int)((mq::MQGroundSpawn const *)arg1)->SubID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQGroundSpawn_ZoneID(void * jarg1) {
  int jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  int result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = (int)((mq::MQGroundSpawn const *)arg1)->ZoneID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_MQGroundSpawn_Heading(void * jarg1) {
  float jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  float result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = (float)((mq::MQGroundSpawn const *)arg1)->Heading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQGroundSpawn_ToGameObject(void * jarg1) {
  void * jresult ;
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  MQGameObject result;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  result = ((mq::MQGroundSpawn const *)arg1)->ToGameObject();
  jresult = new MQGameObject(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQGroundSpawn_Reset(void * jarg1) {
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQGroundSpawn(void * jarg1) {
  mq::MQGroundSpawn *arg1 = (mq::MQGroundSpawn *) 0 ;
  
  arg1 = (mq::MQGroundSpawn *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetGroundSpawnByName(void * jarg1) {
  void * jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  mq::MQGroundSpawn result;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = mq::GetGroundSpawnByName(SWIG_STD_MOVE(arg1));
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetGroundSpawnByID(int jarg1) {
  void * jresult ;
  int arg1 ;
  mq::MQGroundSpawn result;
  
  arg1 = (int)jarg1; 
  result = mq::GetGroundSpawnByID(arg1);
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetNearestGroundSpawn() {
  void * jresult ;
  mq::MQGroundSpawn result;
  
  result = mq::GetNearestGroundSpawn();
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetNthGroundSpawnFromMe(unsigned int jarg1) {
  void * jresult ;
  size_t arg1 ;
  mq::MQGroundSpawn result;
  
  arg1 = (size_t)jarg1; 
  result = mq::GetNthGroundSpawnFromMe(SWIG_STD_MOVE(arg1));
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGroundSpawnCount() {
  int jresult ;
  int result;
  
  result = (int)mq::GetGroundSpawnCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGroundSpawnCountByName(void * jarg1) {
  int jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  int result;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (int)mq::GetGroundSpawnCountByName(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CurrentGroundSpawn() {
  void * jresult ;
  mq::MQGroundSpawn result;
  
  result = mq::CurrentGroundSpawn();
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FirstGroundSpawn() {
  void * jresult ;
  mq::MQGroundSpawn result;
  
  result = mq::FirstGroundSpawn();
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LastGroundSpawn() {
  void * jresult ;
  mq::MQGroundSpawn result;
  
  result = mq::LastGroundSpawn();
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NextGroundSpawn() {
  void * jresult ;
  mq::MQGroundSpawn result;
  
  result = mq::NextGroundSpawn();
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PrevGroundSpawn() {
  void * jresult ;
  mq::MQGroundSpawn result;
  
  result = mq::PrevGroundSpawn();
  jresult = new mq::MQGroundSpawn(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetGroundSpawn__SWIG_0(void * jarg1) {
  std::string_view arg1 ;
  std::string_view *argp1 ;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::SetGroundSpawn(SWIG_STD_MOVE(arg1));
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetGroundSpawn__SWIG_1(void * jarg1) {
  mq::MQGroundSpawn *arg1 = 0 ;
  
  arg1 = (mq::MQGroundSpawn *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::MQGroundSpawn const & is null", 0);
    return ;
  } 
  mq::SetGroundSpawn((mq::MQGroundSpawn const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClearGroundSpawn() {
  mq::ClearGroundSpawn();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasCurrentGroundSpawn() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::HasCurrentGroundSpawn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetFriendlyNameForGroundItem__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  CXStr result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = mq::GetFriendlyNameForGroundItem((eqlib::EQGroundItem const *)arg1);
  jresult = new CXStr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetFriendlyNameForPlacedItem(void * jarg1) {
  void * jresult ;
  EQPlacedItem *arg1 = (EQPlacedItem *) 0 ;
  CXStr result;
  
  arg1 = (EQPlacedItem *)jarg1; 
  result = mq::GetFriendlyNameForPlacedItem((EQPlacedItem const *)arg1);
  jresult = new CXStr(result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetFriendlyNameForGroundItem__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  PGROUNDITEM arg1 = (PGROUNDITEM) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  arg1 = (PGROUNDITEM)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (char *)mq::GetFriendlyNameForGroundItem(arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddObservedEQObject(void * jarg1) {
  std::shared_ptr< MQTransient > *arg1 = 0 ;
  
  arg1 = (std::shared_ptr< MQTransient > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::shared_ptr< MQTransient > const & is null", 0);
    return ;
  } 
  mq::AddObservedEQObject((std::shared_ptr< MQTransient > const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InvalidateObservedEQObject(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  mq::InvalidateObservedEQObject(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetSwitchTarget(void * jarg1) {
  EQSwitch *arg1 = (EQSwitch *) 0 ;
  
  arg1 = (EQSwitch *)jarg1; 
  mq::SetSwitchTarget(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSwitchByID(int jarg1) {
  void * jresult ;
  int arg1 ;
  EQSwitch *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (EQSwitch *)mq::GetSwitchByID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindSwitchByName(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) nullptr ;
  EQSwitch *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (EQSwitch *)mq::FindSwitchByName((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClearSearchSpawn(void * jarg1) {
  MQSpawnSearch *arg1 = (MQSpawnSearch *) 0 ;
  
  arg1 = (MQSpawnSearch *)jarg1; 
  mq::ClearSearchSpawn(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NthNearestSpawn(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  MQSpawnSearch *arg1 = (MQSpawnSearch *) 0 ;
  int arg2 ;
  SPAWNINFO *arg3 = (SPAWNINFO *) 0 ;
  bool arg4 = (bool) false ;
  SPAWNINFO *result = 0 ;
  
  arg1 = (MQSpawnSearch *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (SPAWNINFO *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (SPAWNINFO *)mq::NthNearestSpawn(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CountMatchingSpawns(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  MQSpawnSearch *arg1 = (MQSpawnSearch *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  bool arg3 = (bool) false ;
  int result;
  
  arg1 = (MQSpawnSearch *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)mq::CountMatchingSpawns(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SearchThroughSpawns(void * jarg1, void * jarg2) {
  void * jresult ;
  MQSpawnSearch *arg1 = (MQSpawnSearch *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  SPAWNINFO *result = 0 ;
  
  arg1 = (MQSpawnSearch *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  result = (SPAWNINFO *)mq::SearchThroughSpawns(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpawnMatchesSearch(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  MQSpawnSearch *arg1 = (MQSpawnSearch *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  SPAWNINFO *arg3 = (SPAWNINFO *) 0 ;
  bool result;
  
  arg1 = (MQSpawnSearch *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  arg3 = (SPAWNINFO *)jarg3; 
  result = (bool)mq::SpawnMatchesSearch(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SearchSpawnMatchesSearchSpawn(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MQSpawnSearch *arg1 = (MQSpawnSearch *) 0 ;
  MQSpawnSearch *arg2 = (MQSpawnSearch *) 0 ;
  bool result;
  
  arg1 = (MQSpawnSearch *)jarg1; 
  arg2 = (MQSpawnSearch *)jarg2; 
  result = (bool)mq::SearchSpawnMatchesSearchSpawn(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ParseSearchSpawnArgs(char * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  MQSpawnSearch *arg3 = (MQSpawnSearch *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (MQSpawnSearch *)jarg3; 
  result = (char *)mq::ParseSearchSpawnArgs(arg1,(char const *)arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ParseSearchSpawn(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  MQSpawnSearch *arg2 = (MQSpawnSearch *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (MQSpawnSearch *)jarg2; 
  mq::ParseSearchSpawn((char const *)arg1,arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_FormatSearchSpawn(char * jarg1, unsigned int jarg2, void * jarg3) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  MQSpawnSearch *arg3 = (MQSpawnSearch *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (MQSpawnSearch *)jarg3; 
  result = (char *)mq::FormatSearchSpawn(arg1,SWIG_STD_MOVE(arg2),arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsPCNear(void * jarg1, float jarg2) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  float arg2 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)mq::IsPCNear(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsInGroup(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool arg2 = (bool) false ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)mq::IsInGroup(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsInFellowship(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool arg2 = (bool) false ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)mq::IsInFellowship(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsInRaid(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  bool arg2 = (bool) false ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)mq::IsInRaid(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsAlert(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  uint32_t arg3 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (bool)mq::IsAlert(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetClosestAlert(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (bool)mq::GetClosestAlert(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CheckAlertForRecursion(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  MQSpawnSearch *arg1 = (MQSpawnSearch *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  arg1 = (MQSpawnSearch *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (bool)mq::CheckAlertForRecursion(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WriteFilterNames() {
  mq::WriteFilterNames();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RewriteSubstitutions() {
  mq::RewriteSubstitutions();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RewriteAliases() {
  mq::RewriteAliases();
}


SWIGEXPORT void SWIGSTDCALL CSharp_WriteAliasToIni(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::WriteAliasToIni((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindSpellListByName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::FindSpellListByName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StateHeightMultiplier(unsigned int jarg1) {
  float jresult ;
  DWORD arg1 ;
  float result;
  
  arg1 = (DWORD)jarg1; 
  result = (float)mq::StateHeightMultiplier(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Include(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)mq::Include((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetFullZone(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)mq::GetFullZone(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetZoneID(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::GetZoneID((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetShortZone(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)mq::GetShortZone(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DistanceToSpawn3D(void * jarg1, void * jarg2) {
  float jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  float result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  result = (float)mq::DistanceToSpawn3D(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EstimatedDistanceToSpawn(void * jarg1, void * jarg2) {
  float jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  float result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  result = (float)mq::EstimatedDistanceToSpawn(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerHasAAAbility(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)mq::PlayerHasAAAbility(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetAAIndexByName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::GetAAIndexByName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetAAIndexByID(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)mq::GetAAIndexByID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSkillIDFromName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::GetSkillIDFromName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InHoverState() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::InHoverState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetGameState() {
  int jresult ;
  int result;
  
  result = (int)mq::GetGameState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetWorldState() {
  int jresult ;
  int result;
  
  result = (int)mq::GetWorldState();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetMeleeRange(void * jarg1, void * jarg2) {
  float jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  result = (float)mq::GetMeleeRange(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetSpellGemTimer(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  uint32_t result;
  
  arg1 = (int)jarg1; 
  result = (uint32_t)mq::GetSpellGemTimer(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetSpellBuffTimer(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  uint32_t result;
  
  arg1 = (int)jarg1; 
  result = (uint32_t)mq::GetSpellBuffTimer(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasExpansion(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)mq::HasExpansion(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindItemBySlot__SWIG_0(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 = (int) -1 ;
  ItemContainerInstance arg3 = (ItemContainerInstance) eqlib::eItemContainerPossessions ;
  ItemClient *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ItemContainerInstance)jarg3; 
  result = (ItemClient *)mq::FindItemBySlot(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetItemContainerByType(int jarg1) {
  void * jresult ;
  ItemContainerInstance arg1 ;
  ItemContainer *result = 0 ;
  
  arg1 = (ItemContainerInstance)jarg1; 
  result = (ItemContainer *)mq::GetItemContainerByType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetItemContainerByGlobalIndex(void * jarg1) {
  void * jresult ;
  ItemGlobalIndex *arg1 = 0 ;
  ItemContainer *result = 0 ;
  
  arg1 = (ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (ItemContainer *)mq::GetItemContainerByGlobalIndex((ItemGlobalIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindItemByGlobalIndex(void * jarg1) {
  void * jresult ;
  ItemGlobalIndex *arg1 = 0 ;
  ItemClient *result = 0 ;
  
  arg1 = (ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (ItemClient *)mq::FindItemByGlobalIndex((ItemGlobalIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindItemBySlot__SWIG_1(void * jarg1) {
  void * jresult ;
  ItemGlobalIndex *arg1 = 0 ;
  ItemClient *result = 0 ;
  
  arg1 = (ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (ItemClient *)mq::FindItemBySlot((ItemGlobalIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindItemBySlot2(void * jarg1) {
  void * jresult ;
  ItemGlobalIndex *arg1 = 0 ;
  ItemClient *result = 0 ;
  
  arg1 = (ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (ItemClient *)mq::FindItemBySlot2((ItemGlobalIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindItemByName(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 = (bool) false ;
  ItemClient *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ItemClient *)mq::FindItemByName((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindItemByID(int jarg1) {
  void * jresult ;
  int arg1 ;
  ItemClient *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ItemClient *)mq::FindItemByID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindItemCountByName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::FindItemCountByName((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindItemCountByID(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)mq::FindItemCountByID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindInventoryItemCountByName(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  StringMatchType arg2 = (StringMatchType) StringMatchType::CaseInsensitive ;
  int arg3 = (int) -1 ;
  int arg4 = (int) -1 ;
  StringMatchType *argp2 ;
  int result;
  
  arg1 = (char *)jarg1; 
  argp2 = (StringMatchType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null StringMatchType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)mq::FindInventoryItemCountByName((char const *)arg1,SWIG_STD_MOVE(arg2),arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindInventoryItemByName(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  StringMatchType arg2 = (StringMatchType) StringMatchType::CaseInsensitive ;
  int arg3 = (int) -1 ;
  int arg4 = (int) -1 ;
  StringMatchType *argp2 ;
  ItemClient *result = 0 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (StringMatchType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null StringMatchType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ItemClient *)mq::FindInventoryItemByName((char const *)arg1,SWIG_STD_MOVE(arg2),arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindInventoryItemCountByID(int jarg1, int jarg2, int jarg3) {
  int jresult ;
  int arg1 ;
  int arg2 = (int) -1 ;
  int arg3 = (int) -1 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)mq::FindInventoryItemCountByID(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindBankItemByName(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ItemClient *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (ItemClient *)mq::FindBankItemByName((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindBankItemByID(int jarg1) {
  void * jresult ;
  int arg1 ;
  ItemClient *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (ItemClient *)mq::FindBankItemByID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindBankItemCountByName(char * jarg1, unsigned int jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)mq::FindBankItemCountByName((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FindBankItemCountByID(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)mq::FindBankItemCountByID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetInvSlot__SWIG_0(void * jarg1) {
  void * jresult ;
  ItemGlobalIndex *arg1 = 0 ;
  CInvSlot *result = 0 ;
  
  arg1 = (ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (CInvSlot *)mq::GetInvSlot((ItemGlobalIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetInvSlot__SWIG_1(unsigned int jarg1, short jarg2, short jarg3) {
  void * jresult ;
  DWORD arg1 ;
  short arg2 ;
  short arg3 ;
  CInvSlot *result = 0 ;
  
  arg1 = (DWORD)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  result = (CInvSlot *)mq::GetInvSlot(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetInvSlot__SWIG_2(unsigned int jarg1, short jarg2) {
  void * jresult ;
  DWORD arg1 ;
  short arg2 ;
  CInvSlot *result = 0 ;
  
  arg1 = (DWORD)jarg1; 
  arg2 = (short)jarg2; 
  result = (CInvSlot *)mq::GetInvSlot(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetInvSlot2(void * jarg1) {
  void * jresult ;
  ItemGlobalIndex *arg1 = 0 ;
  CInvSlot *result = 0 ;
  
  arg1 = (ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (CInvSlot *)mq::GetInvSlot2((ItemGlobalIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemInsideContainer(void * jarg1) {
  unsigned int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  bool result;
  
  arg1 = (ItemClient *)jarg1; 
  result = (bool)mq::IsItemInsideContainer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemMatchesSearch(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  MQItemSearch *arg1 = 0 ;
  ItemClient *arg2 = (ItemClient *) 0 ;
  bool result;
  
  arg1 = (MQItemSearch *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "MQItemSearch & is null", 0);
    return 0;
  } 
  arg2 = (ItemClient *)jarg2; 
  result = (bool)mq::ItemMatchesSearch(*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PickupItem__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ItemGlobalIndex *arg1 = 0 ;
  bool result;
  
  arg1 = (ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (bool)mq::PickupItem((ItemGlobalIndex const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PickupItem__SWIG_1(int jarg1, void * jarg2) {
  unsigned int jresult ;
  ItemContainerInstance arg1 ;
  ItemClient *arg2 = (ItemClient *) 0 ;
  bool result;
  
  arg1 = (ItemContainerInstance)jarg1; 
  arg2 = (ItemClient *)jarg2; 
  result = (bool)mq::PickupItem(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DropItem__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ItemGlobalIndex *arg1 = 0 ;
  bool result;
  
  arg1 = (ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (bool)mq::DropItem((ItemGlobalIndex const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DropItem__SWIG_1(int jarg1, short jarg2, short jarg3) {
  unsigned int jresult ;
  ItemContainerInstance arg1 ;
  short arg2 ;
  short arg3 ;
  bool result;
  
  arg1 = (ItemContainerInstance)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  result = (bool)mq::DropItem(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DropItem2(int jarg1, short jarg2, short jarg3) {
  unsigned int jresult ;
  ItemContainerInstance arg1 ;
  short arg2 ;
  short arg3 ;
  bool result;
  
  arg1 = (ItemContainerInstance)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  result = (bool)mq::DropItem2(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemOnCursor() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::ItemOnCursor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OpenContainer(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  bool arg2 = (bool) false ;
  bool arg3 = (bool) false ;
  bool result;
  
  arg1 = (ItemClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)mq::OpenContainer(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CloseContainer(void * jarg1) {
  unsigned int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  bool result;
  
  arg1 = (ItemClient *)jarg1; 
  result = (bool)mq::CloseContainer(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetAvailableBagSlots() {
  int jresult ;
  int result;
  
  result = (int)mq::GetAvailableBagSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetHighestAvailableBagSlot() {
  int jresult ;
  int result;
  
  result = (int)mq::GetHighestAvailableBagSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetAvailableBankSlots() {
  int jresult ;
  int result;
  
  result = (int)mq::GetAvailableBankSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetAvailableSharedBankSlots() {
  int jresult ;
  int result;
  
  result = (int)mq::GetAvailableSharedBankSlots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedBuff_slot_set(void * jarg1, int jarg2) {
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  int arg2 ;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->slot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CachedBuff_slot_get(void * jarg1) {
  int jresult ;
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  int result;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  result = (int) ((arg1)->slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedBuff_spellId_set(void * jarg1, int jarg2) {
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  int arg2 ;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spellId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CachedBuff_spellId_get(void * jarg1) {
  int jresult ;
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  int result;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  result = (int) ((arg1)->spellId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedBuff_duration_set(void * jarg1, int jarg2) {
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  int arg2 ;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CachedBuff_duration_get(void * jarg1) {
  int jresult ;
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  int result;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  result = (int) ((arg1)->duration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedBuff_count_set(void * jarg1, int jarg2) {
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  int arg2 ;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CachedBuff_count_get(void * jarg1) {
  int jresult ;
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  int result;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  result = (int) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedBuff_casterName_set(void * jarg1, char * jarg2) {
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->casterName, (const char *)arg2, 64-1);
      arg1->casterName[64-1] = 0;
    } else {
      arg1->casterName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CachedBuff_casterName_get(void * jarg1) {
  char * jresult ;
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  char *result = 0 ;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  result = (char *)(char *) ((arg1)->casterName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedBuff_timeStamp_set(void * jarg1, unsigned int jarg2) {
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  DWORD arg2 ;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->timeStamp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CachedBuff_timeStamp_get(void * jarg1) {
  unsigned int jresult ;
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  DWORD result;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  result = (DWORD) ((arg1)->timeStamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CachedBuff_Duration(void * jarg1) {
  unsigned int jresult ;
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  DWORD result;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  result = (DWORD)((mq::CachedBuff const *)arg1)->Duration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CachedBuff_Staleness(void * jarg1) {
  unsigned int jresult ;
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  DWORD result;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  result = (DWORD)((mq::CachedBuff const *)arg1)->Staleness();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CachedBuff() {
  void * jresult ;
  mq::CachedBuff *result = 0 ;
  
  result = (mq::CachedBuff *)new mq::CachedBuff();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CachedBuff(void * jarg1) {
  mq::CachedBuff *arg1 = (mq::CachedBuff *) 0 ;
  
  arg1 = (mq::CachedBuff *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCachedBuff(void * jarg1, void * jarg2) {
  int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  std::function< bool (mq::CachedBuff const &) > *arg2 = 0 ;
  int result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (std::function< bool (mq::CachedBuff const &) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (mq::CachedBuff const &) > const & is null", 0);
    return 0;
  } 
  result = (int)mq::GetCachedBuff(arg1,(std::function< bool (mq::CachedBuff const &) > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCachedBuffAt__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  size_t arg2 ;
  int result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (int)mq::GetCachedBuffAt(arg1,SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetCachedBuffAt__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3) {
  int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  size_t arg2 ;
  std::function< bool (mq::CachedBuff const &) > *arg3 = 0 ;
  int result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (std::function< bool (mq::CachedBuff const &) > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (mq::CachedBuff const &) > const & is null", 0);
    return 0;
  } 
  result = (int)mq::GetCachedBuffAt(arg1,SWIG_STD_MOVE(arg2),(std::function< bool (mq::CachedBuff const &) > const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCachedBuffAtSlot(void * jarg1, int jarg2) {
  void * jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::optional< mq::CachedBuff > > result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (int)jarg2; 
  result = mq::GetCachedBuffAtSlot(arg1,arg2);
  jresult = new std::optional< mq::CachedBuff >(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FilterCachedBuffs(void * jarg1, void * jarg2) {
  void * jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  std::function< bool (mq::CachedBuff const &) > *arg2 = 0 ;
  SwigValueWrapper< std::vector< mq::CachedBuff > > result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (std::function< bool (mq::CachedBuff const &) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (mq::CachedBuff const &) > const & is null", 0);
    return 0;
  } 
  result = mq::FilterCachedBuffs(arg1,(std::function< bool (mq::CachedBuff const &) > const &)*arg2);
  jresult = new std::vector< mq::CachedBuff >(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetCachedBuffCount__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  DWORD result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  result = (DWORD)mq::GetCachedBuffCount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetCachedBuffCount__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  std::function< bool (mq::CachedBuff const &) > *arg2 = 0 ;
  DWORD result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (std::function< bool (mq::CachedBuff const &) > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (mq::CachedBuff const &) > const & is null", 0);
    return 0;
  } 
  result = (DWORD)mq::GetCachedBuffCount(arg1,(std::function< bool (mq::CachedBuff const &) > const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClearCachedBuffsSpawn(void * jarg1) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  mq::ClearCachedBuffsSpawn(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClearCachedBuffs() {
  mq::ClearCachedBuffs();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetTargetBuffByCategory(unsigned int jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  DWORD arg1 ;
  DWORD arg2 = (DWORD) 0 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (DWORD)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetTargetBuffByCategory(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetTargetBuffBySubCat(char * jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  DWORD arg2 = (DWORD) 0 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetTargetBuffBySubCat((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetTargetBuffBySPA(int jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  int arg1 ;
  bool arg2 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetTargetBuffBySPA(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasCachedTargetBuffSubCat(char * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  SPAWNINFO *arg2 = (SPAWNINFO *) 0 ;
  void *arg3 = (void *) 0 ;
  DWORD arg4 = (DWORD) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (SPAWNINFO *)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (DWORD)jarg4; 
  result = (bool)mq::HasCachedTargetBuffSubCat((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasCachedTargetBuffSPA(int jarg1, unsigned int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  int arg1 ;
  bool arg2 ;
  SPAWNINFO *arg3 = (SPAWNINFO *) 0 ;
  void *arg4 = (void *) 0 ;
  bool result;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (SPAWNINFO *)jarg3; 
  arg4 = (void *)jarg4; 
  result = (bool)mq::HasCachedTargetBuffSPA(arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasBuffCastByPlayer(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)mq::HasBuffCastByPlayer(arg1,(char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TargetBuffCastByMe(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::TargetBuffCastByMe((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuff__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  std::function< bool (EQ_Affect const &) > *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (std::function< bool (EQ_Affect const &) > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (EQ_Affect const &) > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetSelfBuff((std::function< bool (EQ_Affect const &) > const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuff__SWIG_1(void * jarg1, int jarg2) {
  int jresult ;
  std::function< bool (EQ_Affect const &) > *arg1 = 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::function< bool (EQ_Affect const &) > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (EQ_Affect const &) > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (int)mq::GetSelfBuff((std::function< bool (EQ_Affect const &) > const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuff__SWIG_2(void * jarg1) {
  int jresult ;
  std::function< bool (EQ_Affect const &) > *arg1 = 0 ;
  int result;
  
  arg1 = (std::function< bool (EQ_Affect const &) > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (EQ_Affect const &) > const & is null", 0);
    return 0;
  } 
  result = (int)mq::GetSelfBuff((std::function< bool (EQ_Affect const &) > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuff__SWIG_3(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  std::function< bool (EQ_Spell *) > *arg1 = 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (std::function< bool (EQ_Spell *) > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (EQ_Spell *) > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetSelfBuff((std::function< bool (EQ_Spell *) > const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuff__SWIG_4(void * jarg1, int jarg2) {
  int jresult ;
  std::function< bool (EQ_Spell *) > *arg1 = 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::function< bool (EQ_Spell *) > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (EQ_Spell *) > const & is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (int)mq::GetSelfBuff((std::function< bool (EQ_Spell *) > const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuff__SWIG_5(void * jarg1) {
  int jresult ;
  std::function< bool (EQ_Spell *) > *arg1 = 0 ;
  int result;
  
  arg1 = (std::function< bool (EQ_Spell *) > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< bool (EQ_Spell *) > const & is null", 0);
    return 0;
  } 
  result = (int)mq::GetSelfBuff((std::function< bool (EQ_Spell *) > const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuffByCategory(unsigned int jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  DWORD arg1 ;
  DWORD arg2 = (DWORD) 0 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (DWORD)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetSelfBuffByCategory(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuffBySubCat(char * jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  PCHAR arg1 = (PCHAR) 0 ;
  DWORD arg2 = (DWORD) 0 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (PCHAR)jarg1; 
  arg2 = (DWORD)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetSelfBuffBySubCat(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfBuffBySPA(int jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  int arg1 ;
  bool arg2 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetSelfBuffBySPA(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSelfShortBuffBySPA(int jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  int arg1 ;
  bool arg2 ;
  int arg3 = (int) 0 ;
  int result;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (int)mq::GetSelfShortBuffBySPA(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasSPA__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  eEQSPA arg2 ;
  bool arg3 = (bool) false ;
  bool result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (eEQSPA)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)mq::HasSPA(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasSPA__SWIG_1(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  EQ_Affect *arg1 = 0 ;
  eEQSPA arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  arg2 = (eEQSPA)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)mq::HasSPA((EQ_Affect const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasSPA__SWIG_2(void * jarg1, int jarg2) {
  unsigned int jresult ;
  EQ_Affect *arg1 = 0 ;
  eEQSPA arg2 ;
  bool result;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  arg2 = (eEQSPA)jarg2; 
  result = (bool)mq::HasSPA((EQ_Affect const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasSPA__SWIG_3(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  mq::CachedBuff *arg1 = 0 ;
  eEQSPA arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (mq::CachedBuff *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::CachedBuff const & is null", 0);
    return 0;
  } 
  arg2 = (eEQSPA)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)mq::HasSPA((mq::CachedBuff const &)*arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_HasSPA__SWIG_4(void * jarg1, int jarg2) {
  unsigned int jresult ;
  mq::CachedBuff *arg1 = 0 ;
  eEQSPA arg2 ;
  bool result;
  
  arg1 = (mq::CachedBuff *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::CachedBuff const & is null", 0);
    return 0;
  } 
  arg2 = (eEQSPA)jarg2; 
  result = (bool)mq::HasSPA((mq::CachedBuff const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetPlayerClass(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)mq::GetPlayerClass((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsSpellUsableForClass__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  unsigned int arg2 = (unsigned int) 0 ;
  bool result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)mq::IsSpellUsableForClass(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsSpellUsableForClass__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  EQ_Affect *arg1 = 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  arg2 = (unsigned int)jarg2; 
  result = (bool)mq::IsSpellUsableForClass((EQ_Affect const &)*arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsSpellUsableForClass__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  EQ_Affect *arg1 = 0 ;
  bool result;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (bool)mq::IsSpellUsableForClass((EQ_Affect const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsSpellUsableForClass__SWIG_3(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  mq::CachedBuff arg1 ;
  unsigned int arg2 ;
  mq::CachedBuff *argp1 ;
  bool result;
  
  argp1 = (mq::CachedBuff *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::CachedBuff", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)mq::IsSpellUsableForClass(SWIG_STD_MOVE(arg1),arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsSpellUsableForClass__SWIG_4(void * jarg1) {
  unsigned int jresult ;
  mq::CachedBuff arg1 ;
  mq::CachedBuff *argp1 ;
  bool result;
  
  argp1 = (mq::CachedBuff *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::CachedBuff", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (bool)mq::IsSpellUsableForClass(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellCategory__SWIG_0(void * jarg1) {
  int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int result;
  
  arg1 = (EQ_Spell *)jarg1; 
  result = (int)mq::GetSpellCategory(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellCategory__SWIG_1(void * jarg1) {
  int jresult ;
  EQ_Affect *arg1 = 0 ;
  int result;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (int)mq::GetSpellCategory((EQ_Affect const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellCategory__SWIG_2(void * jarg1) {
  int jresult ;
  mq::CachedBuff arg1 ;
  mq::CachedBuff *argp1 ;
  int result;
  
  argp1 = (mq::CachedBuff *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::CachedBuff", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (int)mq::GetSpellCategory(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellSubcategory__SWIG_0(void * jarg1) {
  int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  int result;
  
  arg1 = (EQ_Spell *)jarg1; 
  result = (int)mq::GetSpellSubcategory(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellSubcategory__SWIG_1(void * jarg1) {
  int jresult ;
  EQ_Affect *arg1 = 0 ;
  int result;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (int)mq::GetSpellSubcategory((EQ_Affect const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellSubcategory__SWIG_2(void * jarg1) {
  int jresult ;
  mq::CachedBuff arg1 ;
  mq::CachedBuff *argp1 ;
  int result;
  
  argp1 = (mq::CachedBuff *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null mq::CachedBuff", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (int)mq::GetSpellSubcategory(SWIG_STD_MOVE(arg1));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetSpellParent(int jarg1) {
  void * jresult ;
  int arg1 ;
  EQ_Spell *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (EQ_Spell *)mq::GetSpellParent(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GetSpellCounters(int jarg1, void * jarg2) {
  long long jresult ;
  eEQSPA arg1 ;
  EQ_Affect *arg2 = 0 ;
  int64_t result;
  
  arg1 = (eEQSPA)jarg1; 
  arg2 = (EQ_Affect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (int64_t)mq::GetSpellCounters(arg1,(EQ_Affect const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GetMySpellCounters(int jarg1) {
  long long jresult ;
  eEQSPA arg1 ;
  int64_t result;
  
  arg1 = (eEQSPA)jarg1; 
  result = (int64_t)mq::GetMySpellCounters(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GetTotalSpellCounters(void * jarg1) {
  long long jresult ;
  EQ_Affect *arg1 = 0 ;
  int64_t result;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (int64_t)mq::GetTotalSpellCounters((EQ_Affect const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_GetMyTotalSpellCounters() {
  long long jresult ;
  int64_t result;
  
  result = (int64_t)mq::GetMyTotalSpellCounters();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetMeleeSpeedPctFromSpell(void * jarg1, unsigned int jarg2) {
  int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)mq::GetMeleeSpeedPctFromSpell(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetHighestLearnedSpellByGroupID(int jarg1) {
  void * jresult ;
  int arg1 ;
  EQ_Spell *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (EQ_Spell *)mq::GetHighestLearnedSpellByGroupID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetSpellID__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  DWORD result;
  
  arg1 = (EQ_Spell *)jarg1; 
  result = (DWORD)mq::GetSpellID(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetSpellID__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  EQ_Affect *arg1 = 0 ;
  DWORD result;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (DWORD)mq::GetSpellID((EQ_Affect const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetSpellID__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  mq::CachedBuff *arg1 = 0 ;
  DWORD result;
  
  arg1 = (mq::CachedBuff *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::CachedBuff const & is null", 0);
    return 0;
  } 
  result = (DWORD)mq::GetSpellID((mq::CachedBuff const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSpellName__SWIG_0(void * jarg1) {
  char * jresult ;
  EQ_Spell *arg1 = (EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (EQ_Spell *)jarg1; 
  result = (char *)mq::GetSpellName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSpellName__SWIG_1(void * jarg1) {
  char * jresult ;
  EQ_Affect *arg1 = 0 ;
  char *result = 0 ;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (char *)mq::GetSpellName((EQ_Affect const &)*arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSpellName__SWIG_2(void * jarg1) {
  char * jresult ;
  mq::CachedBuff *arg1 = 0 ;
  char *result = 0 ;
  
  arg1 = (mq::CachedBuff *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::CachedBuff const & is null", 0);
    return 0;
  } 
  result = (char *)mq::GetSpellName((mq::CachedBuff const &)*arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSpellCaster__SWIG_0(void * jarg1) {
  char * jresult ;
  EQ_Affect *arg1 = 0 ;
  char *result = 0 ;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (char *)mq::GetSpellCaster((EQ_Affect const &)*arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetSpellCaster__SWIG_1(void * jarg1) {
  char * jresult ;
  mq::CachedBuff *arg1 = 0 ;
  char *result = 0 ;
  
  arg1 = (mq::CachedBuff *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "mq::CachedBuff const & is null", 0);
    return 0;
  } 
  result = (char *)mq::GetSpellCaster((mq::CachedBuff const &)*arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetPetSpellCaster(void * jarg1) {
  char * jresult ;
  EQ_Affect *arg1 = 0 ;
  char *result = 0 ;
  
  arg1 = (EQ_Affect *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EQ_Affect const & is null", 0);
    return 0;
  } 
  result = (char *)mq::GetPetSpellCaster((EQ_Affect const &)*arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSpellCategoryFromName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  eEQSPELLCAT result;
  
  arg1 = (char *)jarg1; 
  result = (eEQSPELLCAT)mq::GetSpellCategoryFromName((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSPAFromName(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  eEQSPA result;
  
  arg1 = (char *)jarg1; 
  result = (eEQSPA)mq::GetSPAFromName((char const *)arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetTeleportName(unsigned int jarg1) {
  char * jresult ;
  DWORD arg1 ;
  char *result = 0 ;
  
  arg1 = (DWORD)jarg1; 
  result = (char *)mq::GetTeleportName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCurrentModule() {
  void * jresult ;
  HMODULE result;
  
  result = mq::GetCurrentModule();
  jresult = new HMODULE(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MQ2End(void * jarg1) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  DWORD result;
  
  arg1 = (void *)jarg1; 
  result = (DWORD)mq::MQ2End(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetlocalPlayerOffset() {
  unsigned int jresult ;
  DWORD result;
  
  result = (DWORD)mq::GetlocalPlayerOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQ2Shutdown() {
  mq::MQ2Shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_hUnloadComplete_set(void * jarg1) {
  HANDLE arg1 = (HANDLE) 0 ;
  
  arg1 = (HANDLE)jarg1; 
  mq::hUnloadComplete = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_hUnloadComplete_get() {
  void * jresult ;
  HANDLE result;
  
  result = (HANDLE)mq::hUnloadComplete;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_InitializeMQ2AutoInventory() {
  mq::InitializeMQ2AutoInventory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShutdownMQ2AutoInventory() {
  mq::ShutdownMQ2AutoInventory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PulseMQ2AutoInventory() {
  mq::PulseMQ2AutoInventory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttackRanged(void * jarg1) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) pTarget ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  mq::AttackRanged(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UseAbility(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::UseAbility((char const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetNextMacroBlock() {
  void * jresult ;
  MQMacroBlockPtr result;
  
  result = mq::GetNextMacroBlock();
  jresult = new MQMacroBlockPtr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCurrentMacroBlock() {
  void * jresult ;
  MQMacroBlockPtr result;
  
  result = mq::GetCurrentMacroBlock();
  jresult = new MQMacroBlockPtr(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetMacroBlockCount() {
  int jresult ;
  int result;
  
  result = (int)mq::GetMacroBlockCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndAllMacros() {
  mq::EndAllMacros();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Calculate(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "double & is null", 0);
    return 0;
  } 
  result = (bool)mq::Calculate((char const *)arg1,*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PrettifyNumber(char * jarg1, unsigned int jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  int arg3 = (int) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (int)jarg3; 
  mq::PrettifyNumber(arg1,SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_LIGHT_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)mq::LIGHT_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GAMESTATE_PRECHARSELECT_get() {
  int jresult ;
  int result;
  
  result = (int)mq::GAMESTATE_PRECHARSELECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GAMESTATE_CHARSELECT_get() {
  int jresult ;
  int result;
  
  result = (int)mq::GAMESTATE_CHARSELECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GAMESTATE_CHARCREATE_get() {
  int jresult ;
  int result;
  
  result = (int)mq::GAMESTATE_CHARCREATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GAMESTATE_POSTCHARSELECT_get() {
  int jresult ;
  int result;
  
  result = (int)mq::GAMESTATE_POSTCHARSELECT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GAMESTATE_SOMETHING_get() {
  int jresult ;
  int result;
  
  result = (int)mq::GAMESTATE_SOMETHING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GAMESTATE_INGAME_get() {
  int jresult ;
  int result;
  
  result = (int)mq::GAMESTATE_INGAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GAMESTATE_LOGGINGIN_get() {
  int jresult ;
  int result;
  
  result = (int)mq::GAMESTATE_LOGGINGIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GAMESTATE_UNLOADING_get() {
  int jresult ;
  int result;
  
  result = (int)mq::GAMESTATE_UNLOADING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XKF_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XKF_CTRL_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XKF_LALT_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XKF_RALT_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveFindItemMenu() {
  mq::RemoveFindItemMenu();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WillFitInBank(void * jarg1) {
  unsigned int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  bool result;
  
  arg1 = (ItemClient *)jarg1; 
  result = (bool)mq::WillFitInBank(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WillFitInInventory(void * jarg1) {
  unsigned int jresult ;
  ItemClient *arg1 = (ItemClient *) 0 ;
  bool result;
  
  arg1 = (ItemClient *)jarg1; 
  result = (bool)mq::WillFitInInventory(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsAnonymized() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::IsAnonymized();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Anonymize(void * jarg1) {
  void * jresult ;
  CXStr *arg1 = 0 ;
  CXStr result;
  
  arg1 = (CXStr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CXStr const & is null", 0);
    return 0;
  } 
  result = mq::Anonymize((CXStr const &)*arg1);
  jresult = new CXStr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PluginAnonymize(void * jarg1) {
  void * jresult ;
  CXStr *arg1 = 0 ;
  CXStr *result = 0 ;
  
  arg1 = (CXStr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CXStr & is null", 0);
    return 0;
  } 
  result = (CXStr *) &mq::PluginAnonymize(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TokenTextParam_World_set(void * jarg1, unsigned int jarg2) {
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  bool arg2 ;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->World = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TokenTextParam_World_get(void * jarg1) {
  unsigned int jresult ;
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  bool result;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  result = (bool) ((arg1)->World);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TokenTextParam_StringID_set(void * jarg1, int jarg2) {
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  int arg2 ;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StringID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TokenTextParam_StringID_get(void * jarg1) {
  int jresult ;
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  int result;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  result = (int) ((arg1)->StringID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TokenTextParam_Color_set(void * jarg1, int jarg2) {
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  int arg2 ;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Color = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TokenTextParam_Color_get(void * jarg1) {
  int jresult ;
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  int result;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  result = (int) ((arg1)->Color);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TokenTextParam_Tokens_set(void * jarg1, void * jarg2) {
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  std::vector< std::string > *arg2 = (std::vector< std::string > *) 0 ;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2; 
  if (arg1) (arg1)->Tokens = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TokenTextParam_Tokens_get(void * jarg1) {
  void * jresult ;
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  result = (std::vector< std::string > *)& ((arg1)->Tokens);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TokenTextParam(void * jarg1) {
  mq::TokenTextParam *arg1 = (mq::TokenTextParam *) 0 ;
  
  arg1 = (mq::TokenTextParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AddTokenMessageCmd(int jarg1, void * jarg2) {
  int jresult ;
  int arg1 ;
  fMQTokenMessageCmd arg2 ;
  fMQTokenMessageCmd *argp2 ;
  int result;
  
  arg1 = (int)jarg1; 
  argp2 = (fMQTokenMessageCmd *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null fMQTokenMessageCmd", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)mq::AddTokenMessageCmd(arg1,SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveTokenMessageCmd(int jarg1, int jarg2) {
  int arg1 ;
  int arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  mq::RemoveTokenMessageCmd(arg1,arg2);
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_GetMoneyFromString(char * jarg1, int jarg2) {
  unsigned long long jresult ;
  char *arg1 = (char *) 0 ;
  mq::GetMoneyFromStringFormat arg2 = (mq::GetMoneyFromStringFormat) mq::GetMoneyFromStringFormat::Long ;
  uint64_t result;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::GetMoneyFromStringFormat)jarg2; 
  result = (uint64_t)mq::GetMoneyFromString((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FormatMoneyString(char * jarg1, unsigned int jarg2, unsigned long long jarg3, int jarg4) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  uint64_t arg3 ;
  mq::GetMoneyFromStringFormat arg4 = (mq::GetMoneyFromStringFormat) mq::GetMoneyFromStringFormat::Long ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (uint64_t)jarg3; 
  arg4 = (mq::GetMoneyFromStringFormat)jarg4; 
  mq::FormatMoneyString(arg1,SWIG_STD_MOVE(arg2),arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMembershipLevel() {
  void * jresult ;
  MembershipLevel result;
  
  result = mq::GetMembershipLevel();
  jresult = new MembershipLevel(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetSubscriptionLevel() {
  int jresult ;
  int result;
  
  result = (int)mq::GetSubscriptionLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetError(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SetError(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperWho(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SuperWho(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewIf(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::NewIf(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WhileCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::WhileCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Call(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Call(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_For(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::For(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Goto(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Goto(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeepKeys(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::KeepKeys(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Macro(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Macro(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MacroPause(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MacroPause(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Next(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Next(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Return(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Return(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Break(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Break(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Continue(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Continue(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ListMacros(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::ListMacros(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SquelchCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SquelchCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MacroLog(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MacroLog(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MacroBeep(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MacroBeep(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NoParseCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::NoParseCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NoModKeyCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::NoModKeyCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Where(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Where(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HudCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::HudCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DropCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DropCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CombineCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::CombineCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClearErrorsCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::ClearErrorsCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoTimedCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoTimedCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoShiftCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoShiftCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoCtrlCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoCtrlCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoAltCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoAltCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoCommandCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoCommandCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DumpBindsCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DumpBindsCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadCfgCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::LoadCfgCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_do_ranged(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::do_ranged(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoMappable(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoMappable(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQ2KeyBindCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MQ2KeyBindCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultilineCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MultilineCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Alert(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Alert(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Alias(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Alias(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AltAbility(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::AltAbility(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BankList(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::BankList(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BuyItem(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::BuyItem(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SelectItem(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SelectItem(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharInfo(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::CharInfo(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cast(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Cast(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Cleanup(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Cleanup(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Click(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Click(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugSpewFile(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DebugSpewFile(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Delay(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Delay(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQDestroyHeldItemOrMoney(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::EQDestroyHeldItemOrMoney(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DisplayLoginName(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DisplayLoginName(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoAbility(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoAbility(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoEvents(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoEvents(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoSocial(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoSocial(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Doors(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Doors(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoorTarget(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoorTarget(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Exec(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Exec(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Face(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Face(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Filter(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Filter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Help(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Help(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Identify(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Identify(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IniOutput(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::IniOutput(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Items(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Items(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemTarget(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::ItemTarget(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_WindowState(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::WindowState(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadSpells(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::LoadSpells(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Location(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Location(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Look(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Look(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LootAll(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::LootAll(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MemSpell(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MemSpell(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MouseTo(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MouseTo(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQMsgBox(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MQMsgBox(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SellItem(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SellItem(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAutoRun(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SetAutoRun(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Skills(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Skills(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Substitute(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Substitute(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SuperWhoTarget(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SuperWhoTarget(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SWhoFilter(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SWhoFilter(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Target(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Target(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Unload(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::Unload(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupText(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::PopupText(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupTextCustom(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::PopupTextCustom(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopupTextEcho(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::PopupTextEcho(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UseItemCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::UseItemCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoHotButton(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::DoHotButton(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TaskQuitCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::TaskQuitCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellSlotInfo(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SpellSlotInfo(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWinTitle(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SetWinTitle(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetWinTitle(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::GetWinTitle(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::PetCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercSwitchCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MercSwitchCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickZoneCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::PickZoneCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AssistCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::AssistCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InvokeCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::InvokeCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetProcessPriority(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::SetProcessPriority(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenModeCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::ScreenModeCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_UserCameraCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::UserCameraCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForeGroundCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::ForeGroundCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_QuitCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::QuitCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveLevCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::RemoveLevCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EngineCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::EngineCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedBuffsCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::CachedBuffsCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQCopyLayout(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MQCopyLayout(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ListModulesCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::ListModulesCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ListProcessesCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::ListProcessesCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_InsertAugCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::InsertAugCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveAugCmd(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::RemoveAugCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExecuteLinkCommand(void * jarg1, char * jarg2) {
  PSPAWNINFO arg1 = (PSPAWNINFO) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (PSPAWNINFO)jarg1; 
  arg2 = (char *)jarg2; 
  mq::ExecuteLinkCommand(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveBuff(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::RemoveBuff(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemovePetBuff(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::RemovePetBuff(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MakeMeVisible(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::MakeMeVisible(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RemoveAura(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::RemoveAura(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewDeclareVar(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::NewDeclareVar(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewDeleteVarCmd(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::NewDeleteVarCmd(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewVarset(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::NewVarset(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewVarcalc(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::NewVarcalc(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewVardata(void * jarg1, char * jarg2) {
  SPAWNINFO *arg1 = (SPAWNINFO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (SPAWNINFO *)jarg1; 
  arg2 = (char *)jarg2; 
  mq::NewVardata(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CaseInsensitiveLess() {
  void * jresult ;
  CaseInsensitiveLess *result = 0 ;
  
  result = (CaseInsensitiveLess *)new CaseInsensitiveLess();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CaseInsensitiveLess(void * jarg1) {
  CaseInsensitiveLess *arg1 = (CaseInsensitiveLess *) 0 ;
  
  arg1 = (CaseInsensitiveLess *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HAS_CHAT_TIMESTAMPS_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_DegToRad_get() {
  double jresult ;
  double result;
  
  result = (double)(double)mq::DegToRad;
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_PI_get() {
  double jresult ;
  double result;
  
  result = (double)(double)mq::PI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_baseAddress_set(unsigned int jarg1) {
  uintptr_t arg1 ;
  
  arg1 = (uintptr_t)jarg1; 
  mq::baseAddress = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_baseAddress_get() {
  unsigned int jresult ;
  uintptr_t result;
  
  result = (uintptr_t)mq::baseAddress;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmWriteChatColor_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmWriteChatColor = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmWriteChatColor_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmWriteChatColor;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmPluginsIncomingChat_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmPluginsIncomingChat = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmPluginsIncomingChat_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmPluginsIncomingChat;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmPluginsPulse_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmPluginsPulse = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmPluginsPulse_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmPluginsPulse;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmPluginsOnZoned_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmPluginsOnZoned = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmPluginsOnZoned_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmPluginsOnZoned;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmPluginsCleanUI_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmPluginsCleanUI = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmPluginsCleanUI_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmPluginsCleanUI;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmPluginsReloadUI_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmPluginsReloadUI = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmPluginsReloadUI_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmPluginsReloadUI;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmPluginsDrawHUD_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmPluginsDrawHUD = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmPluginsDrawHUD_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmPluginsDrawHUD;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmPluginsSetGameState_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmPluginsSetGameState = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmPluginsSetGameState_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmPluginsSetGameState;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmUpdateSpawnSort_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmUpdateSpawnSort = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmUpdateSpawnSort_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmUpdateSpawnSort;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmUpdateSpawnCaptions_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmUpdateSpawnCaptions = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmUpdateSpawnCaptions_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmUpdateSpawnCaptions;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmCalculate_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmCalculate = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmCalculate_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmCalculate;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmBeginZone_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmBeginZone = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmBeginZone_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmBeginZone;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmEndZone_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmEndZone = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmEndZone_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmEndZone;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmRenderScene_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmRenderScene = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmRenderScene_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmRenderScene;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmSpellLoad_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmSpellLoad = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmSpellLoad_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmSpellLoad;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmSpellAccess_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmSpellAccess = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmSpellAccess_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmSpellAccess;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bmAnonymizer_set(unsigned int jarg1) {
  uint32_t arg1 ;
  
  arg1 = (uint32_t)jarg1; 
  mq::bmAnonymizer = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bmAnonymizer_get() {
  unsigned int jresult ;
  uint32_t result;
  
  result = (uint32_t)mq::bmAnonymizer;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pGlobalVariables_set(void * jarg1) {
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  mq::pGlobalVariables = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pGlobalVariables_get() {
  void * jresult ;
  mq::MQDataVar *result = 0 ;
  
  result = (mq::MQDataVar *)mq::pGlobalVariables;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pMacroVariables_set(void * jarg1) {
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  mq::pMacroVariables = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pMacroVariables_get() {
  void * jresult ;
  mq::MQDataVar *result = 0 ;
  
  result = (mq::MQDataVar *)mq::pMacroVariables;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bAllErrorsFatal_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::bAllErrorsFatal = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bAllErrorsFatal_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::bAllErrorsFatal;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bAllErrorsDumpStack_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::bAllErrorsDumpStack = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bAllErrorsDumpStack_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::bAllErrorsDumpStack;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bAllErrorsLog_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::bAllErrorsLog = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bAllErrorsLog_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::bAllErrorsLog;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszVersion_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszVersion, (const char *)arg1, 32-1);
      mq::gszVersion[32-1] = 0;
    } else {
      mq::gszVersion[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszVersion_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszVersion;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszTime_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszTime, (const char *)arg1, 32-1);
      mq::gszTime[32-1] = 0;
    } else {
      mq::gszTime[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszTime_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszTime;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gBuild_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gBuild = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gBuild_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gBuild;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PVPServer_set(void * jarg1) {
  ePVPServer arg1 ;
  ePVPServer *argp1 ;
  
  argp1 = (ePVPServer *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ePVPServer", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::PVPServer = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PVPServer_get() {
  void * jresult ;
  ePVPServer result;
  
  result = mq::PVPServer;
  jresult = new ePVPServer(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ghInitializeSpellDbThread_set(void * jarg1) {
  HANDLE arg1 = (HANDLE) 0 ;
  
  arg1 = (HANDLE)jarg1; 
  mq::ghInitializeSpellDbThread = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ghInitializeSpellDbThread_get() {
  void * jresult ;
  HANDLE result;
  
  result = (HANDLE)mq::ghInitializeSpellDbThread;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_g_Loaded_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::g_Loaded = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_g_Loaded_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::g_Loaded;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ThreadID_set(unsigned int jarg1) {
  DWORD arg1 ;
  
  arg1 = (DWORD)jarg1; 
  mq::ThreadID = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ThreadID_get() {
  unsigned int jresult ;
  DWORD result;
  
  result = (DWORD)mq::ThreadID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gStringTableFixed_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gStringTableFixed = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gStringTableFixed_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gStringTableFixed;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbWriteAllConfig_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbWriteAllConfig = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbWriteAllConfig_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbWriteAllConfig;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gAnonymize_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gAnonymize = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gAnonymize_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gAnonymize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ghModule_set(void * jarg1) {
  HMODULE arg1 ;
  HMODULE *argp1 ;
  
  argp1 = (HMODULE *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HMODULE", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::ghModule = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ghModule_get() {
  void * jresult ;
  HMODULE result;
  
  result = mq::ghModule;
  jresult = new HMODULE(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ghInstance_set(void * jarg1) {
  HINSTANCE arg1 ;
  HINSTANCE *argp1 ;
  
  argp1 = (HINSTANCE *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HINSTANCE", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::ghInstance = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ghInstance_get() {
  void * jresult ;
  HINSTANCE result;
  
  result = mq::ghInstance;
  jresult = new HINSTANCE(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ghInjectorWnd_set(void * jarg1) {
  HWND arg1 ;
  HWND *argp1 ;
  
  argp1 = (HWND *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::ghInjectorWnd = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ghInjectorWnd_get() {
  void * jresult ;
  HWND result;
  
  result = mq::ghInjectorWnd;
  jresult = new HWND(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbUnload_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbUnload = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbUnload_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbUnload;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbForceUnload_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbForceUnload = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbForceUnload_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbForceUnload;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gBindInProgress_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gBindInProgress = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gBindInProgress_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gBindInProgress;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbLoad_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbLoad = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbLoad_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbLoad;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpHook_set(unsigned int jarg1) {
  DWORD arg1 ;
  
  arg1 = (DWORD)jarg1; 
  mq::gpHook = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gpHook_get() {
  unsigned int jresult ;
  DWORD result;
  
  result = (DWORD)mq::gpHook;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gMacroBlock_set(void * jarg1) {
  MQMacroBlockPtr arg1 ;
  MQMacroBlockPtr *argp1 ;
  
  argp1 = (MQMacroBlockPtr *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MQMacroBlockPtr", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::gMacroBlock = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gMacroBlock_get() {
  void * jresult ;
  MQMacroBlockPtr result;
  
  result = mq::gMacroBlock;
  jresult = new MQMacroBlockPtr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BlockIndex_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::BlockIndex = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BlockIndex_get() {
  int jresult ;
  int result;
  
  result = (int)mq::BlockIndex;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gMacroStack_set(void * jarg1) {
  MQMacroStack *arg1 = (MQMacroStack *) 0 ;
  
  arg1 = (MQMacroStack *)jarg1; 
  mq::gMacroStack = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gMacroStack_get() {
  void * jresult ;
  MQMacroStack *result = 0 ;
  
  result = (MQMacroStack *)mq::gMacroStack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gMacroSubLookupMap_set(void * jarg1) {
  std::map< std::string,int,CaseInsensitiveLess > *arg1 = (std::map< std::string,int,CaseInsensitiveLess > *) 0 ;
  
  arg1 = (std::map< std::string,int,CaseInsensitiveLess > *)jarg1; 
  mq::gMacroSubLookupMap = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gMacroSubLookupMap_get() {
  void * jresult ;
  std::map< std::string,int,CaseInsensitiveLess > *result = 0 ;
  
  result = (std::map< std::string,int,CaseInsensitiveLess > *)&mq::gMacroSubLookupMap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gUndeclaredVars_set(void * jarg1) {
  std::map< std::string,int,std::less< std::string > > *arg1 = (std::map< std::string,int,std::less< std::string > > *) 0 ;
  
  arg1 = (std::map< std::string,int,std::less< std::string > > *)jarg1; 
  mq::gUndeclaredVars = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gUndeclaredVars_get() {
  void * jresult ;
  std::map< std::string,int,std::less< std::string > > *result = 0 ;
  
  result = (std::map< std::string,int,std::less< std::string > > *)&mq::gUndeclaredVars;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gEventQueue_set(void * jarg1) {
  MQEventQueue *arg1 = (MQEventQueue *) 0 ;
  
  arg1 = (MQEventQueue *)jarg1; 
  mq::gEventQueue = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gEventQueue_get() {
  void * jresult ;
  MQEventQueue *result = 0 ;
  
  result = (MQEventQueue *)mq::gEventQueue;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gEventFunc_set(void * jarg1) {
  int *arg1 = (int *) (int *)0 ;
  
  arg1 = (int *)jarg1; 
  {
    size_t ii;
    int *b = (int *) mq::gEventFunc;
    for (ii = 0; ii < (size_t)NUM_EVENTS; ii++) b[ii] = *((int *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gEventFunc_get() {
  void * jresult ;
  int *result = 0 ;
  
  result = (int *)(int *)mq::gEventFunc;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gLastFind_set(unsigned char jarg1) {
  UCHAR arg1 ;
  
  arg1 = (UCHAR)jarg1; 
  mq::gLastFind = arg1;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_gLastFind_get() {
  unsigned char jresult ;
  UCHAR result;
  
  result = (UCHAR)mq::gLastFind;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gZFilter_set(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  mq::gZFilter = arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_gZFilter_get() {
  double jresult ;
  double result;
  
  result = (double)mq::gZFilter;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFaceAngle_set(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  mq::gFaceAngle = arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_gFaceAngle_get() {
  double jresult ;
  double result;
  
  result = (double)mq::gFaceAngle;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gLookAngle_set(double jarg1) {
  double arg1 ;
  
  arg1 = (double)jarg1; 
  mq::gLookAngle = arg1;
}


SWIGEXPORT double SWIGSTDCALL CSharp_gLookAngle_get() {
  double jresult ;
  double result;
  
  result = (double)mq::gLookAngle;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbSpelldbLoaded_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbSpelldbLoaded = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbSpelldbLoaded_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbSpelldbLoaded;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszEQPath_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszEQPath, (const char *)arg1, MAX_STRING-1);
      mq::gszEQPath[MAX_STRING-1] = 0;
    } else {
      mq::gszEQPath[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszEQPath_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszEQPath;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszMacroPath_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszMacroPath, (const char *)arg1, MAX_STRING-1);
      mq::gszMacroPath[MAX_STRING-1] = 0;
    } else {
      mq::gszMacroPath[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszMacroPath_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszMacroPath;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszLogPath_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszLogPath, (const char *)arg1, MAX_STRING-1);
      mq::gszLogPath[MAX_STRING-1] = 0;
    } else {
      mq::gszLogPath[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszLogPath_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszLogPath;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszINIPath_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszINIPath, (const char *)arg1, MAX_STRING-1);
      mq::gszINIPath[MAX_STRING-1] = 0;
    } else {
      mq::gszINIPath[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszINIPath_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszINIPath;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszINIFilename_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszINIFilename, (const char *)arg1, MAX_STRING-1);
      mq::gszINIFilename[MAX_STRING-1] = 0;
    } else {
      mq::gszINIFilename[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszINIFilename_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszINIFilename;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszItemDB_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszItemDB, (const char *)arg1, MAX_STRING-1);
      mq::gszItemDB[MAX_STRING-1] = 0;
    } else {
      mq::gszItemDB[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszItemDB_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszItemDB;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszMacroName_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszMacroName, (const char *)arg1, MAX_STRING-1);
      mq::gszMacroName[MAX_STRING-1] = 0;
    } else {
      mq::gszMacroName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszMacroName_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszMacroName;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_szLastCommand_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::szLastCommand, (const char *)arg1, MAX_STRING-1);
      mq::szLastCommand[MAX_STRING-1] = 0;
    } else {
      mq::szLastCommand[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_szLastCommand_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::szLastCommand;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gUISkin_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gUISkin, (const char *)arg1, MAX_PATH-1);
      mq::gUISkin[MAX_PATH-1] = 0;
    } else {
      mq::gUISkin[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gUISkin_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gUISkin;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathMQRoot_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathMQRoot, (const char *)arg1, MAX_PATH-1);
      mq::gPathMQRoot[MAX_PATH-1] = 0;
    } else {
      mq::gPathMQRoot[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathMQRoot_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathMQRoot;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathConfig_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathConfig, (const char *)arg1, MAX_PATH-1);
      mq::gPathConfig[MAX_PATH-1] = 0;
    } else {
      mq::gPathConfig[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathConfig_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathConfig;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathMQini_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathMQini, (const char *)arg1, MAX_PATH-1);
      mq::gPathMQini[MAX_PATH-1] = 0;
    } else {
      mq::gPathMQini[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathMQini_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathMQini;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathMacros_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathMacros, (const char *)arg1, MAX_PATH-1);
      mq::gPathMacros[MAX_PATH-1] = 0;
    } else {
      mq::gPathMacros[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathMacros_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathMacros;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathLogs_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathLogs, (const char *)arg1, MAX_PATH-1);
      mq::gPathLogs[MAX_PATH-1] = 0;
    } else {
      mq::gPathLogs[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathLogs_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathLogs;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathCrashDumps_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathCrashDumps, (const char *)arg1, MAX_PATH-1);
      mq::gPathCrashDumps[MAX_PATH-1] = 0;
    } else {
      mq::gPathCrashDumps[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathCrashDumps_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathCrashDumps;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathPlugins_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathPlugins, (const char *)arg1, MAX_PATH-1);
      mq::gPathPlugins[MAX_PATH-1] = 0;
    } else {
      mq::gPathPlugins[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathPlugins_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathPlugins;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathResources_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathResources, (const char *)arg1, MAX_PATH-1);
      mq::gPathResources[MAX_PATH-1] = 0;
    } else {
      mq::gPathResources[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathResources_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathResources;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gPathEverQuest_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gPathEverQuest, (const char *)arg1, MAX_PATH-1);
      mq::gPathEverQuest[MAX_PATH-1] = 0;
    } else {
      mq::gPathEverQuest[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gPathEverQuest_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gPathEverQuest;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszLastNormalError_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszLastNormalError, (const char *)arg1, MAX_STRING-1);
      mq::gszLastNormalError[MAX_STRING-1] = 0;
    } else {
      mq::gszLastNormalError[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszLastNormalError_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszLastNormalError;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszLastSyntaxError_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszLastSyntaxError, (const char *)arg1, MAX_STRING-1);
      mq::gszLastSyntaxError[MAX_STRING-1] = 0;
    } else {
      mq::gszLastSyntaxError[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszLastSyntaxError_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszLastSyntaxError;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gszLastMQ2DataError_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gszLastMQ2DataError, (const char *)arg1, MAX_STRING-1);
      mq::gszLastMQ2DataError[MAX_STRING-1] = 0;
    } else {
      mq::gszLastMQ2DataError[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gszLastMQ2DataError_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gszLastMQ2DataError;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DrawHUDParams_set(void * jarg1) {
  uintptr_t *arg1 = (uintptr_t *) (uintptr_t *)0 ;
  
  arg1 = (uintptr_t *)jarg1; 
  {
    size_t ii;
    uintptr_t *b = (uintptr_t *) mq::DrawHUDParams;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uintptr_t *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DrawHUDParams_get() {
  void * jresult ;
  uintptr_t *result = 0 ;
  
  result = (uintptr_t *)(uintptr_t *)mq::DrawHUDParams;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gEventChat_set(unsigned int jarg1) {
  DWORD arg1 ;
  
  arg1 = (DWORD)jarg1; 
  mq::gEventChat = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gEventChat_get() {
  unsigned int jresult ;
  DWORD result;
  
  result = (DWORD)mq::gEventChat;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gRunning_set(unsigned long long jarg1) {
  uint64_t arg1 ;
  
  arg1 = (uint64_t)jarg1; 
  mq::gRunning = arg1;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_gRunning_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)mq::gRunning;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbMoving_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbMoving = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbMoving_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbMoving;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gMaxTurbo_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gMaxTurbo = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gMaxTurbo_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gMaxTurbo;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gTurboLimit_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gTurboLimit = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gTurboLimit_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gTurboLimit;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gReturn_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gReturn = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gReturn_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gReturn;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gTargetbuffs_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gTargetbuffs = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gTargetbuffs_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gTargetbuffs;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gItemsReceived_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gItemsReceived = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gItemsReceived_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gItemsReceived;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbInZone_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbInZone = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbInZone_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbInZone;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gZoning_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gZoning = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gZoning_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gZoning;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OldLastEnteredZone_set(unsigned long long jarg1) {
  uint64_t arg1 ;
  
  arg1 = (uint64_t)jarg1; 
  mq::OldLastEnteredZone = arg1;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_OldLastEnteredZone_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)mq::OldLastEnteredZone;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LastEnteredZone_set(unsigned long long jarg1) {
  uint64_t arg1 ;
  
  arg1 = (uint64_t)jarg1; 
  mq::LastEnteredZone = arg1;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_LastEnteredZone_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)mq::LastEnteredZone;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WereWeZoning_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::WereWeZoning = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WereWeZoning_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::WereWeZoning;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbInChat_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbInChat = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbInChat_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbInChat;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterSkillsAll_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterSkillsAll = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterSkillsAll_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterSkillsAll;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterSkillsIncrease_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterSkillsIncrease = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterSkillsIncrease_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterSkillsIncrease;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterTarget_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterTarget = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterTarget_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterTarget;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterDebug_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterDebug = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterDebug_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterDebug;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterMoney_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterMoney = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterMoney_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterMoney;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterFood_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterFood = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterFood_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterFood;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterMQ_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterMQ = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterMQ_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterMQ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterMacro_set(int jarg1) {
  eFilterMacro arg1 ;
  
  arg1 = (eFilterMacro)jarg1; 
  mq::gFilterMacro = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gFilterMacro_get() {
  int jresult ;
  eFilterMacro result;
  
  result = (eFilterMacro)mq::gFilterMacro;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterEncumber_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterEncumber = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterEncumber_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterEncumber;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterCustom_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterCustom = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterCustom_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterCustom;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterMQ2DataErrors_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gFilterMQ2DataErrors = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gFilterMQ2DataErrors_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gFilterMQ2DataErrors;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gSpewToFile_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gSpewToFile = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gSpewToFile_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gSpewToFile;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbDoAutoRun_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbDoAutoRun = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbDoAutoRun_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbDoAutoRun;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gMQPauseOnChat_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gMQPauseOnChat = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gMQPauseOnChat_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gMQPauseOnChat;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gKeepKeys_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gKeepKeys = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gKeepKeys_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gKeepKeys;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gLClickedObject_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gLClickedObject = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gLClickedObject_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gLClickedObject;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gFilterSWho_set(void * jarg1) {
  MQWhoFilter arg1 ;
  MQWhoFilter *argp1 ;
  
  argp1 = (MQWhoFilter *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null MQWhoFilter", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::gFilterSWho = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gFilterSWho_get() {
  void * jresult ;
  MQWhoFilter result;
  
  result = mq::gFilterSWho;
  jresult = new MQWhoFilter(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gCreateMQ2NewsWindow_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gCreateMQ2NewsWindow = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gCreateMQ2NewsWindow_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gCreateMQ2NewsWindow;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gUseNewNamedTest_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gUseNewNamedTest = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gUseNewNamedTest_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gUseNewNamedTest;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbInForeground_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbInForeground = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbInForeground_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbInForeground;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbHUDUnderUI_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbHUDUnderUI = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbHUDUnderUI_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbHUDUnderUI;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbAlwaysDrawMQHUD_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbAlwaysDrawMQHUD = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbAlwaysDrawMQHUD_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbAlwaysDrawMQHUD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gIfDelimiter_set(char jarg1) {
  char arg1 ;
  
  arg1 = (char)jarg1; 
  mq::gIfDelimiter = arg1;
}


SWIGEXPORT char SWIGSTDCALL CSharp_gIfDelimiter_get() {
  char jresult ;
  char result;
  
  result = (char)mq::gIfDelimiter;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gIfAltDelimiter_set(char jarg1) {
  char arg1 ;
  
  arg1 = (char)jarg1; 
  mq::gIfAltDelimiter = arg1;
}


SWIGEXPORT char SWIGSTDCALL CSharp_gIfAltDelimiter_get() {
  char jresult ;
  char result;
  
  result = (char)mq::gIfAltDelimiter;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gNetStatusXPos_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gNetStatusXPos = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gNetStatusXPos_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gNetStatusXPos;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gNetStatusYPos_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gNetStatusYPos = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gNetStatusYPos_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gNetStatusYPos;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gStackingDebug_set(int jarg1) {
  mq::eStackingDebug arg1 ;
  
  arg1 = (mq::eStackingDebug)jarg1; 
  mq::gStackingDebug = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gStackingDebug_get() {
  int jresult ;
  mq::eStackingDebug result;
  
  result = (mq::eStackingDebug)mq::gStackingDebug;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbAssistComplete_set(int jarg1) {
  mq::eAssistStage arg1 ;
  
  arg1 = (mq::eAssistStage)jarg1; 
  mq::gbAssistComplete = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gbAssistComplete_get() {
  int jresult ;
  mq::eAssistStage result;
  
  result = (mq::eAssistStage)mq::gbAssistComplete;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EventMsg_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::EventMsg, (const char *)arg1, MAX_STRING-1);
      mq::EventMsg[MAX_STRING-1] = 0;
    } else {
      mq::EventMsg[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EventMsg_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::EventMsg;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pEventBlech_set(void * jarg1) {
  Blech *arg1 = (Blech *) 0 ;
  
  arg1 = (Blech *)jarg1; 
  mq::pEventBlech = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pEventBlech_get() {
  void * jresult ;
  Blech *result = 0 ;
  
  result = (Blech *)mq::pEventBlech;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pEventList_set(void * jarg1) {
  MQEventList *arg1 = (MQEventList *) 0 ;
  
  arg1 = (MQEventList *)jarg1; 
  mq::pEventList = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pEventList_get() {
  void * jresult ;
  MQEventList *result = 0 ;
  
  result = (MQEventList *)mq::pEventList;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gTimer_set(void * jarg1) {
  MQTimer *arg1 = (MQTimer *) 0 ;
  
  arg1 = (MQTimer *)jarg1; 
  mq::gTimer = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gTimer_get() {
  void * jresult ;
  MQTimer *result = 0 ;
  
  result = (MQTimer *)mq::gTimer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gDelay_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gDelay = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gDelay_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gDelay;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gDelayCondition_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)mq::gDelayCondition, (const char *)arg1, MAX_STRING-1);
      mq::gDelayCondition[MAX_STRING-1] = 0;
    } else {
      mq::gDelayCondition[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gDelayCondition_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)mq::gDelayCondition;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EnviroTarget_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::EnviroTarget = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EnviroTarget_get() {
  int jresult ;
  int result;
  
  result = (int)mq::EnviroTarget;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetSpawn_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::PetSpawn = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PetSpawn_get() {
  int jresult ;
  int result;
  
  result = (int)mq::PetSpawn;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenarySpawn_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::MercenarySpawn = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenarySpawn_get() {
  int jresult ;
  int result;
  
  result = (int)mq::MercenarySpawn;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DoorEnviroTarget_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::DoorEnviroTarget = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DoorEnviroTarget_get() {
  int jresult ;
  int result;
  
  result = (int)mq::DoorEnviroTarget;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pDoorTarget_set(void * jarg1) {
  EQSwitch *arg1 = (EQSwitch *) 0 ;
  
  arg1 = (EQSwitch *)jarg1; 
  mq::pDoorTarget = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pDoorTarget_get() {
  void * jresult ;
  EQSwitch *result = 0 ;
  
  result = (EQSwitch *)mq::pDoorTarget;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pSwitchTarget_set(void * jarg1) {
  EQSwitch *arg1 = (EQSwitch *) 0 ;
  
  arg1 = (EQSwitch *)jarg1; 
  mq::pSwitchTarget = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pSwitchTarget_get() {
  void * jresult ;
  EQSwitch *result = 0 ;
  
  result = (EQSwitch *)mq::pSwitchTarget;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gItemDB_set(void * jarg1) {
  ITEMDB *arg1 = (ITEMDB *) 0 ;
  
  arg1 = (ITEMDB *)jarg1; 
  mq::gItemDB = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gItemDB_get() {
  void * jresult ;
  ITEMDB *result = 0 ;
  
  result = (ITEMDB *)mq::gItemDB;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bRunNextCommand_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::bRunNextCommand = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bRunNextCommand_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::bRunNextCommand;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_bAllowCommandParse_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::bAllowCommandParse = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_bAllowCommandParse_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::bAllowCommandParse;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gTurbo_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gTurbo = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gTurbo_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gTurbo;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gWarning_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gWarning = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gWarning_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gWarning;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pDefines_set(void * jarg1) {
  MQDefine *arg1 = (MQDefine *) 0 ;
  
  arg1 = (MQDefine *)jarg1; 
  mq::pDefines = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pDefines_get() {
  void * jresult ;
  MQDefine *result = 0 ;
  
  result = (MQDefine *)mq::pDefines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pBindList_set(void * jarg1) {
  MQBindList *arg1 = (MQBindList *) 0 ;
  
  arg1 = (MQBindList *)jarg1; 
  mq::pBindList = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pBindList_get() {
  void * jresult ;
  MQBindList *result = 0 ;
  
  result = (MQBindList *)mq::pBindList;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gpFilters_set(void * jarg1) {
  MQFilter *arg1 = (MQFilter *) 0 ;
  
  arg1 = (MQFilter *)jarg1; 
  mq::gpFilters = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gpFilters_get() {
  void * jresult ;
  MQFilter *result = 0 ;
  
  result = (MQFilter *)mq::gpFilters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSlotMap_set(void * jarg1) {
  std::map< std::string,uint32_t,std::less< std::string > > *arg1 = (std::map< std::string,uint32_t,std::less< std::string > > *) 0 ;
  
  arg1 = (std::map< std::string,uint32_t,std::less< std::string > > *)jarg1; 
  mq::ItemSlotMap = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSlotMap_get() {
  void * jresult ;
  std::map< std::string,uint32_t,std::less< std::string > > *result = 0 ;
  
  result = (std::map< std::string,uint32_t,std::less< std::string > > *)&mq::ItemSlotMap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gGameState_set(unsigned int jarg1) {
  DWORD arg1 ;
  
  arg1 = (DWORD)jarg1; 
  mq::gGameState = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gGameState_get() {
  unsigned int jresult ;
  DWORD result;
  
  result = (DWORD)mq::gGameState;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbMQ2LoadingMsg_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbMQ2LoadingMsg = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbMQ2LoadingMsg_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbMQ2LoadingMsg;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbExactSearchCleanNames_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbExactSearchCleanNames = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbExactSearchCleanNames_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbExactSearchCleanNames;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gMouseClickInProgress_set(void * jarg1) {
  bool *arg1 = (bool *) (bool *)0 ;
  
  arg1 = (bool *)jarg1; 
  {
    size_t ii;
    bool *b = (bool *) mq::gMouseClickInProgress;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((bool *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gMouseClickInProgress_get() {
  void * jresult ;
  bool *result = 0 ;
  
  result = (bool *)(bool *)mq::gMouseClickInProgress;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_szEQMappableCommands_set(void * jarg1) {
  char **arg1 = (char **) (char **)0 ;
  
  arg1 = (char **)jarg1; 
  {
    size_t ii;
    char const * *b = (char const * *) mq::szEQMappableCommands;
    for (ii = 0; ii < (size_t)eqlib::nEQMappableCommands; ii++) b[ii] = *((char const * *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szEQMappableCommands_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szEQMappableCommands;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szHeading_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szHeading;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szHeadingShort_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szHeadingShort;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szHeadingNormal_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szHeadingNormal;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szHeadingNormalShort_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szHeadingNormalShort;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szSize_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szSize;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szSpawnType_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szSpawnType;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szGuildStatus_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szGuildStatus;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szGender_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szGender;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szDeityTeam_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szDeityTeam;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szLights_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szLights;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LightBrightness_get() {
  void * jresult ;
  BYTE *result = 0 ;
  
  result = (BYTE *)(BYTE *)mq::LightBrightness;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szSkills_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szSkills;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szInnates_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szInnates;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szZoneExpansionName_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szZoneExpansionName;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetZoneExpansionName(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)mq::GetZoneExpansionName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetHighestExpansionOwnedName(int jarg1) {
  char * jresult ;
  EQExpansionOwned arg1 ;
  char *result = 0 ;
  
  arg1 = (EQExpansionOwned)jarg1; 
  result = (char *)mq::GetHighestExpansionOwnedName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetExpansionNumber(void * jarg1) {
  unsigned int jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  uint32_t result;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (uint32_t)mq::GetExpansionNumber(SWIG_STD_MOVE(arg1));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_get_melee_range_set(void * jarg1) {
  fEQGetMelee arg1 ;
  fEQGetMelee *argp1 ;
  
  argp1 = (fEQGetMelee *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null fEQGetMelee", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::get_melee_range = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_get_melee_range_get() {
  void * jresult ;
  fEQGetMelee result;
  
  result = mq::get_melee_range;
  jresult = new fEQGetMelee(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQW_GetDisplayWindow_set(void * jarg1) {
  fEQW_GetDisplayWindow arg1 ;
  fEQW_GetDisplayWindow *argp1 ;
  
  argp1 = (fEQW_GetDisplayWindow *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null fEQW_GetDisplayWindow", 0);
    return ;
  }
  arg1 = *argp1; 
  mq::EQW_GetDisplayWindow = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQW_GetDisplayWindow_get() {
  void * jresult ;
  fEQW_GetDisplayWindow result;
  
  result = mq::EQW_GetDisplayWindow;
  jresult = new fEQW_GetDisplayWindow(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExecuteCmd(unsigned int jarg1, unsigned int jarg2, void * jarg3) {
  unsigned int jresult ;
  unsigned int arg1 ;
  bool arg2 = (bool) false ;
  void *arg3 = (void *) nullptr ;
  bool result;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (void *)jarg3; 
  result = (bool)mq::ExecuteCmd(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szDmgBonusType_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szDmgBonusType;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szBodyType_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szBodyType;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szAugRestrictions_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szAugRestrictions;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_szItemSlot_set(void * jarg1) {
  char **arg1 = (char **) (char **)0 ;
  
  arg1 = (char **)jarg1; 
  {
    size_t ii;
    char const * *b = (char const * *) mq::szItemSlot;
    for (ii = 0; ii < (size_t)eqlib::InvSlot_Max+1; ii++) b[ii] = *((char const * *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szItemSlot_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szItemSlot;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_szEquipmentSlot_get() {
  void * jresult ;
  char **result = 0 ;
  
  result = (char **)(char **)mq::szEquipmentSlot;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VariableMap_set(void * jarg1) {
  std::map< std::string,mq::MQDataVar *,std::less< std::string > > *arg1 = (std::map< std::string,mq::MQDataVar *,std::less< std::string > > *) 0 ;
  
  arg1 = (std::map< std::string,mq::MQDataVar *,std::less< std::string > > *)jarg1; 
  mq::VariableMap = *arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VariableMap_get() {
  void * jresult ;
  std::map< std::string,mq::MQDataVar *,std::less< std::string > > *result = 0 ;
  
  result = (std::map< std::string,mq::MQDataVar *,std::less< std::string > > *)&mq::VariableMap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pPlugins_set(void * jarg1) {
  mq::MQPlugin *arg1 = (mq::MQPlugin *) 0 ;
  
  arg1 = (mq::MQPlugin *)jarg1; 
  mq::pPlugins = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pPlugins_get() {
  void * jresult ;
  mq::MQPlugin *result = 0 ;
  
  result = (mq::MQPlugin *)mq::pPlugins;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQP_DistArray_set(void * jarg1) {
  MQRank *arg1 = (MQRank *) 0 ;
  
  arg1 = (MQRank *)jarg1; 
  mq::EQP_DistArray = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQP_DistArray_get() {
  void * jresult ;
  MQRank *result = 0 ;
  
  result = (MQRank *)mq::EQP_DistArray;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gSpawnCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gSpawnCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gSpawnCount_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gSpawnCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_g_eqgameimagesize_set(unsigned int jarg1) {
  size_t arg1 ;
  
  arg1 = (size_t)jarg1; 
  mq::g_eqgameimagesize = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_g_eqgameimagesize_get() {
  unsigned int jresult ;
  size_t result;
  
  result = mq::g_eqgameimagesize;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gUseTradeOnTarget_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gUseTradeOnTarget = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gUseTradeOnTarget_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gUseTradeOnTarget;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbBeepOnTells_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbBeepOnTells = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbBeepOnTells_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbBeepOnTells;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbFlashOnTells_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbFlashOnTells = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbFlashOnTells_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbFlashOnTells;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbShowCurrentCamera_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbShowCurrentCamera = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbShowCurrentCamera_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbShowCurrentCamera;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gOldCameraType_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gOldCameraType = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gOldCameraType_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gOldCameraType;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbIgnoreAlertRecursion_set(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  mq::gbIgnoreAlertRecursion = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gbIgnoreAlertRecursion_get() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)mq::gbIgnoreAlertRecursion;
  jresult = result; 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PARSE_PARAM_BEG_get() {
  const char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &mq::PARSE_PARAM_BEG;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_PARSE_PARAM_END_get() {
  const char * jresult ;
  std::string *result = 0 ;
  
  result = (std::string *) &mq::PARSE_PARAM_END;
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gParserVersion_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gParserVersion = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gParserVersion_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gParserVersion;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gbGroundDeprecateCount_set(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  mq::gbGroundDeprecateCount = arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_gbGroundDeprecateCount_get() {
  int jresult ;
  int result;
  
  result = (int)mq::gbGroundDeprecateCount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ToggleImGuiOverlay() {
  mq::ToggleImGuiOverlay();
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQTopLevelObject_Name_set(void * jarg1, const char * jarg2) {
  mq::MQTopLevelObject *arg1 = (mq::MQTopLevelObject *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (mq::MQTopLevelObject *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT const char * SWIGSTDCALL CSharp_MQTopLevelObject_Name_get(void * jarg1) {
  const char * jresult ;
  mq::MQTopLevelObject *arg1 = (mq::MQTopLevelObject *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (mq::MQTopLevelObject *)jarg1; 
  result = (std::string *) & ((arg1)->Name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQTopLevelObject_Function_set(void * jarg1, void * jarg2) {
  mq::MQTopLevelObject *arg1 = (mq::MQTopLevelObject *) 0 ;
  mq::MQTopLevelObjectFunction *arg2 = (mq::MQTopLevelObjectFunction *) 0 ;
  
  arg1 = (mq::MQTopLevelObject *)jarg1; 
  arg2 = (mq::MQTopLevelObjectFunction *)jarg2; 
  if (arg1) (arg1)->Function = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQTopLevelObject_Function_get(void * jarg1) {
  void * jresult ;
  mq::MQTopLevelObject *arg1 = (mq::MQTopLevelObject *) 0 ;
  mq::MQTopLevelObjectFunction *result = 0 ;
  
  arg1 = (mq::MQTopLevelObject *)jarg1; 
  result = (mq::MQTopLevelObjectFunction *)& ((arg1)->Function);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQTopLevelObject_Owner_set(void * jarg1, void * jarg2) {
  mq::MQTopLevelObject *arg1 = (mq::MQTopLevelObject *) 0 ;
  mq::MQPlugin *arg2 = (mq::MQPlugin *) 0 ;
  
  arg1 = (mq::MQTopLevelObject *)jarg1; 
  arg2 = (mq::MQPlugin *)jarg2; 
  if (arg1) (arg1)->Owner = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQTopLevelObject_Owner_get(void * jarg1) {
  void * jresult ;
  mq::MQTopLevelObject *arg1 = (mq::MQTopLevelObject *) 0 ;
  mq::MQPlugin *result = 0 ;
  
  arg1 = (mq::MQTopLevelObject *)jarg1; 
  result = (mq::MQPlugin *) ((arg1)->Owner);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQTopLevelObject() {
  void * jresult ;
  mq::MQTopLevelObject *result = 0 ;
  
  result = (mq::MQTopLevelObject *)new mq::MQTopLevelObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQTopLevelObject(void * jarg1) {
  mq::MQTopLevelObject *arg1 = (mq::MQTopLevelObject *) 0 ;
  
  arg1 = (mq::MQTopLevelObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQDataVar_szName_set(void * jarg1, char * jarg2) {
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->szName, (const char *)arg2, MAX_STRING-1);
      arg1->szName[MAX_STRING-1] = 0;
    } else {
      arg1->szName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MQDataVar_szName_get(void * jarg1) {
  char * jresult ;
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  char *result = 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  result = (char *)(char *) ((arg1)->szName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQDataVar_Var_set(void * jarg1, void * jarg2) {
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  mq::MQTypeVar *arg2 = (mq::MQTypeVar *) 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  arg2 = (mq::MQTypeVar *)jarg2; 
  if (arg1) (arg1)->Var = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQDataVar_Var_get(void * jarg1) {
  void * jresult ;
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  mq::MQTypeVar *result = 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  result = (mq::MQTypeVar *)& ((arg1)->Var);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQDataVar_pNext_set(void * jarg1, void * jarg2) {
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  mq::MQDataVar *arg2 = (mq::MQDataVar *) 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  arg2 = (mq::MQDataVar *)jarg2; 
  if (arg1) (arg1)->pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQDataVar_pNext_get(void * jarg1) {
  void * jresult ;
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  mq::MQDataVar *result = 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  result = (mq::MQDataVar *) ((arg1)->pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQDataVar_pPrev_set(void * jarg1, void * jarg2) {
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  mq::MQDataVar *arg2 = (mq::MQDataVar *) 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  arg2 = (mq::MQDataVar *)jarg2; 
  if (arg1) (arg1)->pPrev = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQDataVar_pPrev_get(void * jarg1) {
  void * jresult ;
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  mq::MQDataVar *result = 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  result = (mq::MQDataVar *) ((arg1)->pPrev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQDataVar_ppHead_set(void * jarg1, void * jarg2) {
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  mq::MQDataVar **arg2 = (mq::MQDataVar **) 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  arg2 = (mq::MQDataVar **)jarg2; 
  if (arg1) (arg1)->ppHead = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MQDataVar_ppHead_get(void * jarg1) {
  void * jresult ;
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  mq::MQDataVar **result = 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  result = (mq::MQDataVar **) ((arg1)->ppHead);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQDataVar() {
  void * jresult ;
  mq::MQDataVar *result = 0 ;
  
  result = (mq::MQDataVar *)new mq::MQDataVar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQDataVar(void * jarg1) {
  mq::MQDataVar *arg1 = (mq::MQDataVar *) 0 ;
  
  arg1 = (mq::MQDataVar *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQDataAPI_EvaluateResultToInt(int jarg1) {
  int jresult ;
  mq::MQDataAPI::EvaluateResult arg1 ;
  int result;
  
  arg1 = (mq::MQDataAPI::EvaluateResult)jarg1; 
  result = (int)mq::MQDataAPI::EvaluateResultToInt(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindMQ2DataVariable(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  mq::MQDataVar *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (mq::MQDataVar *)mq::FindMQ2DataVariable((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiException(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiException *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ImGuiException *)new ImGuiException((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiException(void * jarg1) {
  ImGuiException *arg1 = (ImGuiException *) 0 ;
  
  arg1 = (ImGuiException *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IMGUI_VERSION_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("1.90.1 WIP");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IMGUI_VERSION_NUM_get() {
  int jresult ;
  int result;
  
  result = (int)(19001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImVec2_x_set(void * jarg1, float jarg2) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;
  
  arg1 = (ImVec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImVec2_x_get(void * jarg1) {
  float jresult ;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  
  arg1 = (ImVec2 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImVec2_y_set(void * jarg1, float jarg2) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float arg2 ;
  
  arg1 = (ImVec2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImVec2_y_get(void * jarg1) {
  float jresult ;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  float result;
  
  arg1 = (ImVec2 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImVec2__SWIG_0() {
  void * jresult ;
  ImVec2 *result = 0 ;
  
  result = (ImVec2 *)new ImVec2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImVec2__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  ImVec2 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  result = (ImVec2 *)new ImVec2(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImVec2(void * jarg1) {
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  
  arg1 = (ImVec2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImVec4_x_set(void * jarg1, float jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  arg1 = (ImVec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImVec4_x_get(void * jarg1) {
  float jresult ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  arg1 = (ImVec4 *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImVec4_y_set(void * jarg1, float jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  arg1 = (ImVec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImVec4_y_get(void * jarg1) {
  float jresult ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  arg1 = (ImVec4 *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImVec4_z_set(void * jarg1, float jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  arg1 = (ImVec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImVec4_z_get(void * jarg1) {
  float jresult ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  arg1 = (ImVec4 *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImVec4_w_set(void * jarg1, float jarg2) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float arg2 ;
  
  arg1 = (ImVec4 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImVec4_w_get(void * jarg1) {
  float jresult ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  float result;
  
  arg1 = (ImVec4 *)jarg1; 
  result = (float) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImVec4__SWIG_0() {
  void * jresult ;
  ImVec4 *result = 0 ;
  
  result = (ImVec4 *)new ImVec4();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImVec4__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImVec4 *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ImVec4 *)new ImVec4(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImVec4_FromImU32(unsigned int jarg1) {
  void * jresult ;
  ImU32 arg1 ;
  ImVec4 result;
  
  arg1 = (ImU32)jarg1; 
  result = ImVec4::FromImU32(arg1);
  jresult = new ImVec4(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImVec4_ToImU32(void * jarg1) {
  unsigned int jresult ;
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  ImU32 result;
  
  arg1 = (ImVec4 *)jarg1; 
  result = (ImU32)((ImVec4 const *)arg1)->ToImU32();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImVec4(void * jarg1) {
  ImVec4 *arg1 = (ImVec4 *) 0 ;
  
  arg1 = (ImVec4 *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreateContext__SWIG_0(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiContext *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImGuiContext *)ImGui::CreateContext(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CreateContext__SWIG_1() {
  void * jresult ;
  ImGuiContext *result = 0 ;
  
  result = (ImGuiContext *)ImGui::CreateContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DestroyContext__SWIG_0(void * jarg1) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  arg1 = (ImGuiContext *)jarg1; 
  ImGui::DestroyContext(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DestroyContext__SWIG_1() {
  ImGui::DestroyContext();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCurrentContext() {
  void * jresult ;
  ImGuiContext *result = 0 ;
  
  result = (ImGuiContext *)ImGui::GetCurrentContext();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetCurrentContext(void * jarg1) {
  ImGuiContext *arg1 = (ImGuiContext *) 0 ;
  
  arg1 = (ImGuiContext *)jarg1; 
  ImGui::SetCurrentContext(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetIO() {
  void * jresult ;
  ImGuiIO *result = 0 ;
  
  result = (ImGuiIO *) &ImGui::GetIO();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetStyle() {
  void * jresult ;
  ImGuiStyle *result = 0 ;
  
  result = (ImGuiStyle *) &ImGui::GetStyle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewFrame() {
  ImGui::NewFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndFrame() {
  ImGui::EndFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Render() {
  ImGui::Render();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetDrawData() {
  void * jresult ;
  ImDrawData *result = 0 ;
  
  result = (ImDrawData *)ImGui::GetDrawData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowDemoWindow__SWIG_0(void * jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = (bool *)jarg1; 
  ImGui::ShowDemoWindow(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowDemoWindow__SWIG_1() {
  ImGui::ShowDemoWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowMetricsWindow__SWIG_0(void * jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = (bool *)jarg1; 
  ImGui::ShowMetricsWindow(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowMetricsWindow__SWIG_1() {
  ImGui::ShowMetricsWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowDebugLogWindow__SWIG_0(void * jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = (bool *)jarg1; 
  ImGui::ShowDebugLogWindow(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowDebugLogWindow__SWIG_1() {
  ImGui::ShowDebugLogWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowIDStackToolWindow__SWIG_0(void * jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = (bool *)jarg1; 
  ImGui::ShowIDStackToolWindow(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowIDStackToolWindow__SWIG_1() {
  ImGui::ShowIDStackToolWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowAboutWindow__SWIG_0(void * jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = (bool *)jarg1; 
  ImGui::ShowAboutWindow(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowAboutWindow__SWIG_1() {
  ImGui::ShowAboutWindow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowStyleEditor__SWIG_0(void * jarg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  ImGui::ShowStyleEditor(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowStyleEditor__SWIG_1() {
  ImGui::ShowStyleEditor();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ShowStyleSelector(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::ShowStyleSelector((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowFontSelector(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::ShowFontSelector((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowUserGuide() {
  ImGui::ShowUserGuide();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetVersion() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ImGui::GetVersion();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleColorsDark__SWIG_0(void * jarg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  ImGui::StyleColorsDark(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleColorsDark__SWIG_1() {
  ImGui::StyleColorsDark();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleColorsLight__SWIG_0(void * jarg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  ImGui::StyleColorsLight(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleColorsLight__SWIG_1() {
  ImGui::StyleColorsLight();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleColorsClassic__SWIG_0(void * jarg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  ImGui::StyleColorsClassic(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StyleColorsClassic__SWIG_1() {
  ImGui::StyleColorsClassic();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Begin__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (ImGuiWindowFlags)jarg3; 
  result = (bool)ImGui::Begin((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Begin__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)ImGui::Begin((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Begin__SWIG_2(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::Begin((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_End() {
  ImGui::End();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChild__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiChildFlags arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiChildFlags)jarg3; 
  arg4 = (ImGuiWindowFlags)jarg4; 
  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChild__SWIG_1(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiChildFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiChildFlags)jarg3; 
  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChild__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::BeginChild((char const *)arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChild__SWIG_3(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginChild((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChild__SWIG_4(unsigned int jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiChildFlags arg3 ;
  ImGuiWindowFlags arg4 ;
  bool result;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiChildFlags)jarg3; 
  arg4 = (ImGuiWindowFlags)jarg4; 
  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChild__SWIG_5(unsigned int jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiChildFlags arg3 ;
  bool result;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiChildFlags)jarg3; 
  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChild__SWIG_6(unsigned int jarg1, void * jarg2) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::BeginChild(arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChild__SWIG_7(unsigned int jarg1) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  bool result;
  
  arg1 = (ImGuiID)jarg1; 
  result = (bool)ImGui::BeginChild(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndChild() {
  ImGui::EndChild();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsWindowAppearing() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsWindowAppearing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsWindowCollapsed() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsWindowCollapsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsWindowFocused__SWIG_0(int jarg1) {
  unsigned int jresult ;
  ImGuiFocusedFlags arg1 ;
  bool result;
  
  arg1 = (ImGuiFocusedFlags)jarg1; 
  result = (bool)ImGui::IsWindowFocused(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsWindowFocused__SWIG_1() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsWindowFocused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsWindowHovered__SWIG_0(int jarg1) {
  unsigned int jresult ;
  ImGuiHoveredFlags arg1 ;
  bool result;
  
  arg1 = (ImGuiHoveredFlags)jarg1; 
  result = (bool)ImGui::IsWindowHovered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsWindowHovered__SWIG_1() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsWindowHovered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWindowDrawList() {
  void * jresult ;
  ImDrawList *result = 0 ;
  
  result = (ImDrawList *)ImGui::GetWindowDrawList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetWindowDpiScale() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetWindowDpiScale();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWindowPos() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetWindowPos();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWindowSize() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetWindowSize();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetWindowWidth() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetWindowWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetWindowHeight() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetWindowHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWindowViewport() {
  void * jresult ;
  ImGuiViewport *result = 0 ;
  
  result = (ImGuiViewport *)ImGui::GetWindowViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowPos__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  ImVec2 *arg3 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImGuiCond)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2,(ImVec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowPos__SWIG_1(void * jarg1, int jarg2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImGuiCond)jarg2; 
  ImGui::SetNextWindowPos((ImVec2 const &)*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowPos__SWIG_2(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetNextWindowPos((ImVec2 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowSize__SWIG_0(void * jarg1, int jarg2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImGuiCond)jarg2; 
  ImGui::SetNextWindowSize((ImVec2 const &)*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowSize__SWIG_1(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetNextWindowSize((ImVec2 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowSizeConstraints__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  SwigValueWrapper< std::function< void (ImGuiSizeCallbackData *) > > arg3 ;
  ImGuiSizeCallback *argp3 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  argp3 = (ImGuiSizeCallback *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ImGuiSizeCallback", 0);
    return ;
  }
  arg3 = *argp3; 
  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowSizeConstraints__SWIG_1(void * jarg1, void * jarg2) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetNextWindowSizeConstraints((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowContentSize(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetNextWindowContentSize((ImVec2 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowCollapsed__SWIG_0(unsigned int jarg1, int jarg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (ImGuiCond)jarg2; 
  ImGui::SetNextWindowCollapsed(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowCollapsed__SWIG_1(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::SetNextWindowCollapsed(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowFocus() {
  ImGui::SetNextWindowFocus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowScroll(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetNextWindowScroll((ImVec2 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowBgAlpha(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetNextWindowBgAlpha(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowViewport(unsigned int jarg1) {
  ImGuiID arg1 ;
  
  arg1 = (ImGuiID)jarg1; 
  ImGui::SetNextWindowViewport(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowPos__SWIG_0(void * jarg1, int jarg2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImGuiCond)jarg2; 
  ImGui::SetWindowPos((ImVec2 const &)*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowPos__SWIG_1(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetWindowPos((ImVec2 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowSize__SWIG_0(void * jarg1, int jarg2) {
  ImVec2 *arg1 = 0 ;
  ImGuiCond arg2 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImGuiCond)jarg2; 
  ImGui::SetWindowSize((ImVec2 const &)*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowSize__SWIG_1(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetWindowSize((ImVec2 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowCollapsed__SWIG_0(unsigned int jarg1, int jarg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (ImGuiCond)jarg2; 
  ImGui::SetWindowCollapsed(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowCollapsed__SWIG_1(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::SetWindowCollapsed(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowFocus__SWIG_0() {
  ImGui::SetWindowFocus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowFontScale(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetWindowFontScale(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowPos__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImGuiCond)jarg3; 
  ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowPos__SWIG_3(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetWindowPos((char const *)arg1,(ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowSize__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiCond arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImGuiCond)jarg3; 
  ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowSize__SWIG_3(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetWindowSize((char const *)arg1,(ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowCollapsed__SWIG_2(char * jarg1, unsigned int jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiCond arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ImGuiCond)jarg3; 
  ImGui::SetWindowCollapsed((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowCollapsed__SWIG_3(char * jarg1, unsigned int jarg2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ImGui::SetWindowCollapsed((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetWindowFocus__SWIG_1(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::SetWindowFocus((char const *)arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetContentRegionAvail() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetContentRegionAvail();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetContentRegionMax() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetContentRegionMax();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWindowContentRegionMin() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetWindowContentRegionMin();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetWindowContentRegionMax() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetWindowContentRegionMax();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetScrollX() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetScrollX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetScrollY() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetScrollY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollX(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetScrollX(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollY(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetScrollY(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetScrollMaxX() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetScrollMaxX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetScrollMaxY() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetScrollMaxY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollHereX__SWIG_0(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetScrollHereX(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollHereX__SWIG_1() {
  ImGui::SetScrollHereX();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollHereY__SWIG_0(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetScrollHereY(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollHereY__SWIG_1() {
  ImGui::SetScrollHereY();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollFromPosX__SWIG_0(float jarg1, float jarg2) {
  float arg1 ;
  float arg2 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  ImGui::SetScrollFromPosX(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollFromPosX__SWIG_1(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetScrollFromPosX(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollFromPosY__SWIG_0(float jarg1, float jarg2) {
  float arg1 ;
  float arg2 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  ImGui::SetScrollFromPosY(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetScrollFromPosY__SWIG_1(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetScrollFromPosY(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushFont(void * jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  ImGui::PushFont(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopFont() {
  ImGui::PopFont();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushStyleColor__SWIG_0(int jarg1, unsigned int jarg2) {
  ImGuiCol arg1 ;
  ImU32 arg2 ;
  
  arg1 = (ImGuiCol)jarg1; 
  arg2 = (ImU32)jarg2; 
  ImGui::PushStyleColor(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushStyleColor__SWIG_1(int jarg1, void * jarg2) {
  ImGuiCol arg1 ;
  ImVec4 *arg2 = 0 ;
  
  arg1 = (ImGuiCol)jarg1; 
  arg2 = (ImVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  ImGui::PushStyleColor(arg1,(ImVec4 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopStyleColor__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ImGui::PopStyleColor(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopStyleColor__SWIG_1() {
  ImGui::PopStyleColor();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushStyleVar__SWIG_0(int jarg1, float jarg2) {
  ImGuiStyleVar arg1 ;
  float arg2 ;
  
  arg1 = (ImGuiStyleVar)jarg1; 
  arg2 = (float)jarg2; 
  ImGui::PushStyleVar(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushStyleVar__SWIG_1(int jarg1, void * jarg2) {
  ImGuiStyleVar arg1 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (ImGuiStyleVar)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::PushStyleVar(arg1,(ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopStyleVar__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ImGui::PopStyleVar(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopStyleVar__SWIG_1() {
  ImGui::PopStyleVar();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushTabStop(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::PushTabStop(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopTabStop() {
  ImGui::PopTabStop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushButtonRepeat(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::PushButtonRepeat(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopButtonRepeat() {
  ImGui::PopButtonRepeat();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushItemWidth(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::PushItemWidth(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopItemWidth() {
  ImGui::PopItemWidth();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextItemWidth(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetNextItemWidth(arg1);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CalcItemWidth() {
  float jresult ;
  float result;
  
  result = (float)ImGui::CalcItemWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushTextWrapPos__SWIG_0(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::PushTextWrapPos(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushTextWrapPos__SWIG_1() {
  ImGui::PushTextWrapPos();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopTextWrapPos() {
  ImGui::PopTextWrapPos();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetFont() {
  void * jresult ;
  ImFont *result = 0 ;
  
  result = (ImFont *)ImGui::GetFont();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetFontSize() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetFontSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetFontTexUvWhitePixel() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetFontTexUvWhitePixel();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetColorU32__SWIG_0(int jarg1, float jarg2) {
  unsigned int jresult ;
  ImGuiCol arg1 ;
  float arg2 ;
  ImU32 result;
  
  arg1 = (ImGuiCol)jarg1; 
  arg2 = (float)jarg2; 
  result = (ImU32)ImGui::GetColorU32(arg1,arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetColorU32__SWIG_1(int jarg1) {
  unsigned int jresult ;
  ImGuiCol arg1 ;
  ImU32 result;
  
  arg1 = (ImGuiCol)jarg1; 
  result = (ImU32)ImGui::GetColorU32(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetColorU32__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  
  arg1 = (ImVec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = (ImU32)ImGui::GetColorU32((ImVec4 const &)*arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetColorU32__SWIG_3(unsigned int jarg1) {
  unsigned int jresult ;
  ImU32 arg1 ;
  ImU32 result;
  
  arg1 = (ImU32)jarg1; 
  result = (ImU32)ImGui::GetColorU32(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetStyleColorVec4(int jarg1) {
  void * jresult ;
  ImGuiCol arg1 ;
  ImVec4 *result = 0 ;
  
  arg1 = (ImGuiCol)jarg1; 
  result = (ImVec4 *) &ImGui::GetStyleColorVec4(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCursorScreenPos() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetCursorScreenPos();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetCursorScreenPos(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetCursorScreenPos((ImVec2 const &)*arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCursorPos() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetCursorPos();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetCursorPosX() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetCursorPosX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetCursorPosY() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetCursorPosY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetCursorPos(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::SetCursorPos((ImVec2 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetCursorPosX(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetCursorPosX(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetCursorPosY(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SetCursorPosY(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCursorStartPos() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetCursorStartPos();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Separator() {
  ImGui::Separator();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SameLine__SWIG_0(float jarg1, float jarg2) {
  float arg1 ;
  float arg2 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  ImGui::SameLine(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SameLine__SWIG_1(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::SameLine(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SameLine__SWIG_2() {
  ImGui::SameLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewLine() {
  ImGui::NewLine();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Spacing() {
  ImGui::Spacing();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Dummy(void * jarg1) {
  ImVec2 *arg1 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::Dummy((ImVec2 const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Indent__SWIG_0(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::Indent(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Indent__SWIG_1() {
  ImGui::Indent();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Unindent__SWIG_0(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::Unindent(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Unindent__SWIG_1() {
  ImGui::Unindent();
}


SWIGEXPORT void SWIGSTDCALL CSharp_BeginGroup() {
  ImGui::BeginGroup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndGroup() {
  ImGui::EndGroup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AlignTextToFramePadding() {
  ImGui::AlignTextToFramePadding();
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetTextLineHeight() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetTextLineHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetTextLineHeightWithSpacing() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetTextLineHeightWithSpacing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetFrameHeight() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetFrameHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetFrameHeightWithSpacing() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetFrameHeightWithSpacing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushID__SWIG_0(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::PushID((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushID__SWIG_1(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  ImGui::PushID((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushID__SWIG_2(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  ImGui::PushID((void const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushID__SWIG_3(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ImGui::PushID(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopID() {
  ImGui::PopID();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetID__SWIG_0(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiID result;
  
  arg1 = (char *)jarg1; 
  result = (ImGuiID)ImGui::GetID((char const *)arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetID__SWIG_1(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiID result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ImGuiID)ImGui::GetID((char const *)arg1,(char const *)arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetID__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  ImGuiID result;
  
  arg1 = (void *)jarg1; 
  result = (ImGuiID)ImGui::GetID((void const *)arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextUnformatted__SWIG_0(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  ImGui::TextUnformatted((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextUnformatted__SWIG_1(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::TextUnformatted((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Text(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::Text((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextV(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (va_list *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg2 = *argp2; 
  ImGui::TextV((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextColored(void * jarg1, char * jarg2) {
  ImVec4 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (ImVec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  arg2 = (char *)jarg2; 
  ImGui::TextColored((ImVec4 const &)*arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextColoredV(void * jarg1, char * jarg2, void * jarg3) {
  ImVec4 *arg1 = 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  
  arg1 = (ImVec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  arg2 = (char *)jarg2; 
  argp3 = (va_list *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg3 = *argp3; 
  ImGui::TextColoredV((ImVec4 const &)*arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextDisabled(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::TextDisabled((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextDisabledV(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (va_list *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg2 = *argp2; 
  ImGui::TextDisabledV((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextWrapped(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::TextWrapped((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TextWrappedV(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (va_list *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg2 = *argp2; 
  ImGui::TextWrappedV((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelText(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  ImGui::LabelText((char const *)arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelTextV(char * jarg1, char * jarg2, void * jarg3) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (va_list *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg3 = *argp3; 
  ImGui::LabelTextV((char const *)arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletText(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::BulletText((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BulletTextV(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (va_list *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg2 = *argp2; 
  ImGui::BulletTextV((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_SeparatorText(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::SeparatorText((char const *)arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Button__SWIG_0(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::Button((char const *)arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Button__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::Button((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SmallButton(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::SmallButton((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InvisibleButton__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiButtonFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiButtonFlags)jarg3; 
  result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InvisibleButton__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::InvisibleButton((char const *)arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArrowButton(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDir arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDir)jarg2; 
  result = (bool)ImGui::ArrowButton((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Checkbox(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)ImGui::Checkbox((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CheckboxFlags__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)ImGui::CheckboxFlags((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CheckboxFlags__SWIG_1(char * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)ImGui::CheckboxFlags((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RadioButton__SWIG_0(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)ImGui::RadioButton((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RadioButton__SWIG_1(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)ImGui::RadioButton((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressBar__SWIG_0(float jarg1, void * jarg2, char * jarg3) {
  float arg1 ;
  ImVec2 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressBar__SWIG_1(float jarg1, void * jarg2) {
  float arg1 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::ProgressBar(arg1,(ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProgressBar__SWIG_2(float jarg1) {
  float arg1 ;
  
  arg1 = (float)jarg1; 
  ImGui::ProgressBar(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Bullet() {
  ImGui::Bullet();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;
  ImVec4 *arg6 = 0 ;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec4 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5,(ImVec4 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec4 *arg5 = 0 ;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec4 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec4 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image__SWIG_3(void * jarg1, void * jarg2, void * jarg3) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::Image(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Image__SWIG_4(void * jarg1, void * jarg2) {
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  ImGui::Image(arg1,(ImVec2 const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_0(char * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec4 *arg6 = 0 ;
  ImVec4 *arg7 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg6 = (ImVec4 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  arg7 = (ImVec4 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton((char const *)arg1,arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec4 const &)*arg6,(ImVec4 const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_1(char * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec4 *arg6 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg6 = (ImVec4 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton((char const *)arg1,arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec4 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_2(char * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton((char const *)arg1,arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_3(char * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton((char const *)arg1,arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_4(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton((char const *)arg1,arg2,(ImVec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginCombo__SWIG_0(char * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiComboFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (ImGuiComboFlags)jarg3; 
  result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginCombo__SWIG_1(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ImGui::BeginCombo((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndCombo() {
  ImGui::EndCombo();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Combo__SWIG_0(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) (char **)0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Combo__SWIG_1(char * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) (char **)0 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *const (*))arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Combo__SWIG_2(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Combo__SWIG_3(char * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Combo__SWIG_4(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *(*arg3)(void *,int) = (char *(*)(void *,int)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *(*)(void *,int))jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *(*)(void *,int))arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Combo__SWIG_5(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *(*arg3)(void *,int) = (char *(*)(void *,int)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *(*)(void *,int))jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::Combo((char const *)arg1,arg2,(char const *(*)(void *,int))arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat__SWIG_3(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat__SWIG_4(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat__SWIG_5(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat2__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat2__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat2__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat2__SWIG_3(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat2__SWIG_4(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat2__SWIG_5(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat3__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat3__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat3__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat3__SWIG_3(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat3__SWIG_4(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat3__SWIG_5(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat4__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat4__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat4__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat4__SWIG_3(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat4__SWIG_4(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat4__SWIG_5(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloatRange2__SWIG_0(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, char * jarg8, int jarg9) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (ImGuiSliderFlags)jarg9; 
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloatRange2__SWIG_1(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, char * jarg7, char * jarg8) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloatRange2__SWIG_2(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6, char * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloatRange2__SWIG_3(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloatRange2__SWIG_4(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloatRange2__SWIG_5(char * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloatRange2__SWIG_6(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float *arg3 = (float *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (bool)ImGui::DragFloatRange2((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt__SWIG_0(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt__SWIG_1(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt__SWIG_2(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt__SWIG_3(char * jarg1, void * jarg2, float jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt__SWIG_4(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::DragInt((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt__SWIG_5(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)ImGui::DragInt((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt2__SWIG_0(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt2__SWIG_1(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt2__SWIG_2(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt2__SWIG_3(char * jarg1, void * jarg2, float jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt2__SWIG_4(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt2__SWIG_5(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)ImGui::DragInt2((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt3__SWIG_0(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt3__SWIG_1(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt3__SWIG_2(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt3__SWIG_3(char * jarg1, void * jarg2, float jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt3__SWIG_4(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt3__SWIG_5(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)ImGui::DragInt3((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt4__SWIG_0(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt4__SWIG_1(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt4__SWIG_2(char * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt4__SWIG_3(char * jarg1, void * jarg2, float jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt4__SWIG_4(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragInt4__SWIG_5(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)ImGui::DragInt4((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragIntRange2__SWIG_0(char * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, char * jarg7, char * jarg8, int jarg9) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (ImGuiSliderFlags)jarg9; 
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragIntRange2__SWIG_1(char * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, char * jarg7, char * jarg8) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (char *)jarg8; 
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7,(char const *)arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragIntRange2__SWIG_2(char * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6, char * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragIntRange2__SWIG_3(char * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragIntRange2__SWIG_4(char * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragIntRange2__SWIG_5(char * jarg1, void * jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragIntRange2__SWIG_6(char * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (bool)ImGui::DragIntRange2((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalar__SWIG_0(char * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, char * jarg7, int jarg8) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (ImGuiSliderFlags)jarg8; 
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalar__SWIG_1(char * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, char * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalar__SWIG_2(char * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalar__SWIG_3(char * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (void *)jarg5; 
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4,(void const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalar__SWIG_4(char * jarg1, int jarg2, void * jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalar__SWIG_5(char * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  result = (bool)ImGui::DragScalar((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalarN__SWIG_0(char * jarg1, int jarg2, void * jarg3, int jarg4, float jarg5, void * jarg6, void * jarg7, char * jarg8, int jarg9) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  ImGuiSliderFlags arg9 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (void *)jarg7; 
  arg8 = (char *)jarg8; 
  arg9 = (ImGuiSliderFlags)jarg9; 
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalarN__SWIG_1(char * jarg1, int jarg2, void * jarg3, int jarg4, float jarg5, void * jarg6, void * jarg7, char * jarg8) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  char *arg8 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (void *)jarg7; 
  arg8 = (char *)jarg8; 
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7,(char const *)arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalarN__SWIG_2(char * jarg1, int jarg2, void * jarg3, int jarg4, float jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (void *)jarg7; 
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6,(void const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalarN__SWIG_3(char * jarg1, int jarg2, void * jarg3, int jarg4, float jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (void *)jarg6; 
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5,(void const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalarN__SWIG_4(char * jarg1, int jarg2, void * jarg3, int jarg4, float jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragScalarN__SWIG_5(char * jarg1, int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::DragScalarN((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat2__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat2__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat2__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat3__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat3__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat3__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat4__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat4__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat4__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderAngle__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderAngle__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderAngle__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderAngle__SWIG_3(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderAngle__SWIG_4(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::SliderAngle((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt__SWIG_2(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::SliderInt((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt2__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt2__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt2__SWIG_2(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::SliderInt2((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt3__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt3__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt3__SWIG_2(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::SliderInt3((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt4__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiSliderFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiSliderFlags)jarg6; 
  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt4__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderInt4__SWIG_2(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::SliderInt4((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderScalar__SWIG_0(char * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderScalar__SWIG_1(char * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderScalar__SWIG_2(char * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  result = (bool)ImGui::SliderScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderScalarN__SWIG_0(char * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6, char * jarg7, int jarg8) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (ImGuiSliderFlags)jarg8; 
  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderScalarN__SWIG_1(char * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6, char * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderScalarN__SWIG_2(char * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  result = (bool)ImGui::SliderScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderFloat__SWIG_0(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderFloat__SWIG_1(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderFloat__SWIG_2(char * jarg1, void * jarg2, void * jarg3, float jarg4, float jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  float *arg3 = (float *) 0 ;
  float arg4 ;
  float arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (float *)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (bool)ImGui::VSliderFloat((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderInt__SWIG_0(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  ImGuiSliderFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiSliderFlags)jarg7; 
  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderInt__SWIG_1(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderInt__SWIG_2(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (int *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::VSliderInt((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderScalar__SWIG_0(char * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, char * jarg7, int jarg8) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiSliderFlags arg8 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiDataType)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (ImGuiSliderFlags)jarg8; 
  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderScalar__SWIG_1(char * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6, char * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiDataType)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VSliderScalar__SWIG_2(char * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDataType arg3 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiDataType)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  result = (bool)ImGui::VSliderScalar((char const *)arg1,(ImVec2 const &)*arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputText__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3, int jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImGuiInputTextFlags)jarg4; 
  arg5 = (ImGuiInputTextCallback)jarg5; 
  arg6 = (void *)jarg6; 
  result = (bool)ImGui::InputText((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputText__SWIG_1(char * jarg1, char * jarg2, unsigned int jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  ImGuiInputTextCallback arg5 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImGuiInputTextFlags)jarg4; 
  arg5 = (ImGuiInputTextCallback)jarg5; 
  result = (bool)ImGui::InputText((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputText__SWIG_2(char * jarg1, char * jarg2, unsigned int jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImGuiInputTextFlags)jarg4; 
  result = (bool)ImGui::InputText((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputText__SWIG_3(char * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ImGui::InputText((char const *)arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextMultiline__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  arg6 = (ImGuiInputTextCallback)jarg6; 
  arg7 = (void *)jarg7; 
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),(ImVec2 const &)*arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextMultiline__SWIG_1(char * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  arg6 = (ImGuiInputTextCallback)jarg6; 
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),(ImVec2 const &)*arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextMultiline__SWIG_2(char * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),(ImVec2 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextMultiline__SWIG_3(char * jarg1, char * jarg2, unsigned int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,SWIG_STD_MOVE(arg3),(ImVec2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextMultiline__SWIG_4(char * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ImGui::InputTextMultiline((char const *)arg1,arg2,SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextWithHint__SWIG_0(char * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, int jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  void *arg7 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  arg6 = (ImGuiInputTextCallback)jarg6; 
  arg7 = (void *)jarg7; 
  result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextWithHint__SWIG_1(char * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  ImGuiInputTextCallback arg6 = (ImGuiInputTextCallback) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  arg6 = (ImGuiInputTextCallback)jarg6; 
  result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextWithHint__SWIG_2(char * jarg1, char * jarg2, char * jarg3, unsigned int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,SWIG_STD_MOVE(arg4),arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputTextWithHint__SWIG_3(char * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (size_t)jarg4; 
  result = (bool)ImGui::InputTextWithHint((char const *)arg1,(char const *)arg2,arg3,SWIG_STD_MOVE(arg4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat__SWIG_0(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiInputTextFlags)jarg6; 
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat__SWIG_1(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat__SWIG_2(char * jarg1, void * jarg2, float jarg3, float jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat__SWIG_3(char * jarg1, void * jarg2, float jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat__SWIG_4(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::InputFloat((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat2__SWIG_0(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ImGuiInputTextFlags)jarg4; 
  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat2__SWIG_1(char * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat2__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::InputFloat2((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat3__SWIG_0(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ImGuiInputTextFlags)jarg4; 
  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat3__SWIG_1(char * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat3__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::InputFloat3((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat4__SWIG_0(char * jarg1, void * jarg2, char * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  char *arg3 = (char *) 0 ;
  ImGuiInputTextFlags arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (ImGuiInputTextFlags)jarg4; 
  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat4__SWIG_1(char * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputFloat4__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::InputFloat4((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  ImGuiInputTextFlags arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (ImGuiInputTextFlags)jarg5; 
  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)ImGui::InputInt((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt__SWIG_3(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)ImGui::InputInt((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt2__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (ImGuiInputTextFlags)jarg3; 
  result = (bool)ImGui::InputInt2((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt2__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)ImGui::InputInt2((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt3__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (ImGuiInputTextFlags)jarg3; 
  result = (bool)ImGui::InputInt3((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt3__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)ImGui::InputInt3((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt4__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  ImGuiInputTextFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (ImGuiInputTextFlags)jarg3; 
  result = (bool)ImGui::InputInt4((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputInt4__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)ImGui::InputInt4((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputDouble__SWIG_0(char * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  ImGuiInputTextFlags arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (ImGuiInputTextFlags)jarg6; 
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputDouble__SWIG_1(char * jarg1, void * jarg2, double jarg3, double jarg4, char * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputDouble__SWIG_2(char * jarg1, void * jarg2, double jarg3, double jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  double arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputDouble__SWIG_3(char * jarg1, void * jarg2, double jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  double arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  arg3 = (double)jarg3; 
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputDouble__SWIG_4(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)ImGui::InputDouble((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalar__SWIG_0(char * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, char * jarg6, int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  ImGuiInputTextFlags arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (ImGuiInputTextFlags)jarg7; 
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalar__SWIG_1(char * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, char * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  char *arg6 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (char *)jarg6; 
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5,(char const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalar__SWIG_2(char * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (void *)jarg5; 
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4,(void const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalar__SWIG_3(char * jarg1, int jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  void *arg4 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (void *)jarg4; 
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3,(void const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalar__SWIG_4(char * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  result = (bool)ImGui::InputScalar((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalarN__SWIG_0(char * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6, char * jarg7, int jarg8) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  ImGuiInputTextFlags arg8 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (ImGuiInputTextFlags)jarg8; 
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalarN__SWIG_1(char * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6, char * jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  char *arg7 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  arg7 = (char *)jarg7; 
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6,(char const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalarN__SWIG_2(char * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  void *arg6 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (void *)jarg6; 
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5,(void const *)arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalarN__SWIG_3(char * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *arg5 = (void *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (void *)jarg5; 
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4,(void const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_InputScalarN__SWIG_4(char * jarg1, int jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDataType arg2 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDataType)jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::InputScalarN((char const *)arg1,arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorEdit3__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorEdit3__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::ColorEdit3((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorEdit4__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorEdit4__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::ColorEdit4((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker3__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker3__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::ColorPicker3((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker4__SWIG_0(char * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  ImGuiColorEditFlags arg3 ;
  float *arg4 = (float *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  arg4 = (float *)jarg4; 
  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3,(float const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker4__SWIG_1(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorPicker4__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)ImGui::ColorPicker4((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorButton__SWIG_0(char * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3,(ImVec2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorButton__SWIG_1(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  ImGuiColorEditFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiColorEditFlags)jarg3; 
  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorButton__SWIG_2(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec4 *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ColorButton((char const *)arg1,(ImVec4 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetColorEditOptions(int jarg1) {
  ImGuiColorEditFlags arg1 ;
  
  arg1 = (ImGuiColorEditFlags)jarg1; 
  ImGui::SetColorEditOptions(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNode__SWIG_0(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::TreeNode((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNode__SWIG_1(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ImGui::TreeNode((char const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNode__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  bool result;
  
  arg1 = (void *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ImGui::TreeNode((void const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNodeV__SWIG_0(char * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (va_list *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)ImGui::TreeNodeV((char const *)arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNodeV__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  bool result;
  
  arg1 = (void *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (va_list *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)ImGui::TreeNodeV((void const *)arg1,(char const *)arg2,SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNodeEx__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNodeEx__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::TreeNodeEx((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNodeEx__SWIG_2(char * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ImGui::TreeNodeEx((char const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNodeEx__SWIG_3(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  bool result;
  
  arg1 = (void *)jarg1; 
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)ImGui::TreeNodeEx((void const *)arg1,arg2,(char const *)arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNodeExV__SWIG_0(char * jarg1, int jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)ImGui::TreeNodeExV((char const *)arg1,arg2,(char const *)arg3,SWIG_STD_MOVE(arg4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TreeNodeExV__SWIG_1(void * jarg1, int jarg2, char * jarg3, void * jarg4) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  bool result;
  
  arg1 = (void *)jarg1; 
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (va_list *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)ImGui::TreeNodeExV((void const *)arg1,arg2,(char const *)arg3,SWIG_STD_MOVE(arg4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreePush__SWIG_0(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::TreePush((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreePush__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  ImGui::TreePush((void const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreePop() {
  ImGui::TreePop();
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetTreeNodeToLabelSpacing() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetTreeNodeToLabelSpacing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollapsingHeader__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollapsingHeader__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::CollapsingHeader((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollapsingHeader__SWIG_2(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTreeNodeFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (ImGuiTreeNodeFlags)jarg3; 
  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollapsingHeader__SWIG_3(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)ImGui::CollapsingHeader((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextItemOpen__SWIG_0(unsigned int jarg1, int jarg2) {
  bool arg1 ;
  ImGuiCond arg2 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (ImGuiCond)jarg2; 
  ImGui::SetNextItemOpen(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextItemOpen__SWIG_1(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::SetNextItemOpen(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Selectable__SWIG_0(char * jarg1, unsigned int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ImGuiSelectableFlags)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Selectable__SWIG_1(char * jarg1, unsigned int jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (ImGuiSelectableFlags)jarg3; 
  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Selectable__SWIG_2(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)ImGui::Selectable((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Selectable__SWIG_3(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::Selectable((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Selectable__SWIG_4(char * jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (ImGuiSelectableFlags)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Selectable__SWIG_5(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiSelectableFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (ImGuiSelectableFlags)jarg3; 
  result = (bool)ImGui::Selectable((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Selectable__SWIG_6(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)ImGui::Selectable((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginListBox__SWIG_0(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::BeginListBox((char const *)arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginListBox__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginListBox((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndListBox() {
  ImGui::EndListBox();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBox__SWIG_0(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) (char **)0 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBox__SWIG_1(char * jarg1, void * jarg2, void * jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char **arg3 = (char **) (char **)0 ;
  int arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char **)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *const (*))arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBox__SWIG_2(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *(*arg3)(void *,int) = (char *(*)(void *,int)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *(*)(void *,int))jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *(*)(void *,int))arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBox__SWIG_3(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *(*arg3)(void *,int) = (char *(*)(void *,int)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (char *(*)(void *,int))jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,(char const *(*)(void *,int))arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, float jarg6, float jarg7, void * jarg8, int jarg9) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  argp8 = (ImVec2 *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ImVec2", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = (int)jarg9; 
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,SWIG_STD_MOVE(arg8),arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, float jarg6, float jarg7, void * jarg8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  ImVec2 *argp8 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  argp8 = (ImVec2 *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ImVec2", 0);
    return ;
  }
  arg8 = *argp8; 
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,SWIG_STD_MOVE(arg8));
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_2(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, float jarg6, float jarg7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_3(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, float jarg6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_4(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_5(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_6(char * jarg1, void * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  ImGui::PlotLines((char const *)arg1,(float const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_7(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6, float jarg7, float jarg8, void * jarg9) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  ImVec2 *argp9 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  argp9 = (ImVec2 *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ImVec2", 0);
    return ;
  }
  arg9 = *argp9; 
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,SWIG_STD_MOVE(arg9));
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_8(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6, float jarg7, float jarg8) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_9(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6, float jarg7) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_10(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_11(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotLines__SWIG_12(char * jarg1, void * jarg2, void * jarg3, int jarg4) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  ImGui::PlotLines((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_0(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, float jarg6, float jarg7, void * jarg8, int jarg9) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  int arg9 ;
  ImVec2 *argp8 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  argp8 = (ImVec2 *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ImVec2", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = (int)jarg9; 
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,SWIG_STD_MOVE(arg8),arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_1(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, float jarg6, float jarg7, void * jarg8) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  ImVec2 arg8 ;
  ImVec2 *argp8 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  argp8 = (ImVec2 *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ImVec2", 0);
    return ;
  }
  arg8 = *argp8; 
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7,SWIG_STD_MOVE(arg8));
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_2(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, float jarg6, float jarg7) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_3(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5, float jarg6) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_4(char * jarg1, void * jarg2, int jarg3, int jarg4, char * jarg5) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_5(char * jarg1, void * jarg2, int jarg3, int jarg4) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_6(char * jarg1, void * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (int)jarg3; 
  ImGui::PlotHistogram((char const *)arg1,(float const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_7(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6, float jarg7, float jarg8, void * jarg9) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  ImVec2 arg9 ;
  ImVec2 *argp9 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  argp9 = (ImVec2 *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ImVec2", 0);
    return ;
  }
  arg9 = *argp9; 
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8,SWIG_STD_MOVE(arg9));
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_8(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6, float jarg7, float jarg8) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  float arg8 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_9(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6, float jarg7) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_10(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, char * jarg6) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_11(char * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlotHistogram__SWIG_12(char * jarg1, void * jarg2, void * jarg3, int jarg4) {
  char *arg1 = (char *) 0 ;
  float (*arg2)(void *,int) = (float (*)(void *,int)) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float (*)(void *,int))jarg2; 
  arg3 = (void *)jarg3; 
  arg4 = (int)jarg4; 
  ImGui::PlotHistogram((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Value__SWIG_0(char * jarg1, unsigned int jarg2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  ImGui::Value((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Value__SWIG_1(char * jarg1, int jarg2) {
  char *arg1 = (char *) 0 ;
  int arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  ImGui::Value((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Value__SWIG_2(char * jarg1, unsigned int jarg2) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  ImGui::Value((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Value__SWIG_3(char * jarg1, float jarg2, char * jarg3) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (char *)jarg3; 
  ImGui::Value((char const *)arg1,arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Value__SWIG_4(char * jarg1, float jarg2) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float)jarg2; 
  ImGui::Value((char const *)arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginMenuBar() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginMenuBar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndMenuBar() {
  ImGui::EndMenuBar();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginMainMenuBar() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginMainMenuBar();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndMainMenuBar() {
  ImGui::EndMainMenuBar();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginMenu__SWIG_0(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)ImGui::BeginMenu((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginMenu__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginMenu((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndMenu() {
  ImGui::EndMenu();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MenuItem__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MenuItem__SWIG_1(char * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MenuItem__SWIG_2(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MenuItem__SWIG_3(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::MenuItem((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MenuItem__SWIG_4(char * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MenuItem__SWIG_5(char * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (bool)ImGui::MenuItem((char const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTooltip() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginTooltip();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndTooltip() {
  ImGui::EndTooltip();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetTooltip(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::SetTooltip((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetTooltipV(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (va_list *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg2 = *argp2; 
  ImGui::SetTooltipV((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginItemTooltip() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginItemTooltip();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetItemTooltip(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::SetItemTooltip((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetItemTooltipV(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (va_list *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg2 = *argp2; 
  ImGui::SetItemTooltipV((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopup__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiWindowFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiWindowFlags)jarg2; 
  result = (bool)ImGui::BeginPopup((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopup__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginPopup((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupModal__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (ImGuiWindowFlags)jarg3; 
  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupModal__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)ImGui::BeginPopupModal((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupModal__SWIG_2(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginPopupModal((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndPopup() {
  ImGui::EndPopup();
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPopup__SWIG_0(char * jarg1, int jarg2) {
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiPopupFlags)jarg2; 
  ImGui::OpenPopup((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPopup__SWIG_1(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::OpenPopup((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPopup__SWIG_2(unsigned int jarg1, int jarg2) {
  ImGuiID arg1 ;
  ImGuiPopupFlags arg2 ;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImGuiPopupFlags)jarg2; 
  ImGui::OpenPopup(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPopup__SWIG_3(unsigned int jarg1) {
  ImGuiID arg1 ;
  
  arg1 = (ImGuiID)jarg1; 
  ImGui::OpenPopup(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPopupOnItemClick__SWIG_0(char * jarg1, int jarg2) {
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiPopupFlags)jarg2; 
  ImGui::OpenPopupOnItemClick((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPopupOnItemClick__SWIG_1(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::OpenPopupOnItemClick((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_OpenPopupOnItemClick__SWIG_2() {
  ImGui::OpenPopupOnItemClick();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CloseCurrentPopup() {
  ImGui::CloseCurrentPopup();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextItem__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiPopupFlags)jarg2; 
  result = (bool)ImGui::BeginPopupContextItem((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextItem__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginPopupContextItem((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextItem__SWIG_2() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginPopupContextItem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextWindow__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiPopupFlags)jarg2; 
  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextWindow__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginPopupContextWindow((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextWindow__SWIG_2() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginPopupContextWindow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextVoid__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiPopupFlags)jarg2; 
  result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextVoid__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginPopupContextVoid((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginPopupContextVoid__SWIG_2() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginPopupContextVoid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsPopupOpen__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiPopupFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiPopupFlags)jarg2; 
  result = (bool)ImGui::IsPopupOpen((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsPopupOpen__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::IsPopupOpen((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTable__SWIG_0(char * jarg1, int jarg2, int jarg3, void * jarg4, float jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiTableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  float arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ImGuiTableFlags)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (float)jarg5; 
  result = (bool)ImGui::BeginTable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTable__SWIG_1(char * jarg1, int jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiTableFlags arg3 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ImGuiTableFlags)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::BeginTable((char const *)arg1,arg2,arg3,(ImVec2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTable__SWIG_2(char * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  ImGuiTableFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ImGuiTableFlags)jarg3; 
  result = (bool)ImGui::BeginTable((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTable__SWIG_3(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ImGui::BeginTable((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndTable() {
  ImGui::EndTable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableNextRow__SWIG_0(int jarg1, float jarg2) {
  ImGuiTableRowFlags arg1 ;
  float arg2 ;
  
  arg1 = (ImGuiTableRowFlags)jarg1; 
  arg2 = (float)jarg2; 
  ImGui::TableNextRow(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableNextRow__SWIG_1(int jarg1) {
  ImGuiTableRowFlags arg1 ;
  
  arg1 = (ImGuiTableRowFlags)jarg1; 
  ImGui::TableNextRow(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableNextRow__SWIG_2() {
  ImGui::TableNextRow();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TableNextColumn() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::TableNextColumn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TableSetColumnIndex(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)ImGui::TableSetColumnIndex(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableSetupColumn__SWIG_0(char * jarg1, int jarg2, float jarg3, unsigned int jarg4) {
  char *arg1 = (char *) 0 ;
  ImGuiTableColumnFlags arg2 ;
  float arg3 ;
  ImGuiID arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTableColumnFlags)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImGuiID)jarg4; 
  ImGui::TableSetupColumn((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableSetupColumn__SWIG_1(char * jarg1, int jarg2, float jarg3) {
  char *arg1 = (char *) 0 ;
  ImGuiTableColumnFlags arg2 ;
  float arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTableColumnFlags)jarg2; 
  arg3 = (float)jarg3; 
  ImGui::TableSetupColumn((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableSetupColumn__SWIG_2(char * jarg1, int jarg2) {
  char *arg1 = (char *) 0 ;
  ImGuiTableColumnFlags arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTableColumnFlags)jarg2; 
  ImGui::TableSetupColumn((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableSetupColumn__SWIG_3(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::TableSetupColumn((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableSetupScrollFreeze(int jarg1, int jarg2) {
  int arg1 ;
  int arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  ImGui::TableSetupScrollFreeze(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableHeader(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::TableHeader((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableHeadersRow() {
  ImGui::TableHeadersRow();
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableAngledHeadersRow() {
  ImGui::TableAngledHeadersRow();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TableGetSortSpecs() {
  void * jresult ;
  ImGuiTableSortSpecs *result = 0 ;
  
  result = (ImGuiTableSortSpecs *)ImGui::TableGetSortSpecs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TableGetColumnCount() {
  int jresult ;
  int result;
  
  result = (int)ImGui::TableGetColumnCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TableGetColumnIndex() {
  int jresult ;
  int result;
  
  result = (int)ImGui::TableGetColumnIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TableGetRowIndex() {
  int jresult ;
  int result;
  
  result = (int)ImGui::TableGetRowIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TableGetColumnName__SWIG_0(int jarg1) {
  char * jresult ;
  int arg1 ;
  char *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (char *)ImGui::TableGetColumnName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TableGetColumnName__SWIG_1() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ImGui::TableGetColumnName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TableGetColumnFlags__SWIG_0(int jarg1) {
  int jresult ;
  int arg1 ;
  ImGuiTableColumnFlags result;
  
  arg1 = (int)jarg1; 
  result = (ImGuiTableColumnFlags)ImGui::TableGetColumnFlags(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TableGetColumnFlags__SWIG_1() {
  int jresult ;
  ImGuiTableColumnFlags result;
  
  result = (ImGuiTableColumnFlags)ImGui::TableGetColumnFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableSetColumnEnabled(int jarg1, unsigned int jarg2) {
  int arg1 ;
  bool arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = jarg2 ? true : false; 
  ImGui::TableSetColumnEnabled(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableSetBgColor__SWIG_0(int jarg1, unsigned int jarg2, int jarg3) {
  ImGuiTableBgTarget arg1 ;
  ImU32 arg2 ;
  int arg3 ;
  
  arg1 = (ImGuiTableBgTarget)jarg1; 
  arg2 = (ImU32)jarg2; 
  arg3 = (int)jarg3; 
  ImGui::TableSetBgColor(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_TableSetBgColor__SWIG_1(int jarg1, unsigned int jarg2) {
  ImGuiTableBgTarget arg1 ;
  ImU32 arg2 ;
  
  arg1 = (ImGuiTableBgTarget)jarg1; 
  arg2 = (ImU32)jarg2; 
  ImGui::TableSetBgColor(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Columns__SWIG_0(int jarg1, char * jarg2, unsigned int jarg3) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  ImGui::Columns(arg1,(char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Columns__SWIG_1(int jarg1, char * jarg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  ImGui::Columns(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Columns__SWIG_2(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ImGui::Columns(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Columns__SWIG_3() {
  ImGui::Columns();
}


SWIGEXPORT void SWIGSTDCALL CSharp_NextColumn() {
  ImGui::NextColumn();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetColumnIndex() {
  int jresult ;
  int result;
  
  result = (int)ImGui::GetColumnIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetColumnWidth__SWIG_0(int jarg1) {
  float jresult ;
  int arg1 ;
  float result;
  
  arg1 = (int)jarg1; 
  result = (float)ImGui::GetColumnWidth(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetColumnWidth__SWIG_1() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetColumnWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetColumnWidth(int jarg1, float jarg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  ImGui::SetColumnWidth(arg1,arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetColumnOffset__SWIG_0(int jarg1) {
  float jresult ;
  int arg1 ;
  float result;
  
  arg1 = (int)jarg1; 
  result = (float)ImGui::GetColumnOffset(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetColumnOffset__SWIG_1() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetColumnOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetColumnOffset(int jarg1, float jarg2) {
  int arg1 ;
  float arg2 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  ImGui::SetColumnOffset(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetColumnsCount() {
  int jresult ;
  int result;
  
  result = (int)ImGui::GetColumnsCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTabBar__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiTabBarFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTabBarFlags)jarg2; 
  result = (bool)ImGui::BeginTabBar((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTabBar__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginTabBar((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndTabBar() {
  ImGui::EndTabBar();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTabItem__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTabItemFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (ImGuiTabItemFlags)jarg3; 
  result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTabItem__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)ImGui::BeginTabItem((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginTabItem__SWIG_2(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::BeginTabItem((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndTabItem() {
  ImGui::EndTabItem();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TabItemButton__SWIG_0(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiTabItemFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTabItemFlags)jarg2; 
  result = (bool)ImGui::TabItemButton((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TabItemButton__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::TabItemButton((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetTabItemClosed(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::SetTabItemClosed((char const *)arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DockSpace__SWIG_0(unsigned int jarg1, void * jarg2, int jarg3, void * jarg4) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDockNodeFlags arg3 ;
  ImGuiWindowClass *arg4 = (ImGuiWindowClass *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiDockNodeFlags)jarg3; 
  arg4 = (ImGuiWindowClass *)jarg4; 
  result = (ImGuiID)ImGui::DockSpace(arg1,(ImVec2 const &)*arg2,arg3,(ImGuiWindowClass const *)arg4);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DockSpace__SWIG_1(unsigned int jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiDockNodeFlags arg3 ;
  ImGuiID result;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiDockNodeFlags)jarg3; 
  result = (ImGuiID)ImGui::DockSpace(arg1,(ImVec2 const &)*arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DockSpace__SWIG_2(unsigned int jarg1, void * jarg2) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (ImGuiID)ImGui::DockSpace(arg1,(ImVec2 const &)*arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DockSpace__SWIG_3(unsigned int jarg1) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImGuiID result;
  
  arg1 = (ImGuiID)jarg1; 
  result = (ImGuiID)ImGui::DockSpace(arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DockSpaceOverViewport__SWIG_0(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  ImGuiWindowClass *arg3 = (ImGuiWindowClass *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImGuiDockNodeFlags)jarg2; 
  arg3 = (ImGuiWindowClass *)jarg3; 
  result = (ImGuiID)ImGui::DockSpaceOverViewport((ImGuiViewport const *)arg1,arg2,(ImGuiWindowClass const *)arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DockSpaceOverViewport__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  ImGuiID result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImGuiDockNodeFlags)jarg2; 
  result = (ImGuiID)ImGui::DockSpaceOverViewport((ImGuiViewport const *)arg1,arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DockSpaceOverViewport__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImGuiID)ImGui::DockSpaceOverViewport((ImGuiViewport const *)arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DockSpaceOverViewport__SWIG_3() {
  unsigned int jresult ;
  ImGuiID result;
  
  result = (ImGuiID)ImGui::DockSpaceOverViewport();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowDockID__SWIG_0(unsigned int jarg1, int jarg2) {
  ImGuiID arg1 ;
  ImGuiCond arg2 ;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImGuiCond)jarg2; 
  ImGui::SetNextWindowDockID(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowDockID__SWIG_1(unsigned int jarg1) {
  ImGuiID arg1 ;
  
  arg1 = (ImGuiID)jarg1; 
  ImGui::SetNextWindowDockID(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextWindowClass(void * jarg1) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  ImGui::SetNextWindowClass((ImGuiWindowClass const *)arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetWindowDockID() {
  unsigned int jresult ;
  ImGuiID result;
  
  result = (ImGuiID)ImGui::GetWindowDockID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsWindowDocked() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsWindowDocked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogToTTY__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ImGui::LogToTTY(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogToTTY__SWIG_1() {
  ImGui::LogToTTY();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogToFile__SWIG_0(int jarg1, char * jarg2) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  ImGui::LogToFile(arg1,(char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogToFile__SWIG_1(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ImGui::LogToFile(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogToFile__SWIG_2() {
  ImGui::LogToFile();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogToClipboard__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ImGui::LogToClipboard(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogToClipboard__SWIG_1() {
  ImGui::LogToClipboard();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogFinish() {
  ImGui::LogFinish();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogButtons() {
  ImGui::LogButtons();
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogText(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::LogText((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LogTextV(char * jarg1, void * jarg2) {
  char *arg1 = (char *) 0 ;
  va_list arg2 ;
  va_list *argp2 ;
  
  arg1 = (char *)jarg1; 
  argp2 = (va_list *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg2 = *argp2; 
  ImGui::LogTextV((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginDragDropSource__SWIG_0(int jarg1) {
  unsigned int jresult ;
  ImGuiDragDropFlags arg1 ;
  bool result;
  
  arg1 = (ImGuiDragDropFlags)jarg1; 
  result = (bool)ImGui::BeginDragDropSource(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginDragDropSource__SWIG_1() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginDragDropSource();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetDragDropPayload__SWIG_0(char * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  ImGuiCond arg4 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (ImGuiCond)jarg4; 
  result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,SWIG_STD_MOVE(arg3),arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SetDragDropPayload__SWIG_1(char * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (bool)ImGui::SetDragDropPayload((char const *)arg1,(void const *)arg2,SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndDragDropSource() {
  ImGui::EndDragDropSource();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginDragDropTarget() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::BeginDragDropTarget();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDragDropPayload__SWIG_0(char * jarg1, int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiDragDropFlags arg2 ;
  ImGuiPayload *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiDragDropFlags)jarg2; 
  result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AcceptDragDropPayload__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiPayload *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ImGuiPayload *)ImGui::AcceptDragDropPayload((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndDragDropTarget() {
  ImGui::EndDragDropTarget();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetDragDropPayload() {
  void * jresult ;
  ImGuiPayload *result = 0 ;
  
  result = (ImGuiPayload *)ImGui::GetDragDropPayload();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BeginDisabled__SWIG_0(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::BeginDisabled(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BeginDisabled__SWIG_1() {
  ImGui::BeginDisabled();
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndDisabled() {
  ImGui::EndDisabled();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushClipRect(void * jarg1, void * jarg2, unsigned int jarg3) {
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  ImGui::PushClipRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopClipRect() {
  ImGui::PopClipRect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetItemDefaultFocus() {
  ImGui::SetItemDefaultFocus();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetKeyboardFocusHere__SWIG_0(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  ImGui::SetKeyboardFocusHere(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetKeyboardFocusHere__SWIG_1() {
  ImGui::SetKeyboardFocusHere();
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextItemAllowOverlap() {
  ImGui::SetNextItemAllowOverlap();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemHovered__SWIG_0(int jarg1) {
  unsigned int jresult ;
  ImGuiHoveredFlags arg1 ;
  bool result;
  
  arg1 = (ImGuiHoveredFlags)jarg1; 
  result = (bool)ImGui::IsItemHovered(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemHovered__SWIG_1() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemHovered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemActive() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemFocused() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemFocused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemClicked__SWIG_0(int jarg1) {
  unsigned int jresult ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)ImGui::IsItemClicked(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemClicked__SWIG_1() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemClicked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemVisible() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemEdited() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemEdited();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemActivated() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemActivated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemDeactivated() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemDeactivated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemDeactivatedAfterEdit() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemDeactivatedAfterEdit();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsItemToggledOpen() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsItemToggledOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsAnyItemHovered() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsAnyItemHovered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsAnyItemActive() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsAnyItemActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsAnyItemFocused() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsAnyItemFocused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_GetItemID() {
  unsigned int jresult ;
  ImGuiID result;
  
  result = (ImGuiID)ImGui::GetItemID();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetItemRectMin() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetItemRectMin();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetItemRectMax() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetItemRectMax();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetItemRectSize() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetItemRectSize();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMainViewport() {
  void * jresult ;
  ImGuiViewport *result = 0 ;
  
  result = (ImGuiViewport *)ImGui::GetMainViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetBackgroundDrawList__SWIG_0() {
  void * jresult ;
  ImDrawList *result = 0 ;
  
  result = (ImDrawList *)ImGui::GetBackgroundDrawList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetForegroundDrawList__SWIG_0() {
  void * jresult ;
  ImDrawList *result = 0 ;
  
  result = (ImDrawList *)ImGui::GetForegroundDrawList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetBackgroundDrawList__SWIG_1(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImDrawList *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImDrawList *)ImGui::GetBackgroundDrawList(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetForegroundDrawList__SWIG_1(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImDrawList *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImDrawList *)ImGui::GetForegroundDrawList(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsRectVisible__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ImVec2 *arg1 = 0 ;
  bool result;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsRectVisible__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::IsRectVisible((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_GetTime() {
  double jresult ;
  double result;
  
  result = (double)ImGui::GetTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetFrameCount() {
  int jresult ;
  int result;
  
  result = (int)ImGui::GetFrameCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetDrawListSharedData() {
  void * jresult ;
  ImDrawListSharedData *result = 0 ;
  
  result = (ImDrawListSharedData *)ImGui::GetDrawListSharedData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetStyleColorName(int jarg1) {
  char * jresult ;
  ImGuiCol arg1 ;
  char *result = 0 ;
  
  arg1 = (ImGuiCol)jarg1; 
  result = (char *)ImGui::GetStyleColorName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetStateStorage(void * jarg1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  ImGui::SetStateStorage(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetStateStorage() {
  void * jresult ;
  ImGuiStorage *result = 0 ;
  
  result = (ImGuiStorage *)ImGui::GetStateStorage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalcTextSize__SWIG_0(char * jarg1, char * jarg2, unsigned int jarg3, float jarg4) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  float arg4 ;
  ImVec2 result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3,arg4);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalcTextSize__SWIG_1(char * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  ImVec2 result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2,arg3);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalcTextSize__SWIG_2(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImVec2 result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ImGui::CalcTextSize((char const *)arg1,(char const *)arg2);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CalcTextSize__SWIG_3(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 result;
  
  arg1 = (char *)jarg1; 
  result = ImGui::CalcTextSize((char const *)arg1);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ColorConvertU32ToFloat4(unsigned int jarg1) {
  void * jresult ;
  ImU32 arg1 ;
  ImVec4 result;
  
  arg1 = (ImU32)jarg1; 
  result = ImGui::ColorConvertU32ToFloat4(arg1);
  jresult = new ImVec4(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColorConvertFloat4ToU32(void * jarg1) {
  unsigned int jresult ;
  ImVec4 *arg1 = 0 ;
  ImU32 result;
  
  arg1 = (ImVec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = (ImU32)ImGui::ColorConvertFloat4ToU32((ImVec4 const &)*arg1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorConvertRGBtoHSV(float jarg1, float jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  arg6 = (float *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  ImGui::ColorConvertRGBtoHSV(arg1,arg2,arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColorConvertHSVtoRGB(float jarg1, float jarg2, float jarg3, void * jarg4, void * jarg5, void * jarg6) {
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  float *arg6 = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  arg5 = (float *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  arg6 = (float *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "float & is null", 0);
    return ;
  } 
  ImGui::ColorConvertHSVtoRGB(arg1,arg2,arg3,*arg4,*arg5,*arg6);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsKeyDown(int jarg1) {
  unsigned int jresult ;
  ImGuiKey arg1 ;
  bool result;
  
  arg1 = (ImGuiKey)jarg1; 
  result = (bool)ImGui::IsKeyDown(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsKeyPressed__SWIG_0(int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ImGuiKey arg1 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ImGuiKey)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)ImGui::IsKeyPressed(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsKeyPressed__SWIG_1(int jarg1) {
  unsigned int jresult ;
  ImGuiKey arg1 ;
  bool result;
  
  arg1 = (ImGuiKey)jarg1; 
  result = (bool)ImGui::IsKeyPressed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsKeyReleased(int jarg1) {
  unsigned int jresult ;
  ImGuiKey arg1 ;
  bool result;
  
  arg1 = (ImGuiKey)jarg1; 
  result = (bool)ImGui::IsKeyReleased(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsKeyChordPressed(int jarg1) {
  unsigned int jresult ;
  ImGuiKeyChord arg1 ;
  bool result;
  
  arg1 = (ImGuiKeyChord)jarg1; 
  result = (bool)ImGui::IsKeyChordPressed(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetKeyPressedAmount(int jarg1, float jarg2, float jarg3) {
  int jresult ;
  ImGuiKey arg1 ;
  float arg2 ;
  float arg3 ;
  int result;
  
  arg1 = (ImGuiKey)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (int)ImGui::GetKeyPressedAmount(arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetKeyName(int jarg1) {
  char * jresult ;
  ImGuiKey arg1 ;
  char *result = 0 ;
  
  arg1 = (ImGuiKey)jarg1; 
  result = (char *)ImGui::GetKeyName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextFrameWantCaptureKeyboard(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::SetNextFrameWantCaptureKeyboard(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseDown(int jarg1) {
  unsigned int jresult ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)ImGui::IsMouseDown(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseClicked__SWIG_0(int jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ImGuiMouseButton arg1 ;
  bool arg2 ;
  bool result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)ImGui::IsMouseClicked(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseClicked__SWIG_1(int jarg1) {
  unsigned int jresult ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)ImGui::IsMouseClicked(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseReleased(int jarg1) {
  unsigned int jresult ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)ImGui::IsMouseReleased(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseDoubleClicked(int jarg1) {
  unsigned int jresult ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)ImGui::IsMouseDoubleClicked(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetMouseClickedCount(int jarg1) {
  int jresult ;
  ImGuiMouseButton arg1 ;
  int result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (int)ImGui::GetMouseClickedCount(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseHoveringRect__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseHoveringRect__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ImVec2 *arg1 = 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::IsMouseHoveringRect((ImVec2 const &)*arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMousePosValid__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  ImVec2 *arg1 = (ImVec2 *) 0 ;
  bool result;
  
  arg1 = (ImVec2 *)jarg1; 
  result = (bool)ImGui::IsMousePosValid((ImVec2 const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMousePosValid__SWIG_1() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsMousePosValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsAnyMouseDown() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ImGui::IsAnyMouseDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMousePos() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetMousePos();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMousePosOnOpeningCurrentPopup() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetMousePosOnOpeningCurrentPopup();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseDragging__SWIG_0(int jarg1, float jarg2) {
  unsigned int jresult ;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  bool result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  arg2 = (float)jarg2; 
  result = (bool)ImGui::IsMouseDragging(arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsMouseDragging__SWIG_1(int jarg1) {
  unsigned int jresult ;
  ImGuiMouseButton arg1 ;
  bool result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  result = (bool)ImGui::IsMouseDragging(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMouseDragDelta__SWIG_0(int jarg1, float jarg2) {
  void * jresult ;
  ImGuiMouseButton arg1 ;
  float arg2 ;
  ImVec2 result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  arg2 = (float)jarg2; 
  result = ImGui::GetMouseDragDelta(arg1,arg2);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMouseDragDelta__SWIG_1(int jarg1) {
  void * jresult ;
  ImGuiMouseButton arg1 ;
  ImVec2 result;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  result = ImGui::GetMouseDragDelta(arg1);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetMouseDragDelta__SWIG_2() {
  void * jresult ;
  ImVec2 result;
  
  result = ImGui::GetMouseDragDelta();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResetMouseDragDelta__SWIG_0(int jarg1) {
  ImGuiMouseButton arg1 ;
  
  arg1 = (ImGuiMouseButton)jarg1; 
  ImGui::ResetMouseDragDelta(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResetMouseDragDelta__SWIG_1() {
  ImGui::ResetMouseDragDelta();
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetMouseCursor() {
  int jresult ;
  ImGuiMouseCursor result;
  
  result = (ImGuiMouseCursor)ImGui::GetMouseCursor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetMouseCursor(int jarg1) {
  ImGuiMouseCursor arg1 ;
  
  arg1 = (ImGuiMouseCursor)jarg1; 
  ImGui::SetMouseCursor(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetNextFrameWantCaptureMouse(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::SetNextFrameWantCaptureMouse(arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetClipboardText() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ImGui::GetClipboardText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetClipboardText(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::SetClipboardText((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadIniSettingsFromDisk(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::LoadIniSettingsFromDisk((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadIniSettingsFromMemory__SWIG_0(char * jarg1, unsigned int jarg2) {
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  ImGui::LoadIniSettingsFromMemory((char const *)arg1,SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_LoadIniSettingsFromMemory__SWIG_1(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::LoadIniSettingsFromMemory((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SaveIniSettingsToDisk(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::SaveIniSettingsToDisk((char const *)arg1);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SaveIniSettingsToMemory__SWIG_0(void * jarg1) {
  char * jresult ;
  size_t *arg1 = (size_t *) 0 ;
  char *result = 0 ;
  
  arg1 = (size_t *)jarg1; 
  result = (char *)ImGui::SaveIniSettingsToMemory(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SaveIniSettingsToMemory__SWIG_1() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)ImGui::SaveIniSettingsToMemory();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugTextEncoding(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  ImGui::DebugTextEncoding((char const *)arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugCheckVersionAndDataLayout(char * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t arg5 ;
  size_t arg6 ;
  size_t arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (size_t)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  arg5 = (size_t)jarg5; 
  arg6 = (size_t)jarg6; 
  arg7 = (size_t)jarg7; 
  result = (bool)ImGui::DebugCheckVersionAndDataLayout((char const *)arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6),SWIG_STD_MOVE(arg7));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAllocatorFunctions__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  ImGuiMemAllocFunc arg1 = (ImGuiMemAllocFunc) 0 ;
  ImGuiMemFreeFunc arg2 = (ImGuiMemFreeFunc) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (ImGuiMemAllocFunc)jarg1; 
  arg2 = (ImGuiMemFreeFunc)jarg2; 
  arg3 = (void *)jarg3; 
  ImGui::SetAllocatorFunctions(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetAllocatorFunctions__SWIG_1(void * jarg1, void * jarg2) {
  ImGuiMemAllocFunc arg1 = (ImGuiMemAllocFunc) 0 ;
  ImGuiMemFreeFunc arg2 = (ImGuiMemFreeFunc) 0 ;
  
  arg1 = (ImGuiMemAllocFunc)jarg1; 
  arg2 = (ImGuiMemFreeFunc)jarg2; 
  ImGui::SetAllocatorFunctions(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_GetAllocatorFunctions(void * jarg1, void * jarg2, void * jarg3) {
  ImGuiMemAllocFunc *arg1 = (ImGuiMemAllocFunc *) 0 ;
  ImGuiMemFreeFunc *arg2 = (ImGuiMemFreeFunc *) 0 ;
  void **arg3 = (void **) 0 ;
  
  arg1 = (ImGuiMemAllocFunc *)jarg1; 
  arg2 = (ImGuiMemFreeFunc *)jarg2; 
  arg3 = (void **)jarg3; 
  ImGui::GetAllocatorFunctions(arg1,arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MemAlloc(unsigned int jarg1) {
  void * jresult ;
  size_t arg1 ;
  void *result = 0 ;
  
  arg1 = (size_t)jarg1; 
  result = (void *)ImGui::MemAlloc(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MemFree(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  ImGui::MemFree(arg1);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetPlatformIO() {
  void * jresult ;
  ImGuiPlatformIO *result = 0 ;
  
  result = (ImGuiPlatformIO *) &ImGui::GetPlatformIO();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UpdatePlatformWindows() {
  ImGui::UpdatePlatformWindows();
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderPlatformWindowsDefault__SWIG_0(void * jarg1, void * jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  arg2 = (void *)jarg2; 
  ImGui::RenderPlatformWindowsDefault(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderPlatformWindowsDefault__SWIG_1(void * jarg1) {
  void *arg1 = (void *) 0 ;
  
  arg1 = (void *)jarg1; 
  ImGui::RenderPlatformWindowsDefault(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderPlatformWindowsDefault__SWIG_2() {
  ImGui::RenderPlatformWindowsDefault();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DestroyPlatformWindows() {
  ImGui::DestroyPlatformWindows();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindViewportByID(unsigned int jarg1) {
  void * jresult ;
  ImGuiID arg1 ;
  ImGuiViewport *result = 0 ;
  
  arg1 = (ImGuiID)jarg1; 
  result = (ImGuiViewport *)ImGui::FindViewportByID(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FindViewportByPlatformHandle(void * jarg1) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  ImGuiViewport *result = 0 ;
  
  arg1 = (void *)jarg1; 
  result = (ImGuiViewport *)ImGui::FindViewportByPlatformHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IMGUI_PAYLOAD_TYPE_COLOR_3F_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("_COL3F");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_IMGUI_PAYLOAD_TYPE_COLOR_4F_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)("_COL4F");
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImNewWrapper() {
  void * jresult ;
  ImNewWrapper *result = 0 ;
  
  result = (ImNewWrapper *)new ImNewWrapper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImNewWrapper(void * jarg1) {
  ImNewWrapper *arg1 = (ImNewWrapper *) 0 ;
  
  arg1 = (ImNewWrapper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_Alpha_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Alpha = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_Alpha_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->Alpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_DisabledAlpha_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DisabledAlpha = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_DisabledAlpha_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->DisabledAlpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_WindowPadding_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->WindowPadding = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_WindowPadding_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->WindowPadding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_WindowRounding_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->WindowRounding = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_WindowRounding_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->WindowRounding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_WindowBorderSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->WindowBorderSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_WindowBorderSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->WindowBorderSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_WindowMinSize_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->WindowMinSize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_WindowMinSize_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->WindowMinSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_WindowTitleAlign_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->WindowTitleAlign = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_WindowTitleAlign_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->WindowTitleAlign);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_WindowMenuButtonPosition_set(void * jarg1, int jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImGuiDir)jarg2; 
  if (arg1) (arg1)->WindowMenuButtonPosition = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiStyle_WindowMenuButtonPosition_get(void * jarg1) {
  int jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImGuiDir) ((arg1)->WindowMenuButtonPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ChildRounding_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ChildRounding = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_ChildRounding_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->ChildRounding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ChildBorderSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ChildBorderSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_ChildBorderSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->ChildBorderSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_PopupRounding_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PopupRounding = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_PopupRounding_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->PopupRounding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_PopupBorderSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PopupBorderSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_PopupBorderSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->PopupBorderSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_FramePadding_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->FramePadding = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_FramePadding_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->FramePadding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_FrameRounding_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FrameRounding = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_FrameRounding_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->FrameRounding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_FrameBorderSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FrameBorderSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_FrameBorderSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->FrameBorderSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ItemSpacing_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->ItemSpacing = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_ItemSpacing_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->ItemSpacing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ItemInnerSpacing_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->ItemInnerSpacing = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_ItemInnerSpacing_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->ItemInnerSpacing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_CellPadding_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->CellPadding = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_CellPadding_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->CellPadding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_TouchExtraPadding_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->TouchExtraPadding = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_TouchExtraPadding_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->TouchExtraPadding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_IndentSpacing_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->IndentSpacing = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_IndentSpacing_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->IndentSpacing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ColumnsMinSpacing_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ColumnsMinSpacing = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_ColumnsMinSpacing_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->ColumnsMinSpacing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ScrollbarSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScrollbarSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_ScrollbarSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->ScrollbarSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ScrollbarRounding_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScrollbarRounding = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_ScrollbarRounding_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->ScrollbarRounding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_GrabMinSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GrabMinSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_GrabMinSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->GrabMinSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_GrabRounding_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GrabRounding = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_GrabRounding_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->GrabRounding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_LogSliderDeadzone_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->LogSliderDeadzone = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_LogSliderDeadzone_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->LogSliderDeadzone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_TabRounding_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TabRounding = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_TabRounding_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->TabRounding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_TabBorderSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TabBorderSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_TabBorderSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->TabBorderSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_TabMinWidthForCloseButton_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TabMinWidthForCloseButton = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_TabMinWidthForCloseButton_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->TabMinWidthForCloseButton);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_TabBarBorderSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TabBarBorderSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_TabBarBorderSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->TabBarBorderSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_TableAngledHeadersAngle_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TableAngledHeadersAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_TableAngledHeadersAngle_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->TableAngledHeadersAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ColorButtonPosition_set(void * jarg1, int jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImGuiDir)jarg2; 
  if (arg1) (arg1)->ColorButtonPosition = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiStyle_ColorButtonPosition_get(void * jarg1) {
  int jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiDir result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImGuiDir) ((arg1)->ColorButtonPosition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ButtonTextAlign_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->ButtonTextAlign = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_ButtonTextAlign_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->ButtonTextAlign);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_SelectableTextAlign_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->SelectableTextAlign = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_SelectableTextAlign_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->SelectableTextAlign);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_SeparatorTextBorderSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SeparatorTextBorderSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_SeparatorTextBorderSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->SeparatorTextBorderSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_SeparatorTextAlign_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->SeparatorTextAlign = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_SeparatorTextAlign_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->SeparatorTextAlign);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_SeparatorTextPadding_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->SeparatorTextPadding = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_SeparatorTextPadding_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->SeparatorTextPadding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_DisplayWindowPadding_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->DisplayWindowPadding = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_DisplayWindowPadding_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplayWindowPadding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_DisplaySafeAreaPadding_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->DisplaySafeAreaPadding = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_DisplaySafeAreaPadding_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplaySafeAreaPadding);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_DockingSeparatorSize_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DockingSeparatorSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_DockingSeparatorSize_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->DockingSeparatorSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_MouseCursorScale_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseCursorScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_MouseCursorScale_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->MouseCursorScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_AntiAliasedLines_set(void * jarg1, unsigned int jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AntiAliasedLines = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiStyle_AntiAliasedLines_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (bool) ((arg1)->AntiAliasedLines);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_AntiAliasedLinesUseTex_set(void * jarg1, unsigned int jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AntiAliasedLinesUseTex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiStyle_AntiAliasedLinesUseTex_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (bool) ((arg1)->AntiAliasedLinesUseTex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_AntiAliasedFill_set(void * jarg1, unsigned int jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AntiAliasedFill = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiStyle_AntiAliasedFill_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  bool result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (bool) ((arg1)->AntiAliasedFill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_CurveTessellationTol_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CurveTessellationTol = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_CurveTessellationTol_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->CurveTessellationTol);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_CircleTessellationMaxError_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CircleTessellationMaxError = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_CircleTessellationMaxError_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->CircleTessellationMaxError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_Colors_set(void * jarg1, void * jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) (ImVec4 *)0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImVec4 *)jarg2; 
  {
    size_t ii;
    ImVec4 *b = (ImVec4 *) arg1->Colors;
    for (ii = 0; ii < (size_t)ImGuiCol_COUNT; ii++) b[ii] = *((ImVec4 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStyle_Colors_get(void * jarg1) {
  void * jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImVec4 *result = 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImVec4 *)(ImVec4 *) ((arg1)->Colors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_HoverStationaryDelay_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HoverStationaryDelay = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_HoverStationaryDelay_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->HoverStationaryDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_HoverDelayShort_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HoverDelayShort = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_HoverDelayShort_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->HoverDelayShort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_HoverDelayNormal_set(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HoverDelayNormal = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStyle_HoverDelayNormal_get(void * jarg1) {
  float jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (float) ((arg1)->HoverDelayNormal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_HoverFlagsForTooltipMouse_set(void * jarg1, int jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiHoveredFlags arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImGuiHoveredFlags)jarg2; 
  if (arg1) (arg1)->HoverFlagsForTooltipMouse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiStyle_HoverFlagsForTooltipMouse_get(void * jarg1) {
  int jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiHoveredFlags result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImGuiHoveredFlags) ((arg1)->HoverFlagsForTooltipMouse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_HoverFlagsForTooltipNav_set(void * jarg1, int jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiHoveredFlags arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (ImGuiHoveredFlags)jarg2; 
  if (arg1) (arg1)->HoverFlagsForTooltipNav = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiStyle_HoverFlagsForTooltipNav_get(void * jarg1) {
  int jresult ;
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  ImGuiHoveredFlags result;
  
  arg1 = (ImGuiStyle *)jarg1; 
  result = (ImGuiHoveredFlags) ((arg1)->HoverFlagsForTooltipNav);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiStyle() {
  void * jresult ;
  ImGuiStyle *result = 0 ;
  
  result = (ImGuiStyle *)new ImGuiStyle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStyle_ScaleAllSizes(void * jarg1, float jarg2) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->ScaleAllSizes(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiStyle(void * jarg1) {
  ImGuiStyle *arg1 = (ImGuiStyle *) 0 ;
  
  arg1 = (ImGuiStyle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiKeyData_Down_set(void * jarg1, unsigned int jarg2) {
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Down = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiKeyData_Down_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  bool result;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  result = (bool) ((arg1)->Down);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiKeyData_DownDuration_set(void * jarg1, float jarg2) {
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DownDuration = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiKeyData_DownDuration_get(void * jarg1) {
  float jresult ;
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  float result;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  result = (float) ((arg1)->DownDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiKeyData_DownDurationPrev_set(void * jarg1, float jarg2) {
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DownDurationPrev = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiKeyData_DownDurationPrev_get(void * jarg1) {
  float jresult ;
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  float result;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  result = (float) ((arg1)->DownDurationPrev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiKeyData_AnalogValue_set(void * jarg1, float jarg2) {
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AnalogValue = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiKeyData_AnalogValue_get(void * jarg1) {
  float jresult ;
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  float result;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  result = (float) ((arg1)->AnalogValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiKeyData() {
  void * jresult ;
  ImGuiKeyData *result = 0 ;
  
  result = (ImGuiKeyData *)new ImGuiKeyData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiKeyData(void * jarg1) {
  ImGuiKeyData *arg1 = (ImGuiKeyData *) 0 ;
  
  arg1 = (ImGuiKeyData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigFlags_set(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiConfigFlags arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiConfigFlags)jarg2; 
  if (arg1) (arg1)->ConfigFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiIO_ConfigFlags_get(void * jarg1) {
  int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiConfigFlags result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImGuiConfigFlags) ((arg1)->ConfigFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_BackendFlags_set(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiBackendFlags arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiBackendFlags)jarg2; 
  if (arg1) (arg1)->BackendFlags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiIO_BackendFlags_get(void * jarg1) {
  int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiBackendFlags result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImGuiBackendFlags) ((arg1)->BackendFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_DisplaySize_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->DisplaySize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_DisplaySize_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplaySize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_DeltaTime_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DeltaTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_DeltaTime_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->DeltaTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_IniSavingRate_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->IniSavingRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_IniSavingRate_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->IniSavingRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_IniFilename_set(void * jarg1, char * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->IniFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->IniFilename, (const char *)arg2);
    } else {
      arg1->IniFilename = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiIO_IniFilename_get(void * jarg1) {
  char * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (char *) ((arg1)->IniFilename);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_LogFilename_set(void * jarg1, char * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->LogFilename = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->LogFilename, (const char *)arg2);
    } else {
      arg1->LogFilename = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiIO_LogFilename_get(void * jarg1) {
  char * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (char *) ((arg1)->LogFilename);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_UserData_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->UserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_UserData_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (void *) ((arg1)->UserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_Fonts_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImFontAtlas *)jarg2; 
  if (arg1) (arg1)->Fonts = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_Fonts_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFontAtlas *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImFontAtlas *) ((arg1)->Fonts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_FontGlobalScale_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FontGlobalScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_FontGlobalScale_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->FontGlobalScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_FontAllowUserScaling_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FontAllowUserScaling = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_FontAllowUserScaling_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->FontAllowUserScaling);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_FontDefault_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  if (arg1) (arg1)->FontDefault = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_FontDefault_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImFont *) ((arg1)->FontDefault);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_DisplayFramebufferScale_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->DisplayFramebufferScale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_DisplayFramebufferScale_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplayFramebufferScale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDockingNoSplit_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDockingNoSplit = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDockingNoSplit_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDockingNoSplit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDockingWithShift_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDockingWithShift = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDockingWithShift_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDockingWithShift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDockingAlwaysTabBar_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDockingAlwaysTabBar = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDockingAlwaysTabBar_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDockingAlwaysTabBar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDockingTransparentPayload_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDockingTransparentPayload = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDockingTransparentPayload_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDockingTransparentPayload);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigViewportsNoAutoMerge_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigViewportsNoAutoMerge = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigViewportsNoAutoMerge_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigViewportsNoAutoMerge);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigViewportsNoTaskBarIcon_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigViewportsNoTaskBarIcon = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigViewportsNoTaskBarIcon_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigViewportsNoTaskBarIcon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigViewportsNoDecoration_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigViewportsNoDecoration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigViewportsNoDecoration_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigViewportsNoDecoration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigViewportsNoDefaultParent_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigViewportsNoDefaultParent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigViewportsNoDefaultParent_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigViewportsNoDefaultParent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDrawCursor_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MouseDrawCursor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_MouseDrawCursor_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->MouseDrawCursor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigMacOSXBehaviors_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigMacOSXBehaviors = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigMacOSXBehaviors_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigMacOSXBehaviors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigInputTrickleEventQueue_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigInputTrickleEventQueue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigInputTrickleEventQueue_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigInputTrickleEventQueue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigInputTextCursorBlink_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigInputTextCursorBlink = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigInputTextCursorBlink_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigInputTextCursorBlink);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigInputTextEnterKeepActive_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigInputTextEnterKeepActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigInputTextEnterKeepActive_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigInputTextEnterKeepActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDragClickToInputText_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDragClickToInputText = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDragClickToInputText_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDragClickToInputText);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigWindowsResizeFromEdges_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigWindowsResizeFromEdges = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigWindowsResizeFromEdges_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigWindowsResizeFromEdges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigWindowsMoveFromTitleBarOnly = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigWindowsMoveFromTitleBarOnly_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigWindowsMoveFromTitleBarOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigMemoryCompactTimer_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ConfigMemoryCompactTimer = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_ConfigMemoryCompactTimer_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->ConfigMemoryCompactTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDoubleClickTime_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseDoubleClickTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_MouseDoubleClickTime_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->MouseDoubleClickTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDoubleClickMaxDist_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseDoubleClickMaxDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_MouseDoubleClickMaxDist_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->MouseDoubleClickMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDragThreshold_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseDragThreshold = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_MouseDragThreshold_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->MouseDragThreshold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeyRepeatDelay_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->KeyRepeatDelay = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_KeyRepeatDelay_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->KeyRepeatDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeyRepeatRate_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->KeyRepeatRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_KeyRepeatRate_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->KeyRepeatRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDebugBeginReturnValueOnce_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDebugBeginReturnValueOnce = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDebugBeginReturnValueOnce_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDebugBeginReturnValueOnce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDebugBeginReturnValueLoop_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDebugBeginReturnValueLoop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDebugBeginReturnValueLoop_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDebugBeginReturnValueLoop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDebugIgnoreFocusLoss_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDebugIgnoreFocusLoss = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDebugIgnoreFocusLoss_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDebugIgnoreFocusLoss);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ConfigDebugIniSettings_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ConfigDebugIniSettings = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_ConfigDebugIniSettings_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->ConfigDebugIniSettings);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_BackendPlatformName_set(void * jarg1, char * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->BackendPlatformName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BackendPlatformName, (const char *)arg2);
    } else {
      arg1->BackendPlatformName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiIO_BackendPlatformName_get(void * jarg1) {
  char * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (char *) ((arg1)->BackendPlatformName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_BackendRendererName_set(void * jarg1, char * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->BackendRendererName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->BackendRendererName, (const char *)arg2);
    } else {
      arg1->BackendRendererName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiIO_BackendRendererName_get(void * jarg1) {
  char * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (char *) ((arg1)->BackendRendererName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_BackendPlatformUserData_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->BackendPlatformUserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_BackendPlatformUserData_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (void *) ((arg1)->BackendPlatformUserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_BackendRendererUserData_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->BackendRendererUserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_BackendRendererUserData_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (void *) ((arg1)->BackendRendererUserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_BackendLanguageUserData_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->BackendLanguageUserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_BackendLanguageUserData_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (void *) ((arg1)->BackendLanguageUserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_GetClipboardTextFn_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*arg2)(void *) = (char *(*)(void *)) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (char *(*)(void *))jarg2; 
  if (arg1) (arg1)->GetClipboardTextFn = (char const *(*)(void *))arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_GetClipboardTextFn_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *(*result)(void *) = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (char *(*)(void *)) ((arg1)->GetClipboardTextFn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_SetClipboardTextFn_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(void *,char const *) = (void (*)(void *,char const *)) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (void (*)(void *,char const *))jarg2; 
  if (arg1) (arg1)->SetClipboardTextFn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_SetClipboardTextFn_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(void *,char const *) = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (void (*)(void *,char const *)) ((arg1)->SetClipboardTextFn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ClipboardUserData_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->ClipboardUserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_ClipboardUserData_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (void *) ((arg1)->ClipboardUserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_SetPlatformImeDataFn_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*arg2)(ImGuiViewport *,ImGuiPlatformImeData *) = (void (*)(ImGuiViewport *,ImGuiPlatformImeData *)) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,ImGuiPlatformImeData *))jarg2; 
  if (arg1) (arg1)->SetPlatformImeDataFn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_SetPlatformImeDataFn_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void (*result)(ImGuiViewport *,ImGuiPlatformImeData *) = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,ImGuiPlatformImeData *)) ((arg1)->SetPlatformImeDataFn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_PlatformLocaleDecimalPoint_set(void * jarg1, unsigned short jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->PlatformLocaleDecimalPoint = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImGuiIO_PlatformLocaleDecimalPoint_get(void * jarg1) {
  unsigned short jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImWchar) ((arg1)->PlatformLocaleDecimalPoint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddKeyEvent(void * jarg1, int jarg2, unsigned int jarg3) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKey arg2 ;
  bool arg3 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiKey)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddKeyEvent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddKeyAnalogEvent(void * jarg1, int jarg2, unsigned int jarg3, float jarg4) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKey arg2 ;
  bool arg3 ;
  float arg4 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiKey)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (float)jarg4; 
  (arg1)->AddKeyAnalogEvent(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddMousePosEvent(void * jarg1, float jarg2, float jarg3) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->AddMousePosEvent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddMouseButtonEvent(void * jarg1, int jarg2, unsigned int jarg3) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->AddMouseButtonEvent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddMouseWheelEvent(void * jarg1, float jarg2, float jarg3) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->AddMouseWheelEvent(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddMouseSourceEvent(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiMouseSource arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiMouseSource)jarg2; 
  (arg1)->AddMouseSourceEvent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddMouseViewportEvent(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  (arg1)->AddMouseViewportEvent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddFocusEvent(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->AddFocusEvent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddInputCharacter(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->AddInputCharacter(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddInputCharacterUTF16(void * jarg1, unsigned short jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar16 arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImWchar16)jarg2; 
  (arg1)->AddInputCharacterUTF16(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AddInputCharactersUTF8(void * jarg1, char * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AddInputCharactersUTF8((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_SetKeyEventNativeData__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKey arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiKey)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SetKeyEventNativeData(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_SetKeyEventNativeData__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKey arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiKey)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->SetKeyEventNativeData(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_SetAppAcceptingEvents(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAppAcceptingEvents(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ClearEventsQueue(void * jarg1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  (arg1)->ClearEventsQueue();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ClearInputKeys(void * jarg1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  (arg1)->ClearInputKeys();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ClearInputCharacters(void * jarg1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  (arg1)->ClearInputCharacters();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_WantCaptureMouse_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantCaptureMouse = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_WantCaptureMouse_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->WantCaptureMouse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_WantCaptureKeyboard_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantCaptureKeyboard = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_WantCaptureKeyboard_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->WantCaptureKeyboard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_WantTextInput_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantTextInput = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_WantTextInput_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->WantTextInput);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_WantSetMousePos_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantSetMousePos = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_WantSetMousePos_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->WantSetMousePos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_WantSaveIniSettings_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantSaveIniSettings = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_WantSaveIniSettings_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->WantSaveIniSettings);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_NavActive_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NavActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_NavActive_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->NavActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_NavVisible_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NavVisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_NavVisible_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->NavVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_Framerate_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Framerate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_Framerate_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->Framerate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MetricsRenderVertices_set(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsRenderVertices = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiIO_MetricsRenderVertices_get(void * jarg1) {
  int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (int) ((arg1)->MetricsRenderVertices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MetricsRenderIndices_set(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsRenderIndices = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiIO_MetricsRenderIndices_get(void * jarg1) {
  int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (int) ((arg1)->MetricsRenderIndices);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MetricsRenderWindows_set(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsRenderWindows = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiIO_MetricsRenderWindows_get(void * jarg1) {
  int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (int) ((arg1)->MetricsRenderWindows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MetricsActiveWindows_set(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsActiveWindows = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiIO_MetricsActiveWindows_get(void * jarg1) {
  int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (int) ((arg1)->MetricsActiveWindows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDelta_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->MouseDelta = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDelta_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImVec2 *)& ((arg1)->MouseDelta);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeyMap_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->KeyMap;
    for (ii = 0; ii < (size_t)ImGuiKey_COUNT; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_KeyMap_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  int *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (int *)(int *) ((arg1)->KeyMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeysDown_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->KeysDown;
    for (ii = 0; ii < (size_t)ImGuiKey_COUNT; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_KeysDown_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool *)(bool *) ((arg1)->KeysDown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_NavInputs_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->NavInputs;
    for (ii = 0; ii < (size_t)ImGuiNavInput_COUNT; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_NavInputs_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float *)(float *) ((arg1)->NavInputs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_ImeWindowHandle_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->ImeWindowHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_ImeWindowHandle_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (void *) ((arg1)->ImeWindowHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_Ctx_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiContext *arg2 = (ImGuiContext *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiContext *)jarg2; 
  if (arg1) (arg1)->Ctx = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_Ctx_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiContext *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImGuiContext *) ((arg1)->Ctx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MousePos_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->MousePos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MousePos_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImVec2 *)& ((arg1)->MousePos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDown_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDown;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDown_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseDown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseWheel_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseWheel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_MouseWheel_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->MouseWheel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseWheelH_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MouseWheelH = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_MouseWheelH_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->MouseWheelH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseSource_set(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiMouseSource arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiMouseSource)jarg2; 
  if (arg1) (arg1)->MouseSource = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiIO_MouseSource_get(void * jarg1) {
  int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiMouseSource result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImGuiMouseSource) ((arg1)->MouseSource);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseHoveredViewport_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->MouseHoveredViewport = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_MouseHoveredViewport_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImGuiID) ((arg1)->MouseHoveredViewport);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeyCtrl_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KeyCtrl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_KeyCtrl_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->KeyCtrl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeyShift_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KeyShift = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_KeyShift_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->KeyShift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeyAlt_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KeyAlt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_KeyAlt_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->KeyAlt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeySuper_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KeySuper = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_KeySuper_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->KeySuper);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeyMods_set(void * jarg1, int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKeyChord arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiKeyChord)jarg2; 
  if (arg1) (arg1)->KeyMods = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiIO_KeyMods_get(void * jarg1) {
  int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKeyChord result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImGuiKeyChord) ((arg1)->KeyMods);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_KeysData_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKeyData *arg2 = (ImGuiKeyData *) (ImGuiKeyData *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImGuiKeyData *)jarg2; 
  {
    size_t ii;
    ImGuiKeyData *b = (ImGuiKeyData *) arg1->KeysData;
    for (ii = 0; ii < (size_t)ImGuiKey_KeysData_SIZE; ii++) b[ii] = *((ImGuiKeyData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_KeysData_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImGuiKeyData *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImGuiKeyData *)(ImGuiKeyData *) ((arg1)->KeysData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_WantCaptureMouseUnlessPopupClose_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantCaptureMouseUnlessPopupClose = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_WantCaptureMouseUnlessPopupClose_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->WantCaptureMouseUnlessPopupClose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MousePosPrev_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->MousePosPrev = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MousePosPrev_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImVec2 *)& ((arg1)->MousePosPrev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseClickedPos_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) (ImVec2 *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  {
    size_t ii;
    ImVec2 *b = (ImVec2 *) arg1->MouseClickedPos;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseClickedPos_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseClickedPos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseClickedTime_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  double *arg2 = (double *) (double *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (double *)jarg2; 
  {
    size_t ii;
    double *b = (double *) arg1->MouseClickedTime;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((double *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseClickedTime_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  double *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (double *)(double *) ((arg1)->MouseClickedTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseClicked_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseClicked;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseClicked_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseClicked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDoubleClicked_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDoubleClicked;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDoubleClicked_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseDoubleClicked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseClickedCount_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImU16 *arg2 = (ImU16 *) (ImU16 *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImU16 *)jarg2; 
  {
    size_t ii;
    ImU16 *b = (ImU16 *) arg1->MouseClickedCount;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImU16 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseClickedCount_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImU16 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImU16 *)(ImU16 *) ((arg1)->MouseClickedCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseClickedLastCount_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImU16 *arg2 = (ImU16 *) (ImU16 *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImU16 *)jarg2; 
  {
    size_t ii;
    ImU16 *b = (ImU16 *) arg1->MouseClickedLastCount;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImU16 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseClickedLastCount_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImU16 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImU16 *)(ImU16 *) ((arg1)->MouseClickedLastCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseReleased_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseReleased;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseReleased_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseReleased);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDownOwned_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDownOwned;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDownOwned_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseDownOwned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDownOwnedUnlessPopupClose_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->MouseDownOwnedUnlessPopupClose;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDownOwnedUnlessPopupClose_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool *)(bool *) ((arg1)->MouseDownOwnedUnlessPopupClose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseWheelRequestAxisSwap_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MouseWheelRequestAxisSwap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_MouseWheelRequestAxisSwap_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->MouseWheelRequestAxisSwap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDownDuration_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->MouseDownDuration;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDownDuration_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float *)(float *) ((arg1)->MouseDownDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDownDurationPrev_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->MouseDownDurationPrev;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDownDurationPrev_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float *)(float *) ((arg1)->MouseDownDurationPrev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDragMaxDistanceAbs_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) (ImVec2 *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  {
    size_t ii;
    ImVec2 *b = (ImVec2 *) arg1->MouseDragMaxDistanceAbs;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((ImVec2 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDragMaxDistanceAbs_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImVec2 *)(ImVec2 *) ((arg1)->MouseDragMaxDistanceAbs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_MouseDragMaxDistanceSqr_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->MouseDragMaxDistanceSqr;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_MouseDragMaxDistanceSqr_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float *)(float *) ((arg1)->MouseDragMaxDistanceSqr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_PenPressure_set(void * jarg1, float jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PenPressure = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiIO_PenPressure_get(void * jarg1) {
  float jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  float result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (float) ((arg1)->PenPressure);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AppFocusLost_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AppFocusLost = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_AppFocusLost_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->AppFocusLost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_AppAcceptingEvents_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AppAcceptingEvents = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_AppAcceptingEvents_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->AppAcceptingEvents);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_BackendUsingLegacyKeyArrays_set(void * jarg1, signed char jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImS8 arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImS8)jarg2; 
  if (arg1) (arg1)->BackendUsingLegacyKeyArrays = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ImGuiIO_BackendUsingLegacyKeyArrays_get(void * jarg1) {
  signed char jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImS8 result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImS8) ((arg1)->BackendUsingLegacyKeyArrays);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_BackendUsingLegacyNavInputArray_set(void * jarg1, unsigned int jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->BackendUsingLegacyNavInputArray = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiIO_BackendUsingLegacyNavInputArray_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  bool result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (bool) ((arg1)->BackendUsingLegacyNavInputArray);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_InputQueueSurrogate_set(void * jarg1, unsigned short jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar16 arg2 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImWchar16)jarg2; 
  if (arg1) (arg1)->InputQueueSurrogate = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImGuiIO_InputQueueSurrogate_get(void * jarg1) {
  unsigned short jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImWchar16 result;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImWchar16) ((arg1)->InputQueueSurrogate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiIO_InputQueueCharacters_set(void * jarg1, void * jarg2) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  arg2 = (ImVector< ImWchar > *)jarg2; 
  if (arg1) (arg1)->InputQueueCharacters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiIO_InputQueueCharacters_get(void * jarg1) {
  void * jresult ;
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  ImVector< ImWchar > *result = 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  result = (ImVector< ImWchar > *)& ((arg1)->InputQueueCharacters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiIO() {
  void * jresult ;
  ImGuiIO *result = 0 ;
  
  result = (ImGuiIO *)new ImGuiIO();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiIO(void * jarg1) {
  ImGuiIO *arg1 = (ImGuiIO *) 0 ;
  
  arg1 = (ImGuiIO *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_Ctx_set(void * jarg1, void * jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiContext *arg2 = (ImGuiContext *) 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (ImGuiContext *)jarg2; 
  if (arg1) (arg1)->Ctx = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_Ctx_get(void * jarg1) {
  void * jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiContext *result = 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (ImGuiContext *) ((arg1)->Ctx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_EventFlag_set(void * jarg1, int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (ImGuiInputTextFlags)jarg2; 
  if (arg1) (arg1)->EventFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_EventFlag_get(void * jarg1) {
  int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (ImGuiInputTextFlags) ((arg1)->EventFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_Flags_set(void * jarg1, int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (ImGuiInputTextFlags)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_Flags_get(void * jarg1) {
  int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiInputTextFlags result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (ImGuiInputTextFlags) ((arg1)->Flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_UserData_set(void * jarg1, void * jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->UserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_UserData_get(void * jarg1) {
  void * jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (void *) ((arg1)->UserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_EventChar_set(void * jarg1, unsigned short jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImWchar arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->EventChar = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_EventChar_get(void * jarg1) {
  unsigned short jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImWchar result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (ImWchar) ((arg1)->EventChar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_EventKey_set(void * jarg1, int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiKey arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (ImGuiKey)jarg2; 
  if (arg1) (arg1)->EventKey = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_EventKey_get(void * jarg1) {
  int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  ImGuiKey result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (ImGuiKey) ((arg1)->EventKey);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_Buf_set(void * jarg1, char * jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->Buf;
    if (arg2) {
      arg1->Buf = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->Buf, (const char *)arg2);
    } else {
      arg1->Buf = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_Buf_get(void * jarg1) {
  char * jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (char *) ((arg1)->Buf);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_BufTextLen_set(void * jarg1, int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BufTextLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_BufTextLen_get(void * jarg1) {
  int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (int) ((arg1)->BufTextLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_BufSize_set(void * jarg1, int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BufSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_BufSize_get(void * jarg1) {
  int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (int) ((arg1)->BufSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_BufDirty_set(void * jarg1, unsigned int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->BufDirty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_BufDirty_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (bool) ((arg1)->BufDirty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_CursorPos_set(void * jarg1, int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CursorPos = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_CursorPos_get(void * jarg1) {
  int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (int) ((arg1)->CursorPos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_SelectionStart_set(void * jarg1, int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SelectionStart = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_SelectionStart_get(void * jarg1) {
  int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (int) ((arg1)->SelectionStart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_SelectionEnd_set(void * jarg1, int jarg2) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SelectionEnd = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_SelectionEnd_get(void * jarg1) {
  int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (int) ((arg1)->SelectionEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiInputTextCallbackData() {
  void * jresult ;
  ImGuiInputTextCallbackData *result = 0 ;
  
  result = (ImGuiInputTextCallbackData *)new ImGuiInputTextCallbackData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_DeleteChars(void * jarg1, int jarg2, int jarg3) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->DeleteChars(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_InsertChars__SWIG_0(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->InsertChars(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_InsertChars__SWIG_1(void * jarg1, int jarg2, char * jarg3) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->InsertChars(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_SelectAll(void * jarg1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  (arg1)->SelectAll();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_ClearSelection(void * jarg1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  (arg1)->ClearSelection();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiInputTextCallbackData_HasSelection(void * jarg1) {
  unsigned int jresult ;
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  bool result;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  result = (bool)((ImGuiInputTextCallbackData const *)arg1)->HasSelection();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiInputTextCallbackData(void * jarg1) {
  ImGuiInputTextCallbackData *arg1 = (ImGuiInputTextCallbackData *) 0 ;
  
  arg1 = (ImGuiInputTextCallbackData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiSizeCallbackData_UserData_set(void * jarg1, void * jarg2) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->UserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiSizeCallbackData_UserData_get(void * jarg1) {
  void * jresult ;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  result = (void *) ((arg1)->UserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiSizeCallbackData_Pos_set(void * jarg1, void * jarg2) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->Pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiSizeCallbackData_Pos_get(void * jarg1) {
  void * jresult ;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  result = (ImVec2 *)& ((arg1)->Pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiSizeCallbackData_CurrentSize_set(void * jarg1, void * jarg2) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->CurrentSize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiSizeCallbackData_CurrentSize_get(void * jarg1) {
  void * jresult ;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  result = (ImVec2 *)& ((arg1)->CurrentSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiSizeCallbackData_DesiredSize_set(void * jarg1, void * jarg2) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->DesiredSize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiSizeCallbackData_DesiredSize_get(void * jarg1) {
  void * jresult ;
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  result = (ImVec2 *)& ((arg1)->DesiredSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiSizeCallbackData() {
  void * jresult ;
  ImGuiSizeCallbackData *result = 0 ;
  
  result = (ImGuiSizeCallbackData *)new ImGuiSizeCallbackData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiSizeCallbackData(void * jarg1) {
  ImGuiSizeCallbackData *arg1 = (ImGuiSizeCallbackData *) 0 ;
  
  arg1 = (ImGuiSizeCallbackData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiWindowClass_ClassId_set(void * jarg1, unsigned int jarg2) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->ClassId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiWindowClass_ClassId_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  result = (ImGuiID) ((arg1)->ClassId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiWindowClass_ParentViewportId_set(void * jarg1, unsigned int jarg2) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->ParentViewportId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiWindowClass_ParentViewportId_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  result = (ImGuiID) ((arg1)->ParentViewportId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiWindowClass_ViewportFlagsOverrideSet_set(void * jarg1, int jarg2) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiViewportFlags arg2 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  arg2 = (ImGuiViewportFlags)jarg2; 
  if (arg1) (arg1)->ViewportFlagsOverrideSet = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiWindowClass_ViewportFlagsOverrideSet_get(void * jarg1) {
  int jresult ;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiViewportFlags result;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  result = (ImGuiViewportFlags) ((arg1)->ViewportFlagsOverrideSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiWindowClass_ViewportFlagsOverrideClear_set(void * jarg1, int jarg2) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiViewportFlags arg2 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  arg2 = (ImGuiViewportFlags)jarg2; 
  if (arg1) (arg1)->ViewportFlagsOverrideClear = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiWindowClass_ViewportFlagsOverrideClear_get(void * jarg1) {
  int jresult ;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiViewportFlags result;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  result = (ImGuiViewportFlags) ((arg1)->ViewportFlagsOverrideClear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiWindowClass_TabItemFlagsOverrideSet_set(void * jarg1, int jarg2) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiTabItemFlags arg2 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  arg2 = (ImGuiTabItemFlags)jarg2; 
  if (arg1) (arg1)->TabItemFlagsOverrideSet = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiWindowClass_TabItemFlagsOverrideSet_get(void * jarg1) {
  int jresult ;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiTabItemFlags result;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  result = (ImGuiTabItemFlags) ((arg1)->TabItemFlagsOverrideSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiWindowClass_DockNodeFlagsOverrideSet_set(void * jarg1, int jarg2) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiDockNodeFlags arg2 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  arg2 = (ImGuiDockNodeFlags)jarg2; 
  if (arg1) (arg1)->DockNodeFlagsOverrideSet = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiWindowClass_DockNodeFlagsOverrideSet_get(void * jarg1) {
  int jresult ;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  ImGuiDockNodeFlags result;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  result = (ImGuiDockNodeFlags) ((arg1)->DockNodeFlagsOverrideSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiWindowClass_DockingAlwaysTabBar_set(void * jarg1, unsigned int jarg2) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DockingAlwaysTabBar = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiWindowClass_DockingAlwaysTabBar_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  bool result;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  result = (bool) ((arg1)->DockingAlwaysTabBar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiWindowClass_DockingAllowUnclassed_set(void * jarg1, unsigned int jarg2) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DockingAllowUnclassed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiWindowClass_DockingAllowUnclassed_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  bool result;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  result = (bool) ((arg1)->DockingAllowUnclassed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiWindowClass() {
  void * jresult ;
  ImGuiWindowClass *result = 0 ;
  
  result = (ImGuiWindowClass *)new ImGuiWindowClass();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiWindowClass(void * jarg1) {
  ImGuiWindowClass *arg1 = (ImGuiWindowClass *) 0 ;
  
  arg1 = (ImGuiWindowClass *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_Data_set(void * jarg1, void * jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->Data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPayload_Data_get(void * jarg1) {
  void * jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (void *) ((arg1)->Data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_DataSize_set(void * jarg1, int jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DataSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiPayload_DataSize_get(void * jarg1) {
  int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (int) ((arg1)->DataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_SourceId_set(void * jarg1, unsigned int jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->SourceId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiPayload_SourceId_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (ImGuiID) ((arg1)->SourceId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_SourceParentId_set(void * jarg1, unsigned int jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->SourceParentId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiPayload_SourceParentId_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (ImGuiID) ((arg1)->SourceParentId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_DataFrameCount_set(void * jarg1, int jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DataFrameCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiPayload_DataFrameCount_get(void * jarg1) {
  int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  int result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (int) ((arg1)->DataFrameCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_DataType_set(void * jarg1, char * jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->DataType, (const char *)arg2, 32+1-1);
      arg1->DataType[32+1-1] = 0;
    } else {
      arg1->DataType[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiPayload_DataType_get(void * jarg1) {
  char * jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (char *)(char *) ((arg1)->DataType);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_Preview_set(void * jarg1, unsigned int jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Preview = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiPayload_Preview_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (bool) ((arg1)->Preview);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_Delivery_set(void * jarg1, unsigned int jarg2) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Delivery = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiPayload_Delivery_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (bool) ((arg1)->Delivery);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiPayload() {
  void * jresult ;
  ImGuiPayload *result = 0 ;
  
  result = (ImGuiPayload *)new ImGuiPayload();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPayload_Clear(void * jarg1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiPayload_IsDataType(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((ImGuiPayload const *)arg1)->IsDataType((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiPayload_IsPreview(void * jarg1) {
  unsigned int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (bool)((ImGuiPayload const *)arg1)->IsPreview();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiPayload_IsDelivery(void * jarg1) {
  unsigned int jresult ;
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  bool result;
  
  arg1 = (ImGuiPayload *)jarg1; 
  result = (bool)((ImGuiPayload const *)arg1)->IsDelivery();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiPayload(void * jarg1) {
  ImGuiPayload *arg1 = (ImGuiPayload *) 0 ;
  
  arg1 = (ImGuiPayload *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTableColumnSortSpecs_ColumnUserID_set(void * jarg1, unsigned int jarg2) {
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->ColumnUserID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTableColumnSortSpecs_ColumnUserID_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  result = (ImGuiID) ((arg1)->ColumnUserID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTableColumnSortSpecs_ColumnIndex_set(void * jarg1, short jarg2) {
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  ImS16 arg2 ;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  arg2 = (ImS16)jarg2; 
  if (arg1) (arg1)->ColumnIndex = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImGuiTableColumnSortSpecs_ColumnIndex_get(void * jarg1) {
  short jresult ;
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  ImS16 result;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  result = (ImS16) ((arg1)->ColumnIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTableColumnSortSpecs_SortOrder_set(void * jarg1, short jarg2) {
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  ImS16 arg2 ;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  arg2 = (ImS16)jarg2; 
  if (arg1) (arg1)->SortOrder = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImGuiTableColumnSortSpecs_SortOrder_get(void * jarg1) {
  short jresult ;
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  ImS16 result;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  result = (ImS16) ((arg1)->SortOrder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTableColumnSortSpecs_SortDirection_set(void * jarg1, int jarg2) {
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  ImGuiSortDirection arg2 ;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  arg2 = (ImGuiSortDirection)jarg2; 
  if (arg1) (arg1)->SortDirection = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiTableColumnSortSpecs_SortDirection_get(void * jarg1) {
  int jresult ;
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  ImGuiSortDirection result;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  result = (ImGuiSortDirection) ((arg1)->SortDirection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiTableColumnSortSpecs() {
  void * jresult ;
  ImGuiTableColumnSortSpecs *result = 0 ;
  
  result = (ImGuiTableColumnSortSpecs *)new ImGuiTableColumnSortSpecs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiTableColumnSortSpecs(void * jarg1) {
  ImGuiTableColumnSortSpecs *arg1 = (ImGuiTableColumnSortSpecs *) 0 ;
  
  arg1 = (ImGuiTableColumnSortSpecs *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTableSortSpecs_Specs_set(void * jarg1, void * jarg2) {
  ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ;
  ImGuiTableColumnSortSpecs *arg2 = (ImGuiTableColumnSortSpecs *) 0 ;
  
  arg1 = (ImGuiTableSortSpecs *)jarg1; 
  arg2 = (ImGuiTableColumnSortSpecs *)jarg2; 
  if (arg1) (arg1)->Specs = (ImGuiTableColumnSortSpecs const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiTableSortSpecs_Specs_get(void * jarg1) {
  void * jresult ;
  ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ;
  ImGuiTableColumnSortSpecs *result = 0 ;
  
  arg1 = (ImGuiTableSortSpecs *)jarg1; 
  result = (ImGuiTableColumnSortSpecs *) ((arg1)->Specs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTableSortSpecs_SpecsCount_set(void * jarg1, int jarg2) {
  ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiTableSortSpecs *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpecsCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiTableSortSpecs_SpecsCount_get(void * jarg1) {
  int jresult ;
  ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ;
  int result;
  
  arg1 = (ImGuiTableSortSpecs *)jarg1; 
  result = (int) ((arg1)->SpecsCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTableSortSpecs_SpecsDirty_set(void * jarg1, unsigned int jarg2) {
  ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiTableSortSpecs *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SpecsDirty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTableSortSpecs_SpecsDirty_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ;
  bool result;
  
  arg1 = (ImGuiTableSortSpecs *)jarg1; 
  result = (bool) ((arg1)->SpecsDirty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiTableSortSpecs() {
  void * jresult ;
  ImGuiTableSortSpecs *result = 0 ;
  
  result = (ImGuiTableSortSpecs *)new ImGuiTableSortSpecs();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiTableSortSpecs(void * jarg1) {
  ImGuiTableSortSpecs *arg1 = (ImGuiTableSortSpecs *) 0 ;
  
  arg1 = (ImGuiTableSortSpecs *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IM_UNICODE_CODEPOINT_INVALID_get() {
  int jresult ;
  int result;
  
  result = (int)(0xFFFD);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IM_UNICODE_CODEPOINT_MAX_get() {
  int jresult ;
  int result;
  
  result = (int)(0xFFFF);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiOnceUponAFrame() {
  void * jresult ;
  ImGuiOnceUponAFrame *result = 0 ;
  
  result = (ImGuiOnceUponAFrame *)new ImGuiOnceUponAFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiOnceUponAFrame_RefFrame_set(void * jarg1, int jarg2) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiOnceUponAFrame *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RefFrame = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiOnceUponAFrame_RefFrame_get(void * jarg1) {
  int jresult ;
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  int result;
  
  arg1 = (ImGuiOnceUponAFrame *)jarg1; 
  result = (int) ((arg1)->RefFrame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiOnceUponAFrame(void * jarg1) {
  ImGuiOnceUponAFrame *arg1 = (ImGuiOnceUponAFrame *) 0 ;
  
  arg1 = (ImGuiOnceUponAFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiTextFilter__SWIG_0(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiTextFilter *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (ImGuiTextFilter *)new ImGuiTextFilter((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiTextFilter__SWIG_1() {
  void * jresult ;
  ImGuiTextFilter *result = 0 ;
  
  result = (ImGuiTextFilter *)new ImGuiTextFilter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTextFilter_Draw__SWIG_0(void * jarg1, char * jarg2, float jarg3) {
  unsigned int jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  bool result;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = (bool)(arg1)->Draw((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTextFilter_Draw__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->Draw((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTextFilter_Draw__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  bool result;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  result = (bool)(arg1)->Draw();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTextFilter_PassFilter__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)((ImGuiTextFilter const *)arg1)->PassFilter((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTextFilter_PassFilter__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((ImGuiTextFilter const *)arg1)->PassFilter((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextFilter_Build(void * jarg1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  (arg1)->Build();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextFilter_Clear(void * jarg1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTextFilter_IsActive(void * jarg1) {
  unsigned int jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  bool result;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  result = (bool)((ImGuiTextFilter const *)arg1)->IsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextFilter_ImGuiTextRange_b_set(void * jarg1, char * jarg2) {
  ImGuiTextFilter::ImGuiTextRange *arg1 = (ImGuiTextFilter::ImGuiTextRange *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiTextFilter::ImGuiTextRange *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->b = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->b, (const char *)arg2);
    } else {
      arg1->b = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiTextFilter_ImGuiTextRange_b_get(void * jarg1) {
  char * jresult ;
  ImGuiTextFilter::ImGuiTextRange *arg1 = (ImGuiTextFilter::ImGuiTextRange *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiTextFilter::ImGuiTextRange *)jarg1; 
  result = (char *) ((arg1)->b);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextFilter_ImGuiTextRange_e_set(void * jarg1, char * jarg2) {
  ImGuiTextFilter::ImGuiTextRange *arg1 = (ImGuiTextFilter::ImGuiTextRange *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiTextFilter::ImGuiTextRange *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->e = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->e, (const char *)arg2);
    } else {
      arg1->e = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiTextFilter_ImGuiTextRange_e_get(void * jarg1) {
  char * jresult ;
  ImGuiTextFilter::ImGuiTextRange *arg1 = (ImGuiTextFilter::ImGuiTextRange *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiTextFilter::ImGuiTextRange *)jarg1; 
  result = (char *) ((arg1)->e);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiTextFilter_ImGuiTextRange__SWIG_0() {
  void * jresult ;
  ImGuiTextFilter::ImGuiTextRange *result = 0 ;
  
  result = (ImGuiTextFilter::ImGuiTextRange *)new ImGuiTextFilter::ImGuiTextRange();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiTextFilter_ImGuiTextRange__SWIG_1(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  ImGuiTextFilter::ImGuiTextRange *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (ImGuiTextFilter::ImGuiTextRange *)new ImGuiTextFilter::ImGuiTextRange((char const *)arg1,(char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTextFilter_ImGuiTextRange_empty(void * jarg1) {
  unsigned int jresult ;
  ImGuiTextFilter::ImGuiTextRange *arg1 = (ImGuiTextFilter::ImGuiTextRange *) 0 ;
  bool result;
  
  arg1 = (ImGuiTextFilter::ImGuiTextRange *)jarg1; 
  result = (bool)((ImGuiTextFilter::ImGuiTextRange const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextFilter_ImGuiTextRange_split(void * jarg1, char jarg2, void * jarg3) {
  ImGuiTextFilter::ImGuiTextRange *arg1 = (ImGuiTextFilter::ImGuiTextRange *) 0 ;
  char arg2 ;
  ImVector< ImGuiTextFilter::ImGuiTextRange > *arg3 = (ImVector< ImGuiTextFilter::ImGuiTextRange > *) 0 ;
  
  arg1 = (ImGuiTextFilter::ImGuiTextRange *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (ImVector< ImGuiTextFilter::ImGuiTextRange > *)jarg3; 
  ((ImGuiTextFilter::ImGuiTextRange const *)arg1)->split(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiTextFilter_ImGuiTextRange(void * jarg1) {
  ImGuiTextFilter::ImGuiTextRange *arg1 = (ImGuiTextFilter::ImGuiTextRange *) 0 ;
  
  arg1 = (ImGuiTextFilter::ImGuiTextRange *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextFilter_InputBuf_set(void * jarg1, char * jarg2) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InputBuf, (const char *)arg2, 256-1);
      arg1->InputBuf[256-1] = 0;
    } else {
      arg1->InputBuf[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiTextFilter_InputBuf_get(void * jarg1) {
  char * jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  result = (char *)(char *) ((arg1)->InputBuf);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextFilter_Filters_set(void * jarg1, void * jarg2) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  ImVector< ImGuiTextFilter::ImGuiTextRange > *arg2 = (ImVector< ImGuiTextFilter::ImGuiTextRange > *) 0 ;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  arg2 = (ImVector< ImGuiTextFilter::ImGuiTextRange > *)jarg2; 
  if (arg1) (arg1)->Filters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiTextFilter_Filters_get(void * jarg1) {
  void * jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  ImVector< ImGuiTextFilter::ImGuiTextRange > *result = 0 ;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  result = (ImVector< ImGuiTextFilter::ImGuiTextRange > *)& ((arg1)->Filters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextFilter_CountGrep_set(void * jarg1, int jarg2) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CountGrep = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiTextFilter_CountGrep_get(void * jarg1) {
  int jresult ;
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  int result;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  result = (int) ((arg1)->CountGrep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiTextFilter(void * jarg1) {
  ImGuiTextFilter *arg1 = (ImGuiTextFilter *) 0 ;
  
  arg1 = (ImGuiTextFilter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextBuffer_Buf_set(void * jarg1, void * jarg2) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  ImVector< char > *arg2 = (ImVector< char > *) 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  arg2 = (ImVector< char > *)jarg2; 
  if (arg1) (arg1)->Buf = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiTextBuffer_Buf_get(void * jarg1) {
  void * jresult ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  ImVector< char > *result = 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  result = (ImVector< char > *)& ((arg1)->Buf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextBuffer_EmptyString_set(char * jarg1) {
  char *arg1 = (char *) (char *)0 ;
  
  arg1 = (char *)jarg1; 
  {
    if(arg1) {
      strncpy((char*)ImGuiTextBuffer::EmptyString, (const char *)arg1, 1-1);
      ImGuiTextBuffer::EmptyString[1-1] = 0;
    } else {
      ImGuiTextBuffer::EmptyString[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiTextBuffer_EmptyString_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)(char *)ImGuiTextBuffer::EmptyString;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiTextBuffer() {
  void * jresult ;
  ImGuiTextBuffer *result = 0 ;
  
  result = (ImGuiTextBuffer *)new ImGuiTextBuffer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiTextBuffer_begin(void * jarg1) {
  char * jresult ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  result = (char *)((ImGuiTextBuffer const *)arg1)->begin();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiTextBuffer_end(void * jarg1) {
  char * jresult ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  result = (char *)((ImGuiTextBuffer const *)arg1)->end();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiTextBuffer_size(void * jarg1) {
  int jresult ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  int result;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  result = (int)((ImGuiTextBuffer const *)arg1)->size();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiTextBuffer_empty(void * jarg1) {
  unsigned int jresult ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  bool result;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  result = (bool)((ImGuiTextBuffer const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextBuffer_clear(void * jarg1) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextBuffer_reserve(void * jarg1, int jarg2) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImGuiTextBuffer_c_str(void * jarg1) {
  char * jresult ;
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  result = (char *)((ImGuiTextBuffer const *)arg1)->c_str();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextBuffer_append__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->append((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextBuffer_append__SWIG_1(void * jarg1, char * jarg2) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->append((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextBuffer_appendf(void * jarg1, char * jarg2) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->appendf((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiTextBuffer_appendfv(void * jarg1, char * jarg2, void * jarg3) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  va_list arg3 ;
  va_list *argp3 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (va_list *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null va_list", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->appendfv((char const *)arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiTextBuffer(void * jarg1) {
  ImGuiTextBuffer *arg1 = (ImGuiTextBuffer *) 0 ;
  
  arg1 = (ImGuiTextBuffer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_ImGuiStoragePair_key_set(void * jarg1, unsigned int jarg2) {
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->key = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiStorage_ImGuiStoragePair_key_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  result = (ImGuiID) ((arg1)->key);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_ImGuiStoragePair_val_i_set(void * jarg1, int jarg2) {
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->val_i = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiStorage_ImGuiStoragePair_val_i_get(void * jarg1) {
  int jresult ;
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  int result;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  result = (int) ((arg1)->val_i);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_ImGuiStoragePair_val_f_set(void * jarg1, float jarg2) {
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->val_f = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStorage_ImGuiStoragePair_val_f_get(void * jarg1) {
  float jresult ;
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  float result;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  result = (float) ((arg1)->val_f);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_ImGuiStoragePair_val_p_set(void * jarg1, void * jarg2) {
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->val_p = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_ImGuiStoragePair_val_p_get(void * jarg1) {
  void * jresult ;
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  result = (void *) ((arg1)->val_p);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiStorage_ImGuiStoragePair__SWIG_0(unsigned int jarg1, int jarg2) {
  void * jresult ;
  ImGuiID arg1 ;
  int arg2 ;
  ImGuiStorage::ImGuiStoragePair *result = 0 ;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (int)jarg2; 
  result = (ImGuiStorage::ImGuiStoragePair *)new ImGuiStorage::ImGuiStoragePair(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiStorage_ImGuiStoragePair__SWIG_1(unsigned int jarg1, float jarg2) {
  void * jresult ;
  ImGuiID arg1 ;
  float arg2 ;
  ImGuiStorage::ImGuiStoragePair *result = 0 ;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (float)jarg2; 
  result = (ImGuiStorage::ImGuiStoragePair *)new ImGuiStorage::ImGuiStoragePair(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiStorage_ImGuiStoragePair__SWIG_2(unsigned int jarg1, void * jarg2) {
  void * jresult ;
  ImGuiID arg1 ;
  void *arg2 = (void *) 0 ;
  ImGuiStorage::ImGuiStoragePair *result = 0 ;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (void *)jarg2; 
  result = (ImGuiStorage::ImGuiStoragePair *)new ImGuiStorage::ImGuiStoragePair(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiStorage_ImGuiStoragePair(void * jarg1) {
  ImGuiStorage::ImGuiStoragePair *arg1 = (ImGuiStorage::ImGuiStoragePair *) 0 ;
  
  arg1 = (ImGuiStorage::ImGuiStoragePair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_Data_set(void * jarg1, void * jarg2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImVector< ImGuiStorage::ImGuiStoragePair > *arg2 = (ImVector< ImGuiStorage::ImGuiStoragePair > *) 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImVector< ImGuiStorage::ImGuiStoragePair > *)jarg2; 
  if (arg1) (arg1)->Data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_Data_get(void * jarg1) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImVector< ImGuiStorage::ImGuiStoragePair > *result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  result = (ImVector< ImGuiStorage::ImGuiStoragePair > *)& ((arg1)->Data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_Clear(void * jarg1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiStorage_GetInt__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  int jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((ImGuiStorage const *)arg1)->GetInt(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiStorage_GetInt__SWIG_1(void * jarg1, unsigned int jarg2) {
  int jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int result;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (int)((ImGuiStorage const *)arg1)->GetInt(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_SetInt(void * jarg1, unsigned int jarg2, int jarg3) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetInt(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiStorage_GetBool__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)((ImGuiStorage const *)arg1)->GetBool(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiStorage_GetBool__SWIG_1(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool result;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (bool)((ImGuiStorage const *)arg1)->GetBool(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_SetBool(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetBool(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStorage_GetFloat__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3) {
  float jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  float result;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)((ImGuiStorage const *)arg1)->GetFloat(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiStorage_GetFloat__SWIG_1(void * jarg1, unsigned int jarg2) {
  float jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float result;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (float)((ImGuiStorage const *)arg1)->GetFloat(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_SetFloat(void * jarg1, unsigned int jarg2, float jarg3) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetFloat(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetVoidPtr(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (void *)((ImGuiStorage const *)arg1)->GetVoidPtr(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_SetVoidPtr(void * jarg1, unsigned int jarg2, void * jarg3) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->SetVoidPtr(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetIntRef__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int arg3 ;
  int *result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (int)jarg3; 
  result = (int *)(arg1)->GetIntRef(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetIntRef__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  int *result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (int *)(arg1)->GetIntRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetBoolRef__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool arg3 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool *)(arg1)->GetBoolRef(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetBoolRef__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  bool *result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (bool *)(arg1)->GetBoolRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetFloatRef__SWIG_0(void * jarg1, unsigned int jarg2, float jarg3) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float arg3 ;
  float *result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (float)jarg3; 
  result = (float *)(arg1)->GetFloatRef(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetFloatRef__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  float *result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (float *)(arg1)->GetFloatRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetVoidPtrRef__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void *arg3 = (void *) 0 ;
  void **result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  arg3 = (void *)jarg3; 
  result = (void **)(arg1)->GetVoidPtrRef(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiStorage_GetVoidPtrRef__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  ImGuiID arg2 ;
  void **result = 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  result = (void **)(arg1)->GetVoidPtrRef(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_BuildSortByKey(void * jarg1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  (arg1)->BuildSortByKey();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiStorage_SetAllInt(void * jarg1, int jarg2) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAllInt(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiStorage() {
  void * jresult ;
  ImGuiStorage *result = 0 ;
  
  result = (ImGuiStorage *)new ImGuiStorage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiStorage(void * jarg1) {
  ImGuiStorage *arg1 = (ImGuiStorage *) 0 ;
  
  arg1 = (ImGuiStorage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_Ctx_set(void * jarg1, void * jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  ImGuiContext *arg2 = (ImGuiContext *) 0 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (ImGuiContext *)jarg2; 
  if (arg1) (arg1)->Ctx = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiListClipper_Ctx_get(void * jarg1) {
  void * jresult ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  ImGuiContext *result = 0 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  result = (ImGuiContext *) ((arg1)->Ctx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_DisplayStart_set(void * jarg1, int jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DisplayStart = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiListClipper_DisplayStart_get(void * jarg1) {
  int jresult ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  result = (int) ((arg1)->DisplayStart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_DisplayEnd_set(void * jarg1, int jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DisplayEnd = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiListClipper_DisplayEnd_get(void * jarg1) {
  int jresult ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  result = (int) ((arg1)->DisplayEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_ItemsCount_set(void * jarg1, int jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ItemsCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiListClipper_ItemsCount_get(void * jarg1) {
  int jresult ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int result;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  result = (int) ((arg1)->ItemsCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_ItemsHeight_set(void * jarg1, float jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ItemsHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiListClipper_ItemsHeight_get(void * jarg1) {
  float jresult ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  result = (float) ((arg1)->ItemsHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_StartPosY_set(void * jarg1, float jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->StartPosY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiListClipper_StartPosY_get(void * jarg1) {
  float jresult ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  float result;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  result = (float) ((arg1)->StartPosY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_TempData_set(void * jarg1, void * jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->TempData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiListClipper_TempData_get(void * jarg1) {
  void * jresult ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  result = (void *) ((arg1)->TempData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiListClipper() {
  void * jresult ;
  ImGuiListClipper *result = 0 ;
  
  result = (ImGuiListClipper *)new ImGuiListClipper();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiListClipper(void * jarg1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_Begin__SWIG_0(void * jarg1, int jarg2, float jarg3) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->Begin(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_Begin__SWIG_1(void * jarg1, int jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->Begin(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_End(void * jarg1) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  (arg1)->End();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiListClipper_Step(void * jarg1) {
  unsigned int jresult ;
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  bool result;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  result = (bool)(arg1)->Step();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_IncludeItemByIndex(void * jarg1, int jarg2) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->IncludeItemByIndex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_IncludeItemsByIndex(void * jarg1, int jarg2, int jarg3) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->IncludeItemsByIndex(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_IncludeRangeByIndices(void * jarg1, int jarg2, int jarg3) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->IncludeRangeByIndices(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiListClipper_ForceDisplayRangeByIndices(void * jarg1, int jarg2, int jarg3) {
  ImGuiListClipper *arg1 = (ImGuiListClipper *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ImGuiListClipper *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->ForceDisplayRangeByIndices(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IM_COL32_R_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IM_COL32_G_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IM_COL32_B_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IM_COL32_A_SHIFT_get() {
  int jresult ;
  int result;
  
  result = (int)(24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IM_COL32_A_MASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0xFF000000);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImColor_Value_set(void * jarg1, void * jarg2) {
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  arg1 = (ImColor *)jarg1; 
  arg2 = (ImVec4 *)jarg2; 
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImColor_Value_get(void * jarg1) {
  void * jresult ;
  ImColor *arg1 = (ImColor *) 0 ;
  ImVec4 *result = 0 ;
  
  arg1 = (ImColor *)jarg1; 
  result = (ImVec4 *)& ((arg1)->Value);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImColor__SWIG_0() {
  void * jresult ;
  ImColor *result = 0 ;
  
  result = (ImColor *)new ImColor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImColor__SWIG_1(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImColor__SWIG_2(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ImColor *result = 0 ;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = (ImColor *)new ImColor(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImColor__SWIG_3(void * jarg1) {
  void * jresult ;
  ImVec4 *arg1 = 0 ;
  ImColor *result = 0 ;
  
  arg1 = (ImVec4 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = (ImColor *)new ImColor((ImVec4 const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImColor__SWIG_4(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  ImColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (ImColor *)new ImColor(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImColor__SWIG_5(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  ImColor *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (ImColor *)new ImColor(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImColor__SWIG_6(unsigned int jarg1) {
  void * jresult ;
  ImU32 arg1 ;
  ImColor *result = 0 ;
  
  arg1 = (ImU32)jarg1; 
  result = (ImColor *)new ImColor(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImColor_SetHSV__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (ImColor *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->SetHSV(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImColor_SetHSV__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  ImColor *arg1 = (ImColor *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (ImColor *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->SetHSV(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImColor_HSV__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  ImColor result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = ImColor::HSV(arg1,arg2,arg3,arg4);
  jresult = new ImColor(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImColor_HSV__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  ImColor result;
  
  arg1 = (float)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  result = ImColor::HSV(arg1,arg2,arg3);
  jresult = new ImColor(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImColor(void * jarg1) {
  ImColor *arg1 = (ImColor *) 0 ;
  
  arg1 = (ImColor *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IM_DRAWLIST_TEX_LINES_WIDTH_MAX_get() {
  int jresult ;
  int result;
  
  result = (int)((63));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmd_ClipRect_set(void * jarg1, void * jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  arg2 = (ImVec4 *)jarg2; 
  if (arg1) (arg1)->ClipRect = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawCmd_ClipRect_get(void * jarg1) {
  void * jresult ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImVec4 *result = 0 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  result = (ImVec4 *)& ((arg1)->ClipRect);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmd_TextureId_set(void * jarg1, void * jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  if (arg1) (arg1)->TextureId = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawCmd_TextureId_get(void * jarg1) {
  void * jresult ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID result;
  
  arg1 = (ImDrawCmd *)jarg1; 
  result = (ImTextureID) ((arg1)->TextureId);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmd_VtxOffset_set(void * jarg1, unsigned int jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->VtxOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImDrawCmd_VtxOffset_get(void * jarg1) {
  unsigned int jresult ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  arg1 = (ImDrawCmd *)jarg1; 
  result = (unsigned int) ((arg1)->VtxOffset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmd_IdxOffset_set(void * jarg1, unsigned int jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->IdxOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImDrawCmd_IdxOffset_get(void * jarg1) {
  unsigned int jresult ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  arg1 = (ImDrawCmd *)jarg1; 
  result = (unsigned int) ((arg1)->IdxOffset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmd_ElemCount_set(void * jarg1, unsigned int jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ElemCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImDrawCmd_ElemCount_get(void * jarg1) {
  unsigned int jresult ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  unsigned int result;
  
  arg1 = (ImDrawCmd *)jarg1; 
  result = (unsigned int) ((arg1)->ElemCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmd_UserCallback_set(void * jarg1, void * jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  arg2 = (ImDrawCallback)jarg2; 
  if (arg1) (arg1)->UserCallback = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawCmd_UserCallback_get(void * jarg1) {
  void * jresult ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImDrawCallback result;
  
  arg1 = (ImDrawCmd *)jarg1; 
  result = (ImDrawCallback) ((arg1)->UserCallback);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmd_UserCallbackData_set(void * jarg1, void * jarg2) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->UserCallbackData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawCmd_UserCallbackData_get(void * jarg1) {
  void * jresult ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  result = (void *) ((arg1)->UserCallbackData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImDrawCmd() {
  void * jresult ;
  ImDrawCmd *result = 0 ;
  
  result = (ImDrawCmd *)new ImDrawCmd();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawCmd_GetTexID(void * jarg1) {
  void * jresult ;
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  ImTextureID result;
  
  arg1 = (ImDrawCmd *)jarg1; 
  result = (ImTextureID)((ImDrawCmd const *)arg1)->GetTexID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImDrawCmd(void * jarg1) {
  ImDrawCmd *arg1 = (ImDrawCmd *) 0 ;
  
  arg1 = (ImDrawCmd *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawVert_pos_set(void * jarg1, void * jarg2) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImDrawVert *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawVert_pos_get(void * jarg1) {
  void * jresult ;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImDrawVert *)jarg1; 
  result = (ImVec2 *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawVert_uv_set(void * jarg1, void * jarg2) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImDrawVert *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->uv = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawVert_uv_get(void * jarg1) {
  void * jresult ;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImDrawVert *)jarg1; 
  result = (ImVec2 *)& ((arg1)->uv);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawVert_col_set(void * jarg1, unsigned int jarg2) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 arg2 ;
  
  arg1 = (ImDrawVert *)jarg1; 
  arg2 = (ImU32)jarg2; 
  if (arg1) (arg1)->col = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImDrawVert_col_get(void * jarg1) {
  unsigned int jresult ;
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  ImU32 result;
  
  arg1 = (ImDrawVert *)jarg1; 
  result = (ImU32) ((arg1)->col);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImDrawVert() {
  void * jresult ;
  ImDrawVert *result = 0 ;
  
  result = (ImDrawVert *)new ImDrawVert();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImDrawVert(void * jarg1) {
  ImDrawVert *arg1 = (ImDrawVert *) 0 ;
  
  arg1 = (ImDrawVert *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmdHeader_ClipRect_set(void * jarg1, void * jarg2) {
  ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) 0 ;
  
  arg1 = (ImDrawCmdHeader *)jarg1; 
  arg2 = (ImVec4 *)jarg2; 
  if (arg1) (arg1)->ClipRect = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawCmdHeader_ClipRect_get(void * jarg1) {
  void * jresult ;
  ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ;
  ImVec4 *result = 0 ;
  
  arg1 = (ImDrawCmdHeader *)jarg1; 
  result = (ImVec4 *)& ((arg1)->ClipRect);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmdHeader_TextureId_set(void * jarg1, void * jarg2) {
  ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  arg1 = (ImDrawCmdHeader *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  if (arg1) (arg1)->TextureId = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawCmdHeader_TextureId_get(void * jarg1) {
  void * jresult ;
  ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ;
  ImTextureID result;
  
  arg1 = (ImDrawCmdHeader *)jarg1; 
  result = (ImTextureID) ((arg1)->TextureId);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawCmdHeader_VtxOffset_set(void * jarg1, unsigned int jarg2) {
  ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImDrawCmdHeader *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->VtxOffset = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImDrawCmdHeader_VtxOffset_get(void * jarg1) {
  unsigned int jresult ;
  ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ;
  unsigned int result;
  
  arg1 = (ImDrawCmdHeader *)jarg1; 
  result = (unsigned int) ((arg1)->VtxOffset);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImDrawCmdHeader() {
  void * jresult ;
  ImDrawCmdHeader *result = 0 ;
  
  result = (ImDrawCmdHeader *)new ImDrawCmdHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImDrawCmdHeader(void * jarg1) {
  ImDrawCmdHeader *arg1 = (ImDrawCmdHeader *) 0 ;
  
  arg1 = (ImDrawCmdHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawChannel__CmdBuffer_set(void * jarg1, void * jarg2) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ;
  
  arg1 = (ImDrawChannel *)jarg1; 
  arg2 = (ImVector< ImDrawCmd > *)jarg2; 
  if (arg1) (arg1)->_CmdBuffer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawChannel__CmdBuffer_get(void * jarg1) {
  void * jresult ;
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawCmd > *result = 0 ;
  
  arg1 = (ImDrawChannel *)jarg1; 
  result = (ImVector< ImDrawCmd > *)& ((arg1)->_CmdBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawChannel__IdxBuffer_set(void * jarg1, void * jarg2) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawIdx > *arg2 = (ImVector< ImDrawIdx > *) 0 ;
  
  arg1 = (ImDrawChannel *)jarg1; 
  arg2 = (ImVector< ImDrawIdx > *)jarg2; 
  if (arg1) (arg1)->_IdxBuffer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawChannel__IdxBuffer_get(void * jarg1) {
  void * jresult ;
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  ImVector< ImDrawIdx > *result = 0 ;
  
  arg1 = (ImDrawChannel *)jarg1; 
  result = (ImVector< ImDrawIdx > *)& ((arg1)->_IdxBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImDrawChannel() {
  void * jresult ;
  ImDrawChannel *result = 0 ;
  
  result = (ImDrawChannel *)new ImDrawChannel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImDrawChannel(void * jarg1) {
  ImDrawChannel *arg1 = (ImDrawChannel *) 0 ;
  
  arg1 = (ImDrawChannel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawListSplitter__Current_set(void * jarg1, int jarg2) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int arg2 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_Current = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImDrawListSplitter__Current_get(void * jarg1) {
  int jresult ;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int result;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  result = (int) ((arg1)->_Current);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawListSplitter__Count_set(void * jarg1, int jarg2) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int arg2 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->_Count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImDrawListSplitter__Count_get(void * jarg1) {
  int jresult ;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  int result;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  result = (int) ((arg1)->_Count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawListSplitter__Channels_set(void * jarg1, void * jarg2) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImVector< ImDrawChannel > *arg2 = (ImVector< ImDrawChannel > *) 0 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  arg2 = (ImVector< ImDrawChannel > *)jarg2; 
  if (arg1) (arg1)->_Channels = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawListSplitter__Channels_get(void * jarg1) {
  void * jresult ;
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImVector< ImDrawChannel > *result = 0 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  result = (ImVector< ImDrawChannel > *)& ((arg1)->_Channels);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImDrawListSplitter() {
  void * jresult ;
  ImDrawListSplitter *result = 0 ;
  
  result = (ImDrawListSplitter *)new ImDrawListSplitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImDrawListSplitter(void * jarg1) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawListSplitter_Clear(void * jarg1) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawListSplitter_ClearFreeMemory(void * jarg1) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  (arg1)->ClearFreeMemory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawListSplitter_Split(void * jarg1, void * jarg2, int jarg3) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  int arg3 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  arg2 = (ImDrawList *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Split(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawListSplitter_Merge(void * jarg1, void * jarg2) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  arg2 = (ImDrawList *)jarg2; 
  (arg1)->Merge(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawListSplitter_SetCurrentChannel(void * jarg1, void * jarg2, int jarg3) {
  ImDrawListSplitter *arg1 = (ImDrawListSplitter *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  int arg3 ;
  
  arg1 = (ImDrawListSplitter *)jarg1; 
  arg2 = (ImDrawList *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetCurrentChannel(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_CmdBuffer_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawCmd > *arg2 = (ImVector< ImDrawCmd > *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVector< ImDrawCmd > *)jarg2; 
  if (arg1) (arg1)->CmdBuffer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList_CmdBuffer_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawCmd > *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImVector< ImDrawCmd > *)& ((arg1)->CmdBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_IdxBuffer_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawIdx > *arg2 = (ImVector< ImDrawIdx > *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVector< ImDrawIdx > *)jarg2; 
  if (arg1) (arg1)->IdxBuffer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList_IdxBuffer_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawIdx > *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImVector< ImDrawIdx > *)& ((arg1)->IdxBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_VtxBuffer_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawVert > *arg2 = (ImVector< ImDrawVert > *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVector< ImDrawVert > *)jarg2; 
  if (arg1) (arg1)->VtxBuffer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList_VtxBuffer_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImDrawVert > *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImVector< ImDrawVert > *)& ((arg1)->VtxBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_Flags_set(void * jarg1, int jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListFlags arg2 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImDrawListFlags)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImDrawList_Flags_get(void * jarg1) {
  int jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListFlags result;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImDrawListFlags) ((arg1)->Flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__VtxCurrentIdx_set(void * jarg1, unsigned int jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->_VtxCurrentIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImDrawList__VtxCurrentIdx_get(void * jarg1) {
  unsigned int jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  unsigned int result;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (unsigned int) ((arg1)->_VtxCurrentIdx);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__Data_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSharedData *arg2 = (ImDrawListSharedData *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImDrawListSharedData *)jarg2; 
  if (arg1) (arg1)->_Data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList__Data_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSharedData *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImDrawListSharedData *) ((arg1)->_Data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__OwnerName_set(void * jarg1, char * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->_OwnerName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->_OwnerName, (const char *)arg2);
    } else {
      arg1->_OwnerName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImDrawList__OwnerName_get(void * jarg1) {
  char * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (char *) ((arg1)->_OwnerName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__VtxWritePtr_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *arg2 = (ImDrawVert *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImDrawVert *)jarg2; 
  if (arg1) (arg1)->_VtxWritePtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList__VtxWritePtr_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawVert *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImDrawVert *) ((arg1)->_VtxWritePtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__IdxWritePtr_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *arg2 = (ImDrawIdx *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImDrawIdx *)jarg2; 
  if (arg1) (arg1)->_IdxWritePtr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList__IdxWritePtr_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImDrawIdx *) ((arg1)->_IdxWritePtr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__ClipRectStack_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec4 > *arg2 = (ImVector< ImVec4 > *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVector< ImVec4 > *)jarg2; 
  if (arg1) (arg1)->_ClipRectStack = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList__ClipRectStack_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec4 > *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImVector< ImVec4 > *)& ((arg1)->_ClipRectStack);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__TextureIdStack_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImTextureID > *arg2 = (ImVector< ImTextureID > *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVector< ImTextureID > *)jarg2; 
  if (arg1) (arg1)->_TextureIdStack = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList__TextureIdStack_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImTextureID > *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImVector< ImTextureID > *)& ((arg1)->_TextureIdStack);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__Path_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec2 > *arg2 = (ImVector< ImVec2 > *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVector< ImVec2 > *)jarg2; 
  if (arg1) (arg1)->_Path = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList__Path_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVector< ImVec2 > *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImVector< ImVec2 > *)& ((arg1)->_Path);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__CmdHeader_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCmdHeader *arg2 = (ImDrawCmdHeader *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImDrawCmdHeader *)jarg2; 
  if (arg1) (arg1)->_CmdHeader = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList__CmdHeader_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCmdHeader *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImDrawCmdHeader *)& ((arg1)->_CmdHeader);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__Splitter_set(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSplitter *arg2 = (ImDrawListSplitter *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImDrawListSplitter *)jarg2; 
  if (arg1) (arg1)->_Splitter = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList__Splitter_get(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawListSplitter *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImDrawListSplitter *)& ((arg1)->_Splitter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__FringeScale_set(void * jarg1, float jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  float arg2 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->_FringeScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImDrawList__FringeScale_get(void * jarg1) {
  float jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  float result;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (float) ((arg1)->_FringeScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImDrawList(void * jarg1) {
  void * jresult ;
  ImDrawListSharedData *arg1 = (ImDrawListSharedData *) 0 ;
  ImDrawList *result = 0 ;
  
  arg1 = (ImDrawListSharedData *)jarg1; 
  result = (ImDrawList *)new ImDrawList(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImDrawList(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PushClipRect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->PushClipRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PushClipRect__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->PushClipRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PushClipRectFullScreen(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->PushClipRectFullScreen();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PopClipRect(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->PopClipRect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PushTextureID(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  (arg1)->PushTextureID(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PopTextureID(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->PopTextureID();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList_GetClipRectMin(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  
  arg1 = (ImDrawList *)jarg1; 
  result = ((ImDrawList const *)arg1)->GetClipRectMin();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList_GetClipRectMax(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 result;
  
  arg1 = (ImDrawList *)jarg1; 
  result = ((ImDrawList const *)arg1)->GetClipRectMax();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddLine__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddLine__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  (arg1)->AddLine((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddRect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5, int jarg6, float jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  ImDrawFlags arg6 ;
  float arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (ImDrawFlags)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddRect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5, int jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  ImDrawFlags arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (ImDrawFlags)jarg6; 
  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddRect__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddRect__SWIG_3(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  (arg1)->AddRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddRectFilled__SWIG_0(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5, int jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  ImDrawFlags arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (ImDrawFlags)jarg6; 
  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddRectFilled__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, float jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  float arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddRectFilled__SWIG_2(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  (arg1)->AddRectFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddRectFilledMultiColor(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  ImU32 arg5 ;
  ImU32 arg6 ;
  ImU32 arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (ImU32)jarg6; 
  arg7 = (ImU32)jarg7; 
  (arg1)->AddRectFilledMultiColor((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddQuad__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6, float jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImU32)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddQuad__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImU32)jarg6; 
  (arg1)->AddQuad((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddQuadFilled(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImU32)jarg6; 
  (arg1)->AddQuadFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddTriangle__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, float jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  float arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddTriangle__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  (arg1)->AddTriangle((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddTriangleFilled(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  (arg1)->AddTriangleFilled((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddCircle__SWIG_0(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4, int jarg5, float jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  float arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddCircle__SWIG_1(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4, int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddCircle__SWIG_2(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  (arg1)->AddCircle((ImVec2 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddCircleFilled__SWIG_0(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4, int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddCircleFilled__SWIG_1(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  (arg1)->AddCircleFilled((ImVec2 const &)*arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddNgon__SWIG_0(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4, int jarg5, float jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  float arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->AddNgon((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddNgon__SWIG_1(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4, int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->AddNgon((ImVec2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddNgonFilled(void * jarg1, void * jarg2, float jarg3, unsigned int jarg4, int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  ImU32 arg4 ;
  int arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->AddNgonFilled((ImVec2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddEllipse__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, unsigned int jarg5, float jarg6, int jarg7, float jarg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  ImU32 arg5 ;
  float arg6 ;
  int arg7 ;
  float arg8 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->AddEllipse((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddEllipse__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4, unsigned int jarg5, float jarg6, int jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  ImU32 arg5 ;
  float arg6 ;
  int arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->AddEllipse((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddEllipse__SWIG_2(void * jarg1, void * jarg2, float jarg3, float jarg4, unsigned int jarg5, float jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  ImU32 arg5 ;
  float arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->AddEllipse((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddEllipse__SWIG_3(void * jarg1, void * jarg2, float jarg3, float jarg4, unsigned int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  ImU32 arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImU32)jarg5; 
  (arg1)->AddEllipse((ImVec2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddEllipseFilled__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, unsigned int jarg5, float jarg6, int jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  ImU32 arg5 ;
  float arg6 ;
  int arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->AddEllipseFilled((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddEllipseFilled__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4, unsigned int jarg5, float jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  ImU32 arg5 ;
  float arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->AddEllipseFilled((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddEllipseFilled__SWIG_2(void * jarg1, void * jarg2, float jarg3, float jarg4, unsigned int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  ImU32 arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImU32)jarg5; 
  (arg1)->AddEllipseFilled((ImVec2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddText__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4, char * jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImU32)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4,(char const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddText__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3, char * jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImU32 arg3 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImU32)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->AddText((ImVec2 const &)*arg2,arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddText__SWIG_2(void * jarg1, void * jarg2, float jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, float jarg8, void * jarg9) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  ImVec4 *arg9 = (ImVec4 *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (ImVec4 *)jarg9; 
  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8,(ImVec4 const *)arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddText__SWIG_3(void * jarg1, void * jarg2, float jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7, float jarg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  float arg8 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddText__SWIG_4(void * jarg1, void * jarg2, float jarg3, void * jarg4, unsigned int jarg5, char * jarg6, char * jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char *)jarg7; 
  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6,(char const *)arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddText__SWIG_5(void * jarg1, void * jarg2, float jarg3, void * jarg4, unsigned int jarg5, char * jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  char *arg6 = (char *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  arg6 = (char *)jarg6; 
  (arg1)->AddText((ImFont const *)arg2,arg3,(ImVec2 const &)*arg4,arg5,(char const *)arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddPolyline(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, int jarg5, float jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  ImDrawFlags arg5 ;
  float arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ImU32)jarg4; 
  arg5 = (ImDrawFlags)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->AddPolyline((ImVec2 const *)arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddConvexPolyFilled(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  int arg3 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (ImU32)jarg4; 
  (arg1)->AddConvexPolyFilled((ImVec2 const *)arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddBezierCubic__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6, float jarg7, int jarg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;
  int arg8 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImU32)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->AddBezierCubic((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddBezierCubic__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6, float jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  float arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImU32)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->AddBezierCubic((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddBezierQuadratic__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, float jarg6, int jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  float arg6 ;
  int arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->AddBezierQuadratic((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddBezierQuadratic__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, unsigned int jarg5, float jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  float arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  arg6 = (float)jarg6; 
  (arg1)->AddBezierQuadratic((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImage__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImU32)jarg7; 
  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImage__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImage__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImage__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->AddImage(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImageQuad__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10, unsigned int jarg11) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImVec2 *arg10 = 0 ;
  ImU32 arg11 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImVec2 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg8 = (ImVec2 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg9 = (ImVec2 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg10 = (ImVec2 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg11 = (ImU32)jarg11; 
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10,arg11);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImageQuad__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, void * jarg10) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImVec2 *arg10 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImVec2 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg8 = (ImVec2 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg9 = (ImVec2 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg10 = (ImVec2 *)jarg10;
  if (!arg10) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,(ImVec2 const &)*arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImageQuad__SWIG_2(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImVec2 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg8 = (ImVec2 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg9 = (ImVec2 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImageQuad__SWIG_3(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImVec2 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg8 = (ImVec2 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImageQuad__SWIG_4(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImVec2 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImageQuad__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->AddImageQuad(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImageRounded__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7, float jarg8, int jarg9) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;
  float arg8 ;
  ImDrawFlags arg9 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImU32)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (ImDrawFlags)jarg9; 
  (arg1)->AddImageRounded(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddImageRounded__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned int jarg7, float jarg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImU32 arg7 ;
  float arg8 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImU32)jarg7; 
  arg8 = (float)jarg8; 
  (arg1)->AddImageRounded(arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathClear(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->PathClear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathLineTo(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->PathLineTo((ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathLineToMergeDuplicate(void * jarg1, void * jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->PathLineToMergeDuplicate((ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathFillConvex(void * jarg1, unsigned int jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImU32)jarg2; 
  (arg1)->PathFillConvex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathStroke__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, float jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  ImDrawFlags arg3 ;
  float arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImU32)jarg2; 
  arg3 = (ImDrawFlags)jarg3; 
  arg4 = (float)jarg4; 
  (arg1)->PathStroke(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathStroke__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  ImDrawFlags arg3 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImU32)jarg2; 
  arg3 = (ImDrawFlags)jarg3; 
  (arg1)->PathStroke(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathStroke__SWIG_2(void * jarg1, unsigned int jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImU32 arg2 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImU32)jarg2; 
  (arg1)->PathStroke(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathArcTo__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, int jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathArcTo__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  (arg1)->PathArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathArcToFast(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->PathArcToFast((ImVec2 const &)*arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathEllipticalArcTo__SWIG_0(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, int jarg8) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  int arg8 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (int)jarg8; 
  (arg1)->PathEllipticalArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathEllipticalArcTo__SWIG_1(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  (arg1)->PathEllipticalArcTo((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathBezierCubicCurveTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (int)jarg5; 
  (arg1)->PathBezierCubicCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathBezierCubicCurveTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->PathBezierCubicCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathBezierQuadraticCurveTo__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  (arg1)->PathBezierQuadraticCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathBezierQuadraticCurveTo__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->PathBezierQuadraticCurveTo((ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathRect__SWIG_0(void * jarg1, void * jarg2, void * jarg3, float jarg4, int jarg5) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  ImDrawFlags arg5 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  arg5 = (ImDrawFlags)jarg5; 
  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathRect__SWIG_1(void * jarg1, void * jarg2, void * jarg3, float jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  float arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (float)jarg4; 
  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PathRect__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->PathRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddCallback(void * jarg1, void * jarg2, void * jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawCallback arg2 = (ImDrawCallback) 0 ;
  void *arg3 = (void *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImDrawCallback)jarg2; 
  arg3 = (void *)jarg3; 
  (arg1)->AddCallback(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_AddDrawCmd(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->AddDrawCmd();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawList_CloneOutput(void * jarg1) {
  void * jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawList *result = 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  result = (ImDrawList *)((ImDrawList const *)arg1)->CloneOutput();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_ChannelsSplit(void * jarg1, int jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ChannelsSplit(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_ChannelsMerge(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->ChannelsMerge();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_ChannelsSetCurrent(void * jarg1, int jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ChannelsSetCurrent(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PrimReserve(void * jarg1, int jarg2, int jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->PrimReserve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PrimUnreserve(void * jarg1, int jarg2, int jarg3) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->PrimUnreserve(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PrimRect(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  (arg1)->PrimRect((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PrimRectUV(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned int jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImU32 arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImU32)jarg6; 
  (arg1)->PrimRectUV((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PrimQuadUV(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7, void * jarg8, void * jarg9, unsigned int jarg10) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  ImVec2 *arg5 = 0 ;
  ImVec2 *arg6 = 0 ;
  ImVec2 *arg7 = 0 ;
  ImVec2 *arg8 = 0 ;
  ImVec2 *arg9 = 0 ;
  ImU32 arg10 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImVec2 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg6 = (ImVec2 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg7 = (ImVec2 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg8 = (ImVec2 *)jarg8;
  if (!arg8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg9 = (ImVec2 *)jarg9;
  if (!arg9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg10 = (ImU32)jarg10; 
  (arg1)->PrimQuadUV((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,(ImVec2 const &)*arg5,(ImVec2 const &)*arg6,(ImVec2 const &)*arg7,(ImVec2 const &)*arg8,(ImVec2 const &)*arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PrimWriteVtx(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  (arg1)->PrimWriteVtx((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PrimWriteIdx(void * jarg1, unsigned short jarg2) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImDrawIdx arg2 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImDrawIdx)jarg2; 
  (arg1)->PrimWriteIdx(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList_PrimVtx(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImU32 arg4 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg4 = (ImU32)jarg4; 
  (arg1)->PrimVtx((ImVec2 const &)*arg2,(ImVec2 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__ResetForNewFrame(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->_ResetForNewFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__ClearFreeMemory(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->_ClearFreeMemory();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__PopUnusedDrawCmd(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->_PopUnusedDrawCmd();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__TryMergeDrawCmds(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->_TryMergeDrawCmds();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__OnChangedClipRect(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->_OnChangedClipRect();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__OnChangedTextureID(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->_OnChangedTextureID();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__OnChangedVtxOffset(void * jarg1) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawList *)jarg1; 
  (arg1)->_OnChangedVtxOffset();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImDrawList__CalcCircleAutoSegmentCount(void * jarg1, float jarg2) {
  int jresult ;
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  float arg2 ;
  int result;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (float)jarg2; 
  result = (int)((ImDrawList const *)arg1)->_CalcCircleAutoSegmentCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__PathArcToFastEx(void * jarg1, void * jarg2, float jarg3, int jarg4, int jarg5, int jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->_PathArcToFastEx((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawList__PathArcToN(void * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, int jarg6) {
  ImDrawList *arg1 = (ImDrawList *) 0 ;
  ImVec2 *arg2 = 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  
  arg1 = (ImDrawList *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->_PathArcToN((ImVec2 const &)*arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_Valid_set(void * jarg1, unsigned int jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool arg2 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Valid = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImDrawData_Valid_get(void * jarg1) {
  unsigned int jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  bool result;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (bool) ((arg1)->Valid);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_CmdListsCount_set(void * jarg1, int jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CmdListsCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImDrawData_CmdListsCount_get(void * jarg1) {
  int jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (int) ((arg1)->CmdListsCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_TotalIdxCount_set(void * jarg1, int jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalIdxCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImDrawData_TotalIdxCount_get(void * jarg1) {
  int jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (int) ((arg1)->TotalIdxCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_TotalVtxCount_set(void * jarg1, int jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int arg2 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalVtxCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImDrawData_TotalVtxCount_get(void * jarg1) {
  int jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  int result;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (int) ((arg1)->TotalVtxCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_CmdLists_set(void * jarg1, void * jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVector< ImDrawList * > *arg2 = (ImVector< ImDrawList * > *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (ImVector< ImDrawList * > *)jarg2; 
  if (arg1) (arg1)->CmdLists = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawData_CmdLists_get(void * jarg1) {
  void * jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVector< ImDrawList * > *result = 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (ImVector< ImDrawList * > *)& ((arg1)->CmdLists);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_DisplayPos_set(void * jarg1, void * jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->DisplayPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawData_DisplayPos_get(void * jarg1) {
  void * jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplayPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_DisplaySize_set(void * jarg1, void * jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->DisplaySize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawData_DisplaySize_get(void * jarg1) {
  void * jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (ImVec2 *)& ((arg1)->DisplaySize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_FramebufferScale_set(void * jarg1, void * jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->FramebufferScale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawData_FramebufferScale_get(void * jarg1) {
  void * jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (ImVec2 *)& ((arg1)->FramebufferScale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_OwnerViewport_set(void * jarg1, void * jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImGuiViewport *arg2 = (ImGuiViewport *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (ImGuiViewport *)jarg2; 
  if (arg1) (arg1)->OwnerViewport = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImDrawData_OwnerViewport_get(void * jarg1) {
  void * jresult ;
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImGuiViewport *result = 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  result = (ImGuiViewport *) ((arg1)->OwnerViewport);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImDrawData() {
  void * jresult ;
  ImDrawData *result = 0 ;
  
  result = (ImDrawData *)new ImDrawData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_Clear(void * jarg1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_AddDrawList(void * jarg1, void * jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (ImDrawList *)jarg2; 
  (arg1)->AddDrawList(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_DeIndexAllBuffers(void * jarg1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  (arg1)->DeIndexAllBuffers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImDrawData_ScaleClipRects(void * jarg1, void * jarg2) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  ImVec2 *arg2 = 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  (arg1)->ScaleClipRects((ImVec2 const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImDrawData(void * jarg1) {
  ImDrawData *arg1 = (ImDrawData *) 0 ;
  
  arg1 = (ImDrawData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_FontData_set(void * jarg1, void * jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->FontData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontConfig_FontData_get(void * jarg1) {
  void * jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (void *) ((arg1)->FontData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_FontDataSize_set(void * jarg1, int jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FontDataSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontConfig_FontDataSize_get(void * jarg1) {
  int jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (int) ((arg1)->FontDataSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_FontDataOwnedByAtlas_set(void * jarg1, unsigned int jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FontDataOwnedByAtlas = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontConfig_FontDataOwnedByAtlas_get(void * jarg1) {
  unsigned int jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (bool) ((arg1)->FontDataOwnedByAtlas);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_FontNo_set(void * jarg1, int jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FontNo = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontConfig_FontNo_get(void * jarg1) {
  int jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (int) ((arg1)->FontNo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_SizePixels_set(void * jarg1, float jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SizePixels = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontConfig_SizePixels_get(void * jarg1) {
  float jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (float) ((arg1)->SizePixels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_OversampleH_set(void * jarg1, int jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OversampleH = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontConfig_OversampleH_get(void * jarg1) {
  int jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (int) ((arg1)->OversampleH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_OversampleV_set(void * jarg1, int jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OversampleV = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontConfig_OversampleV_get(void * jarg1) {
  int jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  int result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (int) ((arg1)->OversampleV);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_PixelSnapH_set(void * jarg1, unsigned int jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PixelSnapH = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontConfig_PixelSnapH_get(void * jarg1) {
  unsigned int jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (bool) ((arg1)->PixelSnapH);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_GlyphExtraSpacing_set(void * jarg1, void * jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->GlyphExtraSpacing = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontConfig_GlyphExtraSpacing_get(void * jarg1) {
  void * jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (ImVec2 *)& ((arg1)->GlyphExtraSpacing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_GlyphOffset_set(void * jarg1, void * jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->GlyphOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontConfig_GlyphOffset_get(void * jarg1) {
  void * jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (ImVec2 *)& ((arg1)->GlyphOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_GlyphRanges_set(void * jarg1, void * jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (ImWchar *)jarg2; 
  if (arg1) (arg1)->GlyphRanges = (ImWchar const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontConfig_GlyphRanges_get(void * jarg1) {
  void * jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (ImWchar *) ((arg1)->GlyphRanges);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_GlyphMinAdvanceX_set(void * jarg1, float jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GlyphMinAdvanceX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontConfig_GlyphMinAdvanceX_get(void * jarg1) {
  float jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (float) ((arg1)->GlyphMinAdvanceX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_GlyphMaxAdvanceX_set(void * jarg1, float jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GlyphMaxAdvanceX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontConfig_GlyphMaxAdvanceX_get(void * jarg1) {
  float jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (float) ((arg1)->GlyphMaxAdvanceX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_MergeMode_set(void * jarg1, unsigned int jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MergeMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontConfig_MergeMode_get(void * jarg1) {
  unsigned int jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  bool result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (bool) ((arg1)->MergeMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_FontBuilderFlags_set(void * jarg1, unsigned int jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->FontBuilderFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontConfig_FontBuilderFlags_get(void * jarg1) {
  unsigned int jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  unsigned int result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (unsigned int) ((arg1)->FontBuilderFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_RasterizerMultiply_set(void * jarg1, float jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RasterizerMultiply = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontConfig_RasterizerMultiply_get(void * jarg1) {
  float jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (float) ((arg1)->RasterizerMultiply);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_RasterizerDensity_set(void * jarg1, float jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RasterizerDensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontConfig_RasterizerDensity_get(void * jarg1) {
  float jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  float result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (float) ((arg1)->RasterizerDensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_EllipsisChar_set(void * jarg1, unsigned short jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar arg2 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->EllipsisChar = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImFontConfig_EllipsisChar_get(void * jarg1) {
  unsigned short jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImWchar result;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (ImWchar) ((arg1)->EllipsisChar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_Name_set(void * jarg1, char * jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 40-1);
      arg1->Name[40-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImFontConfig_Name_get(void * jarg1) {
  char * jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontConfig_DstFont_set(void * jarg1, void * jarg2) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  if (arg1) (arg1)->DstFont = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontConfig_DstFont_get(void * jarg1) {
  void * jresult ;
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  result = (ImFont *) ((arg1)->DstFont);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImFontConfig() {
  void * jresult ;
  ImFontConfig *result = 0 ;
  
  result = (ImFontConfig *)new ImFontConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImFontConfig(void * jarg1) {
  ImFontConfig *arg1 = (ImFontConfig *) 0 ;
  
  arg1 = (ImFontConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_Colored_set(void * jarg1, unsigned int jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Colored = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontGlyph_Colored_get(void * jarg1) {
  unsigned int jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (unsigned int) ((arg1)->Colored);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_Visible_set(void * jarg1, unsigned int jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Visible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontGlyph_Visible_get(void * jarg1) {
  unsigned int jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (unsigned int) ((arg1)->Visible);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_Codepoint_set(void * jarg1, unsigned int jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Codepoint = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontGlyph_Codepoint_get(void * jarg1) {
  unsigned int jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  unsigned int result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (unsigned int) ((arg1)->Codepoint);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_AdvanceX_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AdvanceX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_AdvanceX_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->AdvanceX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_X0_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_X0_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->X0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_Y0_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_Y0_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->Y0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_X1_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_X1_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->X1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_Y1_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_Y1_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->Y1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_U0_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->U0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_U0_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->U0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_V0_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->V0 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_V0_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->V0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_U1_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->U1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_U1_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->U1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyph_V1_set(void * jarg1, float jarg2) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->V1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontGlyph_V1_get(void * jarg1) {
  float jresult ;
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  float result;
  
  arg1 = (ImFontGlyph *)jarg1; 
  result = (float) ((arg1)->V1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImFontGlyph() {
  void * jresult ;
  ImFontGlyph *result = 0 ;
  
  result = (ImFontGlyph *)new ImFontGlyph();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImFontGlyph(void * jarg1) {
  ImFontGlyph *arg1 = (ImFontGlyph *) 0 ;
  
  arg1 = (ImFontGlyph *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_UsedChars_set(void * jarg1, void * jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< ImU32 > *arg2 = (ImVector< ImU32 > *) 0 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  arg2 = (ImVector< ImU32 > *)jarg2; 
  if (arg1) (arg1)->UsedChars = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_UsedChars_get(void * jarg1) {
  void * jresult ;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< ImU32 > *result = 0 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  result = (ImVector< ImU32 > *)& ((arg1)->UsedChars);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImFontGlyphRangesBuilder() {
  void * jresult ;
  ImFontGlyphRangesBuilder *result = 0 ;
  
  result = (ImFontGlyphRangesBuilder *)new ImFontGlyphRangesBuilder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_Clear(void * jarg1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_GetBit(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)((ImFontGlyphRangesBuilder const *)arg1)->GetBit(SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_SetBit(void * jarg1, unsigned int jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  size_t arg2 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  arg2 = (size_t)jarg2; 
  (arg1)->SetBit(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_AddChar(void * jarg1, unsigned short jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImWchar arg2 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  (arg1)->AddChar(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_AddText__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddText((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_AddText__SWIG_1(void * jarg1, char * jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->AddText((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_AddRanges(void * jarg1, void * jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImWchar *arg2 = (ImWchar *) 0 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  arg2 = (ImWchar *)jarg2; 
  (arg1)->AddRanges((ImWchar const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontGlyphRangesBuilder_BuildRanges(void * jarg1, void * jarg2) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  arg2 = (ImVector< ImWchar > *)jarg2; 
  (arg1)->BuildRanges(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImFontGlyphRangesBuilder(void * jarg1) {
  ImFontGlyphRangesBuilder *arg1 = (ImFontGlyphRangesBuilder *) 0 ;
  
  arg1 = (ImFontGlyphRangesBuilder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlasCustomRect_Width_set(void * jarg1, unsigned short jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImFontAtlasCustomRect_Width_get(void * jarg1) {
  unsigned short jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (unsigned short) ((arg1)->Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlasCustomRect_Height_set(void * jarg1, unsigned short jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImFontAtlasCustomRect_Height_get(void * jarg1) {
  unsigned short jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (unsigned short) ((arg1)->Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlasCustomRect_X_set(void * jarg1, unsigned short jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImFontAtlasCustomRect_X_get(void * jarg1) {
  unsigned short jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (unsigned short) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlasCustomRect_Y_set(void * jarg1, unsigned short jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short arg2 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImFontAtlasCustomRect_Y_get(void * jarg1) {
  unsigned short jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned short result;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (unsigned short) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlasCustomRect_GlyphID_set(void * jarg1, unsigned int jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->GlyphID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlasCustomRect_GlyphID_get(void * jarg1) {
  unsigned int jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  unsigned int result;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (unsigned int) ((arg1)->GlyphID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlasCustomRect_GlyphAdvanceX_set(void * jarg1, float jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  float arg2 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GlyphAdvanceX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFontAtlasCustomRect_GlyphAdvanceX_get(void * jarg1) {
  float jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  float result;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (float) ((arg1)->GlyphAdvanceX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlasCustomRect_GlyphOffset_set(void * jarg1, void * jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->GlyphOffset = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlasCustomRect_GlyphOffset_get(void * jarg1) {
  void * jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (ImVec2 *)& ((arg1)->GlyphOffset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlasCustomRect_Font_set(void * jarg1, void * jarg2) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  if (arg1) (arg1)->Font = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlasCustomRect_Font_get(void * jarg1) {
  void * jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (ImFont *) ((arg1)->Font);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImFontAtlasCustomRect() {
  void * jresult ;
  ImFontAtlasCustomRect *result = 0 ;
  
  result = (ImFontAtlasCustomRect *)new ImFontAtlasCustomRect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlasCustomRect_IsPacked(void * jarg1) {
  unsigned int jresult ;
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  bool result;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  result = (bool)((ImFontAtlasCustomRect const *)arg1)->IsPacked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImFontAtlasCustomRect(void * jarg1) {
  ImFontAtlasCustomRect *arg1 = (ImFontAtlasCustomRect *) 0 ;
  
  arg1 = (ImFontAtlasCustomRect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImFontAtlas() {
  void * jresult ;
  ImFontAtlas *result = 0 ;
  
  result = (ImFontAtlas *)new ImFontAtlas();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImFontAtlas(void * jarg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFont(void * jarg1, void * jarg2) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImFontConfig *)jarg2; 
  result = (ImFont *)(arg1)->AddFont((ImFontConfig const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontDefault__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImFontConfig *)jarg2; 
  result = (ImFont *)(arg1)->AddFontDefault((ImFontConfig const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontDefault__SWIG_1(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImFont *)(arg1)->AddFontDefault();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromFileTTF__SWIG_0(void * jarg1, char * jarg2, float jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImFontConfig *)jarg4; 
  arg5 = (ImWchar *)jarg5; 
  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromFileTTF__SWIG_1(void * jarg1, char * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImFontConfig *)jarg4; 
  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3,(ImFontConfig const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromFileTTF__SWIG_2(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = (ImFont *)(arg1)->AddFontFromFileTTF((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryTTF__SWIG_0(void * jarg1, void * jarg2, int jarg3, float jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImFontConfig *)jarg5; 
  arg6 = (ImWchar *)jarg6; 
  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryTTF__SWIG_1(void * jarg1, void * jarg2, int jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImFontConfig *)jarg5; 
  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4,(ImFontConfig const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryTTF__SWIG_2(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  result = (ImFont *)(arg1)->AddFontFromMemoryTTF(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_0(void * jarg1, void * jarg2, int jarg3, float jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImWchar *arg6 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImFontConfig *)jarg5; 
  arg6 = (ImWchar *)jarg6; 
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5,(ImWchar const *)arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_1(void * jarg1, void * jarg2, int jarg3, float jarg4, void * jarg5) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFontConfig *arg5 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (ImFontConfig *)jarg5; 
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4,(ImFontConfig const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryCompressedTTF__SWIG_2(void * jarg1, void * jarg2, int jarg3, float jarg4) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  int arg3 ;
  float arg4 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (void *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedTTF((void const *)arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_0(void * jarg1, char * jarg2, float jarg3, void * jarg4, void * jarg5) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImWchar *arg5 = (ImWchar *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImFontConfig *)jarg4; 
  arg5 = (ImWchar *)jarg5; 
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4,(ImWchar const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_1(void * jarg1, char * jarg2, float jarg3, void * jarg4) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFontConfig *arg4 = (ImFontConfig *) 0 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImFontConfig *)jarg4; 
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3,(ImFontConfig const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_AddFontFromMemoryCompressedBase85TTF__SWIG_2(void * jarg1, char * jarg2, float jarg3) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  ImFont *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = (ImFont *)(arg1)->AddFontFromMemoryCompressedBase85TTF((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_ClearInputData(void * jarg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  (arg1)->ClearInputData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_ClearTexData(void * jarg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  (arg1)->ClearTexData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_ClearFonts(void * jarg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  (arg1)->ClearFonts();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_Clear(void * jarg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlas_Build(void * jarg1) {
  unsigned int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (bool)(arg1)->Build();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_GetTexDataAsAlpha8__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_GetTexDataAsAlpha8__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->GetTexDataAsAlpha8(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_GetTexDataAsRGBA32__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  arg5 = (int *)jarg5; 
  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_GetTexDataAsRGBA32__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char **arg2 = (unsigned char **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (unsigned char **)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  (arg1)->GetTexDataAsRGBA32(arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlas_IsBuilt(void * jarg1) {
  unsigned int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (bool)((ImFontAtlas const *)arg1)->IsBuilt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_SetTexID(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  (arg1)->SetTexID(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesDefault(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesDefault();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesGreek(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesGreek();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesKorean(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesKorean();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesJapanese(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesJapanese();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesChineseFull(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesChineseFull();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesChineseSimplifiedCommon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesCyrillic(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesCyrillic();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesThai(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesThai();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetGlyphRangesVietnamese(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImWchar *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImWchar *)(arg1)->GetGlyphRangesVietnamese();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_AddCustomRectRegular(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->AddCustomRectRegular(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_AddCustomRectFontGlyph__SWIG_0(void * jarg1, void * jarg2, unsigned short jarg3, int jarg4, int jarg5, float jarg6, void * jarg7) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImWchar arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  ImVec2 *arg7 = 0 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  arg3 = (ImWchar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (ImVec2 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (int)(arg1)->AddCustomRectFontGlyph(arg2,arg3,arg4,arg5,arg6,(ImVec2 const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_AddCustomRectFontGlyph__SWIG_1(void * jarg1, void * jarg2, unsigned short jarg3, int jarg4, int jarg5, float jarg6) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFont *arg2 = (ImFont *) 0 ;
  ImWchar arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImFont *)jarg2; 
  arg3 = (ImWchar)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (float)jarg6; 
  result = (int)(arg1)->AddCustomRectFontGlyph(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_GetCustomRectByIndex(void * jarg1, int jarg2) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  ImFontAtlasCustomRect *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (int)jarg2; 
  result = (ImFontAtlasCustomRect *)(arg1)->GetCustomRectByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_CalcCustomRectUV(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasCustomRect *arg2 = (ImFontAtlasCustomRect *) 0 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImFontAtlasCustomRect *)jarg2; 
  arg3 = (ImVec2 *)jarg3; 
  arg4 = (ImVec2 *)jarg4; 
  ((ImFontAtlas const *)arg1)->CalcCustomRectUV((ImFontAtlasCustomRect const *)arg2,arg3,arg4);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlas_GetMouseCursorTexData(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6) {
  unsigned int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImGuiMouseCursor arg2 ;
  ImVec2 *arg3 = (ImVec2 *) 0 ;
  ImVec2 *arg4 = (ImVec2 *) 0 ;
  ImVec2 *arg5 = (ImVec2 *) (ImVec2 *)0 ;
  ImVec2 *arg6 = (ImVec2 *) (ImVec2 *)0 ;
  bool result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImGuiMouseCursor)jarg2; 
  arg3 = (ImVec2 *)jarg3; 
  arg4 = (ImVec2 *)jarg4; 
  arg5 = (ImVec2 *)jarg5; 
  arg6 = (ImVec2 *)jarg6; 
  result = (bool)(arg1)->GetMouseCursorTexData(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_Flags_set(void * jarg1, int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasFlags arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImFontAtlasFlags)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_Flags_get(void * jarg1) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontAtlasFlags result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImFontAtlasFlags) ((arg1)->Flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexID_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID arg2 = (ImTextureID) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImTextureID)jarg2; 
  if (arg1) (arg1)->TexID = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_TexID_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImTextureID result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImTextureID) ((arg1)->TexID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexDesiredWidth_set(void * jarg1, int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TexDesiredWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_TexDesiredWidth_get(void * jarg1) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (int) ((arg1)->TexDesiredWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexGlyphPadding_set(void * jarg1, int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TexGlyphPadding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_TexGlyphPadding_get(void * jarg1) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (int) ((arg1)->TexGlyphPadding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_Locked_set(void * jarg1, unsigned int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Locked = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlas_Locked_get(void * jarg1) {
  unsigned int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (bool) ((arg1)->Locked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_UserData_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->UserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_UserData_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (void *) ((arg1)->UserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexReady_set(void * jarg1, unsigned int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->TexReady = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlas_TexReady_get(void * jarg1) {
  unsigned int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (bool) ((arg1)->TexReady);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexPixelsUseColors_set(void * jarg1, unsigned int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->TexPixelsUseColors = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlas_TexPixelsUseColors_get(void * jarg1) {
  unsigned int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  bool result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (bool) ((arg1)->TexPixelsUseColors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexPixelsAlpha8_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char *arg2 = (unsigned char *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  if (arg1) (arg1)->TexPixelsAlpha8 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_TexPixelsAlpha8_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (unsigned char *) ((arg1)->TexPixelsAlpha8);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexPixelsRGBA32_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  if (arg1) (arg1)->TexPixelsRGBA32 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_TexPixelsRGBA32_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (unsigned int *) ((arg1)->TexPixelsRGBA32);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexWidth_set(void * jarg1, int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TexWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_TexWidth_get(void * jarg1) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (int) ((arg1)->TexWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexHeight_set(void * jarg1, int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TexHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_TexHeight_get(void * jarg1) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (int) ((arg1)->TexHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexUvScale_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->TexUvScale = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_TexUvScale_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImVec2 *)& ((arg1)->TexUvScale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexUvWhitePixel_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->TexUvWhitePixel = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_TexUvWhitePixel_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImVec2 *)& ((arg1)->TexUvWhitePixel);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_Fonts_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFont * > *arg2 = (ImVector< ImFont * > *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImVector< ImFont * > *)jarg2; 
  if (arg1) (arg1)->Fonts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_Fonts_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFont * > *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImVector< ImFont * > *)& ((arg1)->Fonts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_CustomRects_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontAtlasCustomRect > *arg2 = (ImVector< ImFontAtlasCustomRect > *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImVector< ImFontAtlasCustomRect > *)jarg2; 
  if (arg1) (arg1)->CustomRects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_CustomRects_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontAtlasCustomRect > *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImVector< ImFontAtlasCustomRect > *)& ((arg1)->CustomRects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_ConfigData_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontConfig > *arg2 = (ImVector< ImFontConfig > *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImVector< ImFontConfig > *)jarg2; 
  if (arg1) (arg1)->ConfigData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_ConfigData_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVector< ImFontConfig > *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImVector< ImFontConfig > *)& ((arg1)->ConfigData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_TexUvLines_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec4 *arg2 = (ImVec4 *) (ImVec4 *)0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImVec4 *)jarg2; 
  {
    size_t ii;
    ImVec4 *b = (ImVec4 *) arg1->TexUvLines;
    for (ii = 0; ii < (size_t)(63) +1; ii++) b[ii] = *((ImVec4 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_TexUvLines_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImVec4 *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImVec4 *)(ImVec4 *) ((arg1)->TexUvLines);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_FontBuilderIO_set(void * jarg1, void * jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontBuilderIO *arg2 = (ImFontBuilderIO *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (ImFontBuilderIO *)jarg2; 
  if (arg1) (arg1)->FontBuilderIO = (ImFontBuilderIO const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFontAtlas_FontBuilderIO_get(void * jarg1) {
  void * jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  ImFontBuilderIO *result = 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (ImFontBuilderIO *) ((arg1)->FontBuilderIO);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_FontBuilderFlags_set(void * jarg1, unsigned int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->FontBuilderFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFontAtlas_FontBuilderFlags_get(void * jarg1) {
  unsigned int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  unsigned int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (unsigned int) ((arg1)->FontBuilderFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_PackIdMouseCursors_set(void * jarg1, int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PackIdMouseCursors = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_PackIdMouseCursors_get(void * jarg1) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (int) ((arg1)->PackIdMouseCursors);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFontAtlas_PackIdLines_set(void * jarg1, int jarg2) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int arg2 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PackIdLines = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFontAtlas_PackIdLines_get(void * jarg1) {
  int jresult ;
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  int result;
  
  arg1 = (ImFontAtlas *)jarg1; 
  result = (int) ((arg1)->PackIdLines);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_IndexAdvanceX_set(void * jarg1, void * jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< float > *arg2 = (ImVector< float > *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImVector< float > *)jarg2; 
  if (arg1) (arg1)->IndexAdvanceX = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_IndexAdvanceX_get(void * jarg1) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< float > *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImVector< float > *)& ((arg1)->IndexAdvanceX);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_FallbackAdvanceX_set(void * jarg1, float jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FallbackAdvanceX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFont_FallbackAdvanceX_get(void * jarg1) {
  float jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  arg1 = (ImFont *)jarg1; 
  result = (float) ((arg1)->FallbackAdvanceX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_FontSize_set(void * jarg1, float jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FontSize = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFont_FontSize_get(void * jarg1) {
  float jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  arg1 = (ImFont *)jarg1; 
  result = (float) ((arg1)->FontSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_IndexLookup_set(void * jarg1, void * jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImWchar > *arg2 = (ImVector< ImWchar > *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImVector< ImWchar > *)jarg2; 
  if (arg1) (arg1)->IndexLookup = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_IndexLookup_get(void * jarg1) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImWchar > *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImVector< ImWchar > *)& ((arg1)->IndexLookup);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_Glyphs_set(void * jarg1, void * jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImFontGlyph > *arg2 = (ImVector< ImFontGlyph > *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImVector< ImFontGlyph > *)jarg2; 
  if (arg1) (arg1)->Glyphs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_Glyphs_get(void * jarg1) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImVector< ImFontGlyph > *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImVector< ImFontGlyph > *)& ((arg1)->Glyphs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_FallbackGlyph_set(void * jarg1, void * jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontGlyph *arg2 = (ImFontGlyph *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImFontGlyph *)jarg2; 
  if (arg1) (arg1)->FallbackGlyph = (ImFontGlyph const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_FallbackGlyph_get(void * jarg1) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontGlyph *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImFontGlyph *) ((arg1)->FallbackGlyph);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_ContainerAtlas_set(void * jarg1, void * jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontAtlas *arg2 = (ImFontAtlas *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImFontAtlas *)jarg2; 
  if (arg1) (arg1)->ContainerAtlas = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_ContainerAtlas_get(void * jarg1) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontAtlas *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImFontAtlas *) ((arg1)->ContainerAtlas);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_ConfigData_set(void * jarg1, void * jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImFontConfig *)jarg2; 
  if (arg1) (arg1)->ConfigData = (ImFontConfig const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_ConfigData_get(void * jarg1) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImFontConfig *) ((arg1)->ConfigData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_ConfigDataCount_set(void * jarg1, short jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  short arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->ConfigDataCount = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImFont_ConfigDataCount_get(void * jarg1) {
  short jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  short result;
  
  arg1 = (ImFont *)jarg1; 
  result = (short) ((arg1)->ConfigDataCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_FallbackChar_set(void * jarg1, unsigned short jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->FallbackChar = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImFont_FallbackChar_get(void * jarg1) {
  unsigned short jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar result;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImWchar) ((arg1)->FallbackChar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_EllipsisChar_set(void * jarg1, unsigned short jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  if (arg1) (arg1)->EllipsisChar = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_ImFont_EllipsisChar_get(void * jarg1) {
  unsigned short jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar result;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImWchar) ((arg1)->EllipsisChar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_EllipsisCharCount_set(void * jarg1, short jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  short arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->EllipsisCharCount = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ImFont_EllipsisCharCount_get(void * jarg1) {
  short jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  short result;
  
  arg1 = (ImFont *)jarg1; 
  result = (short) ((arg1)->EllipsisCharCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_EllipsisWidth_set(void * jarg1, float jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EllipsisWidth = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFont_EllipsisWidth_get(void * jarg1) {
  float jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  arg1 = (ImFont *)jarg1; 
  result = (float) ((arg1)->EllipsisWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_EllipsisCharStep_set(void * jarg1, float jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EllipsisCharStep = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFont_EllipsisCharStep_get(void * jarg1) {
  float jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  arg1 = (ImFont *)jarg1; 
  result = (float) ((arg1)->EllipsisCharStep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_DirtyLookupTables_set(void * jarg1, unsigned int jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  bool arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DirtyLookupTables = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFont_DirtyLookupTables_get(void * jarg1) {
  unsigned int jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  bool result;
  
  arg1 = (ImFont *)jarg1; 
  result = (bool) ((arg1)->DirtyLookupTables);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_Scale_set(void * jarg1, float jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFont_Scale_get(void * jarg1) {
  float jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  arg1 = (ImFont *)jarg1; 
  result = (float) ((arg1)->Scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_Ascent_set(void * jarg1, float jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Ascent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFont_Ascent_get(void * jarg1) {
  float jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  arg1 = (ImFont *)jarg1; 
  result = (float) ((arg1)->Ascent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_Descent_set(void * jarg1, float jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Descent = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFont_Descent_get(void * jarg1) {
  float jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float result;
  
  arg1 = (ImFont *)jarg1; 
  result = (float) ((arg1)->Descent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_MetricsTotalSurface_set(void * jarg1, int jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  int arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MetricsTotalSurface = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImFont_MetricsTotalSurface_get(void * jarg1) {
  int jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  int result;
  
  arg1 = (ImFont *)jarg1; 
  result = (int) ((arg1)->MetricsTotalSurface);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_Used4kPagesMap_set(void * jarg1, void * jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImU8 *arg2 = (ImU8 *) (ImU8 *)0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImU8 *)jarg2; 
  {
    size_t ii;
    ImU8 *b = (ImU8 *) arg1->Used4kPagesMap;
    for (ii = 0; ii < (size_t)(0xFFFF+1)/4096/8; ii++) b[ii] = *((ImU8 *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_Used4kPagesMap_get(void * jarg1) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImU8 *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  result = (ImU8 *)(ImU8 *) ((arg1)->Used4kPagesMap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImFont() {
  void * jresult ;
  ImFont *result = 0 ;
  
  result = (ImFont *)new ImFont();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImFont(void * jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_FindGlyph(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFontGlyph *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  result = (ImFontGlyph *)((ImFont const *)arg1)->FindGlyph(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_FindGlyphNoFallback(void * jarg1, unsigned short jarg2) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImFontGlyph *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  result = (ImFontGlyph *)((ImFont const *)arg1)->FindGlyphNoFallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImFont_GetCharAdvance(void * jarg1, unsigned short jarg2) {
  float jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  float result;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  result = (float)((ImFont const *)arg1)->GetCharAdvance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFont_IsLoaded(void * jarg1) {
  unsigned int jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  bool result;
  
  arg1 = (ImFont *)jarg1; 
  result = (bool)((ImFont const *)arg1)->IsLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImFont_GetDebugName(void * jarg1) {
  char * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  char *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  result = (char *)((ImFont const *)arg1)->GetDebugName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_CalcTextSizeA__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, char * jarg5, char * jarg6, void * jarg7) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char **arg7 = (char **) 0 ;
  ImVec2 result;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (char **)jarg7; 
  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6,(char const **)arg7);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_CalcTextSizeA__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  ImVec2 result;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (char *)jarg6; 
  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImFont_CalcTextSizeA__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, char * jarg5) {
  void * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  ImVec2 result;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  result = ((ImFont const *)arg1)->CalcTextSizeA(arg2,arg3,arg4,(char const *)arg5);
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ImFont_CalcWordWrapPositionA(void * jarg1, float jarg2, char * jarg3, char * jarg4, float jarg5) {
  char * jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  float arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  float arg5 ;
  char *result = 0 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (float)jarg5; 
  result = (char *)((ImFont const *)arg1)->CalcWordWrapPositionA(arg2,(char const *)arg3,(char const *)arg4,arg5);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_RenderChar(void * jarg1, void * jarg2, float jarg3, void * jarg4, unsigned int jarg5, unsigned short jarg6) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImDrawList *arg2 = (ImDrawList *) 0 ;
  float arg3 ;
  ImVec2 *arg4 = 0 ;
  ImU32 arg5 ;
  ImWchar arg6 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImDrawList *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg5 = (ImU32)jarg5; 
  arg6 = (ImWchar)jarg6; 
  ((ImFont const *)arg1)->RenderChar(arg2,arg3,(ImVec2 const &)*arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_BuildLookupTable(void * jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  (arg1)->BuildLookupTable();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_ClearOutputData(void * jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  (arg1)->ClearOutputData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_GrowIndex(void * jarg1, int jarg2) {
  ImFont *arg1 = (ImFont *) 0 ;
  int arg2 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->GrowIndex(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_AddGlyph(void * jarg1, void * jarg2, unsigned short jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImFontConfig *arg2 = (ImFontConfig *) 0 ;
  ImWchar arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImFontConfig *)jarg2; 
  arg3 = (ImWchar)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  arg9 = (float)jarg9; 
  arg10 = (float)jarg10; 
  arg11 = (float)jarg11; 
  arg12 = (float)jarg12; 
  (arg1)->AddGlyph((ImFontConfig const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_AddRemapChar__SWIG_0(void * jarg1, unsigned short jarg2, unsigned short jarg3, unsigned int jarg4) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImWchar arg3 ;
  bool arg4 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  arg3 = (ImWchar)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->AddRemapChar(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_AddRemapChar__SWIG_1(void * jarg1, unsigned short jarg2, unsigned short jarg3) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  ImWchar arg3 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  arg3 = (ImWchar)jarg3; 
  (arg1)->AddRemapChar(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImFont_SetGlyphVisible(void * jarg1, unsigned short jarg2, unsigned int jarg3) {
  ImFont *arg1 = (ImFont *) 0 ;
  ImWchar arg2 ;
  bool arg3 ;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (ImWchar)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetGlyphVisible(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImFont_IsGlyphRangeUnused(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ImFont *arg1 = (ImFont *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (ImFont *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->IsGlyphRangeUnused(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_ID_set(void * jarg1, unsigned int jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiViewport_ID_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImGuiID) ((arg1)->ID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_Flags_set(void * jarg1, int jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiViewportFlags arg2 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImGuiViewportFlags)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ImGuiViewport_Flags_get(void * jarg1) {
  int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiViewportFlags result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImGuiViewportFlags) ((arg1)->Flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_Pos_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->Pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_Pos_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImVec2 *)& ((arg1)->Pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_Size_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->Size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_Size_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImVec2 *)& ((arg1)->Size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_WorkPos_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->WorkPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_WorkPos_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImVec2 *)& ((arg1)->WorkPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_WorkSize_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->WorkSize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_WorkSize_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImVec2 *)& ((arg1)->WorkSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_DpiScale_set(void * jarg1, float jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DpiScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiViewport_DpiScale_get(void * jarg1) {
  float jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  float result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (float) ((arg1)->DpiScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_ParentViewportId_set(void * jarg1, unsigned int jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID arg2 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImGuiID)jarg2; 
  if (arg1) (arg1)->ParentViewportId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiViewport_ParentViewportId_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImGuiID result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImGuiID) ((arg1)->ParentViewportId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_DrawData_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImDrawData *arg2 = (ImDrawData *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (ImDrawData *)jarg2; 
  if (arg1) (arg1)->DrawData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_DrawData_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImDrawData *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (ImDrawData *) ((arg1)->DrawData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_RendererUserData_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->RendererUserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_RendererUserData_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (void *) ((arg1)->RendererUserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_PlatformUserData_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->PlatformUserData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_PlatformUserData_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (void *) ((arg1)->PlatformUserData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_PlatformHandle_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->PlatformHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_PlatformHandle_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (void *) ((arg1)->PlatformHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_PlatformHandleRaw_set(void * jarg1, void * jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->PlatformHandleRaw = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_PlatformHandleRaw_get(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (void *) ((arg1)->PlatformHandleRaw);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_PlatformWindowCreated_set(void * jarg1, unsigned int jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PlatformWindowCreated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiViewport_PlatformWindowCreated_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (bool) ((arg1)->PlatformWindowCreated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_PlatformRequestMove_set(void * jarg1, unsigned int jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PlatformRequestMove = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiViewport_PlatformRequestMove_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (bool) ((arg1)->PlatformRequestMove);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_PlatformRequestResize_set(void * jarg1, unsigned int jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PlatformRequestResize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiViewport_PlatformRequestResize_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (bool) ((arg1)->PlatformRequestResize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiViewport_PlatformRequestClose_set(void * jarg1, unsigned int jarg2) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PlatformRequestClose = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiViewport_PlatformRequestClose_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  bool result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = (bool) ((arg1)->PlatformRequestClose);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiViewport() {
  void * jresult ;
  ImGuiViewport *result = 0 ;
  
  result = (ImGuiViewport *)new ImGuiViewport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiViewport(void * jarg1) {
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  
  arg1 = (ImGuiViewport *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_GetCenter(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = ((ImGuiViewport const *)arg1)->GetCenter();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiViewport_GetWorkCenter(void * jarg1) {
  void * jresult ;
  ImGuiViewport *arg1 = (ImGuiViewport *) 0 ;
  ImVec2 result;
  
  arg1 = (ImGuiViewport *)jarg1; 
  result = ((ImGuiViewport const *)arg1)->GetWorkCenter();
  jresult = new ImVec2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_CreateWindow_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_CreateWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_CreateWindow_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_CreateWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_DestroyWindow_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_DestroyWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_DestroyWindow_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_DestroyWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_ShowWindow_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_ShowWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_ShowWindow_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_ShowWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowPos_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,ImVec2))jarg2; 
  if (arg1) (arg1)->Platform_SetWindowPos = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowPos_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,ImVec2) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Platform_SetWindowPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowPos_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVec2 (*arg2)(ImGuiViewport *) = (ImVec2 (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (ImVec2 (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_GetWindowPos = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowPos_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVec2 (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (ImVec2 (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowSize_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,ImVec2))jarg2; 
  if (arg1) (arg1)->Platform_SetWindowSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowSize_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,ImVec2) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Platform_SetWindowSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowSize_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVec2 (*arg2)(ImGuiViewport *) = (ImVec2 (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (ImVec2 (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_GetWindowSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowSize_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVec2 (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (ImVec2 (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowFocus_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_SetWindowFocus = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowFocus_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_SetWindowFocus);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowFocus_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  bool (*arg2)(ImGuiViewport *) = (bool (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (bool (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_GetWindowFocus = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowFocus_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  bool (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (bool (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowFocus);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowMinimized_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  bool (*arg2)(ImGuiViewport *) = (bool (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (bool (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_GetWindowMinimized = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowMinimized_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  bool (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (bool (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowMinimized);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowTitle_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,char const *) = (void (*)(ImGuiViewport *,char const *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,char const *))jarg2; 
  if (arg1) (arg1)->Platform_SetWindowTitle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowTitle_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,char const *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,char const *)) ((arg1)->Platform_SetWindowTitle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowAlpha_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,float) = (void (*)(ImGuiViewport *,float)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,float))jarg2; 
  if (arg1) (arg1)->Platform_SetWindowAlpha = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SetWindowAlpha_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,float) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,float)) ((arg1)->Platform_SetWindowAlpha);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_UpdateWindow_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_UpdateWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_UpdateWindow_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_UpdateWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_RenderWindow_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,void *))jarg2; 
  if (arg1) (arg1)->Platform_RenderWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_RenderWindow_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,void *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Platform_RenderWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SwapBuffers_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,void *))jarg2; 
  if (arg1) (arg1)->Platform_SwapBuffers = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_SwapBuffers_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,void *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Platform_SwapBuffers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowDpiScale_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  float (*arg2)(ImGuiViewport *) = (float (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (float (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_GetWindowDpiScale = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_GetWindowDpiScale_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  float (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (float (*)(ImGuiViewport *)) ((arg1)->Platform_GetWindowDpiScale);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_OnChangedViewport_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Platform_OnChangedViewport = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_OnChangedViewport_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *)) ((arg1)->Platform_OnChangedViewport);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_CreateVkSurface_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  int (*arg2)(ImGuiViewport *,ImU64,void const *,ImU64 *) = (int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *))jarg2; 
  if (arg1) (arg1)->Platform_CreateVkSurface = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Platform_CreateVkSurface_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  int (*result)(ImGuiViewport *,ImU64,void const *,ImU64 *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (int (*)(ImGuiViewport *,ImU64,void const *,ImU64 *)) ((arg1)->Platform_CreateVkSurface);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_CreateWindow_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Renderer_CreateWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_CreateWindow_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *)) ((arg1)->Renderer_CreateWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_DestroyWindow_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *) = (void (*)(ImGuiViewport *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *))jarg2; 
  if (arg1) (arg1)->Renderer_DestroyWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_DestroyWindow_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *)) ((arg1)->Renderer_DestroyWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_SetWindowSize_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,ImVec2) = (void (*)(ImGuiViewport *,ImVec2)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,ImVec2))jarg2; 
  if (arg1) (arg1)->Renderer_SetWindowSize = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_SetWindowSize_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,ImVec2) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,ImVec2)) ((arg1)->Renderer_SetWindowSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_RenderWindow_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,void *))jarg2; 
  if (arg1) (arg1)->Renderer_RenderWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_RenderWindow_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,void *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Renderer_RenderWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_SwapBuffers_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*arg2)(ImGuiViewport *,void *) = (void (*)(ImGuiViewport *,void *)) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (void (*)(ImGuiViewport *,void *))jarg2; 
  if (arg1) (arg1)->Renderer_SwapBuffers = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Renderer_SwapBuffers_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  void (*result)(ImGuiViewport *,void *) = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (void (*)(ImGuiViewport *,void *)) ((arg1)->Renderer_SwapBuffers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Monitors_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVector< ImGuiPlatformMonitor > *arg2 = (ImVector< ImGuiPlatformMonitor > *) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (ImVector< ImGuiPlatformMonitor > *)jarg2; 
  if (arg1) (arg1)->Monitors = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Monitors_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVector< ImGuiPlatformMonitor > *result = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (ImVector< ImGuiPlatformMonitor > *)& ((arg1)->Monitors);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformIO_Viewports_set(void * jarg1, void * jarg2) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVector< ImGuiViewport * > *arg2 = (ImVector< ImGuiViewport * > *) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  arg2 = (ImVector< ImGuiViewport * > *)jarg2; 
  if (arg1) (arg1)->Viewports = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformIO_Viewports_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  ImVector< ImGuiViewport * > *result = 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  result = (ImVector< ImGuiViewport * > *)& ((arg1)->Viewports);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiPlatformIO() {
  void * jresult ;
  ImGuiPlatformIO *result = 0 ;
  
  result = (ImGuiPlatformIO *)new ImGuiPlatformIO();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiPlatformIO(void * jarg1) {
  ImGuiPlatformIO *arg1 = (ImGuiPlatformIO *) 0 ;
  
  arg1 = (ImGuiPlatformIO *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformMonitor_MainPos_set(void * jarg1, void * jarg2) {
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->MainPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformMonitor_MainPos_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  result = (ImVec2 *)& ((arg1)->MainPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformMonitor_MainSize_set(void * jarg1, void * jarg2) {
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->MainSize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformMonitor_MainSize_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  result = (ImVec2 *)& ((arg1)->MainSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformMonitor_WorkPos_set(void * jarg1, void * jarg2) {
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->WorkPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformMonitor_WorkPos_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  result = (ImVec2 *)& ((arg1)->WorkPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformMonitor_WorkSize_set(void * jarg1, void * jarg2) {
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->WorkSize = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformMonitor_WorkSize_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  result = (ImVec2 *)& ((arg1)->WorkSize);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformMonitor_DpiScale_set(void * jarg1, float jarg2) {
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DpiScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiPlatformMonitor_DpiScale_get(void * jarg1) {
  float jresult ;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  float result;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  result = (float) ((arg1)->DpiScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformMonitor_PlatformHandle_set(void * jarg1, void * jarg2) {
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->PlatformHandle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformMonitor_PlatformHandle_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  void *result = 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  result = (void *) ((arg1)->PlatformHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiPlatformMonitor() {
  void * jresult ;
  ImGuiPlatformMonitor *result = 0 ;
  
  result = (ImGuiPlatformMonitor *)new ImGuiPlatformMonitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiPlatformMonitor(void * jarg1) {
  ImGuiPlatformMonitor *arg1 = (ImGuiPlatformMonitor *) 0 ;
  
  arg1 = (ImGuiPlatformMonitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformImeData_WantVisible_set(void * jarg1, unsigned int jarg2) {
  ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ;
  bool arg2 ;
  
  arg1 = (ImGuiPlatformImeData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->WantVisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImGuiPlatformImeData_WantVisible_get(void * jarg1) {
  unsigned int jresult ;
  ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ;
  bool result;
  
  arg1 = (ImGuiPlatformImeData *)jarg1; 
  result = (bool) ((arg1)->WantVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformImeData_InputPos_set(void * jarg1, void * jarg2) {
  ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ;
  ImVec2 *arg2 = (ImVec2 *) 0 ;
  
  arg1 = (ImGuiPlatformImeData *)jarg1; 
  arg2 = (ImVec2 *)jarg2; 
  if (arg1) (arg1)->InputPos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ImGuiPlatformImeData_InputPos_get(void * jarg1) {
  void * jresult ;
  ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ;
  ImVec2 *result = 0 ;
  
  arg1 = (ImGuiPlatformImeData *)jarg1; 
  result = (ImVec2 *)& ((arg1)->InputPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ImGuiPlatformImeData_InputLineHeight_set(void * jarg1, float jarg2) {
  ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ;
  float arg2 ;
  
  arg1 = (ImGuiPlatformImeData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->InputLineHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ImGuiPlatformImeData_InputLineHeight_get(void * jarg1) {
  float jresult ;
  ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ;
  float result;
  
  arg1 = (ImGuiPlatformImeData *)jarg1; 
  result = (float) ((arg1)->InputLineHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ImGuiPlatformImeData() {
  void * jresult ;
  ImGuiPlatformImeData *result = 0 ;
  
  result = (ImGuiPlatformImeData *)new ImGuiPlatformImeData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ImGuiPlatformImeData(void * jarg1) {
  ImGuiPlatformImeData *arg1 = (ImGuiPlatformImeData *) 0 ;
  
  arg1 = (ImGuiPlatformImeData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_GetKeyIndex(int jarg1) {
  int jresult ;
  ImGuiKey arg1 ;
  ImGuiKey result;
  
  arg1 = (ImGuiKey)jarg1; 
  result = (ImGuiKey)ImGui::GetKeyIndex(arg1);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChildFrame__SWIG_0(unsigned int jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  ImGuiWindowFlags arg3 ;
  bool result;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImGuiWindowFlags)jarg3; 
  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BeginChildFrame__SWIG_1(unsigned int jarg1, void * jarg2) {
  unsigned int jresult ;
  ImGuiID arg1 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (ImGuiID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::BeginChildFrame(arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndChildFrame() {
  ImGui::EndChildFrame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowStackToolWindow__SWIG_0(void * jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = (bool *)jarg1; 
  ImGui::ShowStackToolWindow(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ShowStackToolWindow__SWIG_1() {
  ImGui::ShowStackToolWindow();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBox__SWIG_4(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (bool (*)(void *,int,char const **))jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBox__SWIG_5(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (bool (*)(void *,int,char const **))jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::ListBox((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Combo__SWIG_6(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, int jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  int arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (bool (*)(void *,int,char const **))jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Combo__SWIG_7(char * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool (*arg3)(void *,int,char const **) = (bool (*)(void *,int,char const **)) 0 ;
  void *arg4 = (void *) 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (bool (*)(void *,int,char const **))jarg3; 
  arg4 = (void *)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::Combo((char const *)arg1,arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SetItemAllowOverlap() {
  ImGui::SetItemAllowOverlap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PushAllowKeyboardFocus(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::PushAllowKeyboardFocus(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PopAllowKeyboardFocus() {
  ImGui::PopAllowKeyboardFocus();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_5(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6, void * jarg7) {
  unsigned int jresult ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  ImVec4 *arg7 = 0 ;
  bool result;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (ImVec4 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  arg7 = (ImVec4 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6,(ImVec4 const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_6(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5, void * jarg6) {
  unsigned int jresult ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  ImVec4 *arg6 = 0 ;
  bool result;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  arg6 = (ImVec4 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5,(ImVec4 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_7(void * jarg1, void * jarg2, void * jarg3, void * jarg4, int jarg5) {
  unsigned int jresult ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_8(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  ImVec2 *arg4 = 0 ;
  bool result;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg4 = (ImVec2 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3,(ImVec2 const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_9(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  ImVec2 *arg3 = 0 ;
  bool result;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  arg3 = (ImVec2 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2,(ImVec2 const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ImageButton__SWIG_10(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  ImTextureID arg1 = (ImTextureID) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (ImTextureID)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ImageButton(arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CaptureKeyboardFromApp__SWIG_0(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::CaptureKeyboardFromApp(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CaptureKeyboardFromApp__SWIG_1() {
  ImGui::CaptureKeyboardFromApp();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CaptureMouseFromApp__SWIG_0(unsigned int jarg1) {
  bool arg1 ;
  
  arg1 = jarg1 ? true : false; 
  ImGui::CaptureMouseFromApp(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CaptureMouseFromApp__SWIG_1() {
  ImGui::CaptureMouseFromApp();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CalcListClipping(int jarg1, float jarg2, void * jarg3, void * jarg4) {
  int arg1 ;
  float arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = (int *)jarg4; 
  ImGui::CalcListClipping(arg1,arg2,arg3,arg4);
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetWindowContentRegionWidth() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetWindowContentRegionWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBoxHeader__SWIG_0(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImVec2 *arg2 = 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImVec2 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return 0;
  } 
  result = (bool)ImGui::ListBoxHeader((char const *)arg1,(ImVec2 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBoxHeader__SWIG_1(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)ImGui::ListBoxHeader((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBoxHeader__SWIG_2(char * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ListBoxHeader__SWIG_3(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)ImGui::ListBoxHeader((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ListBoxFooter() {
  ImGui::ListBoxFooter();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat__SWIG_6(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6, float jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)ImGui::DragFloat((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat2__SWIG_6(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6, float jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)ImGui::DragFloat2((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat3__SWIG_6(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6, float jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)ImGui::DragFloat3((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DragFloat4__SWIG_6(char * jarg1, void * jarg2, float jarg3, float jarg4, float jarg5, char * jarg6, float jarg7) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  char *arg6 = (char *) 0 ;
  float arg7 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = (float)jarg7; 
  result = (bool)ImGui::DragFloat4((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat__SWIG_3(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, float jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)ImGui::SliderFloat((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat2__SWIG_3(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, float jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)ImGui::SliderFloat2((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat3__SWIG_3(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, float jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)ImGui::SliderFloat3((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SliderFloat4__SWIG_3(char * jarg1, void * jarg2, float jarg3, float jarg4, char * jarg5, float jarg6) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  float arg6 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)ImGui::SliderFloat4((char const *)arg1,arg2,arg3,arg4,(char const *)arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TreeAdvanceToLabelPos() {
  ImGui::TreeAdvanceToLabelPos();
}


SWIGEXPORT float SWIGSTDCALL CSharp_GetContentRegionAvailWidth() {
  float jresult ;
  float result;
  
  result = (float)ImGui::GetContentRegionAvailWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DrawSplitter(unsigned int jarg1, float jarg2, void * jarg3, void * jarg4, float jarg5, float jarg6) {
  bool arg1 ;
  float arg2 ;
  float *arg3 = (float *) 0 ;
  float *arg4 = (float *) 0 ;
  float arg5 ;
  float arg6 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (float)jarg2; 
  arg3 = (float *)jarg3; 
  arg4 = (float *)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  mq::imgui::DrawSplitter(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HelpMarker__SWIG_0(char * jarg1, float jarg2, void * jarg3) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  ImFont *arg3 = (ImFont *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (ImFont *)jarg3; 
  mq::imgui::HelpMarker((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HelpMarker__SWIG_1(char * jarg1, float jarg2) {
  char *arg1 = (char *) 0 ;
  float arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (float)jarg2; 
  mq::imgui::HelpMarker((char const *)arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HelpMarker__SWIG_2(char * jarg1) {
  char *arg1 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  mq::imgui::HelpMarker((char const *)arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HelpMarker__SWIG_3(void * jarg1, float jarg2, void * jarg3) {
  std::function< std::string () > *arg1 = 0 ;
  float arg2 ;
  ImFont *arg3 = (ImFont *) 0 ;
  
  arg1 = (std::function< std::string () > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< std::string () > const & is null", 0);
    return ;
  } 
  arg2 = (float)jarg2; 
  arg3 = (ImFont *)jarg3; 
  mq::imgui::HelpMarker((std::function< std::string () > const &)*arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HelpMarker__SWIG_4(void * jarg1, float jarg2) {
  std::function< std::string () > *arg1 = 0 ;
  float arg2 ;
  
  arg1 = (std::function< std::string () > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< std::string () > const & is null", 0);
    return ;
  } 
  arg2 = (float)jarg2; 
  mq::imgui::HelpMarker((std::function< std::string () > const &)*arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_HelpMarker__SWIG_5(void * jarg1) {
  std::function< std::string () > *arg1 = 0 ;
  
  arg1 = (std::function< std::string () > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::function< std::string () > const & is null", 0);
    return ;
  } 
  mq::imgui::HelpMarker((std::function< std::string () > const &)*arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderTextCentered__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  ImVec2 *arg1 = 0 ;
  ImVec4 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  mq::imgui::RenderTextCentered((ImVec2 const &)*arg1,(ImVec4 const &)*arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderTextCentered__SWIG_1(int jarg1, int jarg2, void * jarg3, char * jarg4) {
  int arg1 ;
  int arg2 ;
  ImVec4 *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ImVec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  arg4 = (char *)jarg4; 
  mq::imgui::RenderTextCentered(arg1,arg2,(ImVec4 const &)*arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderTextRight__SWIG_0(void * jarg1, void * jarg2, char * jarg3) {
  ImVec2 *arg1 = 0 ;
  ImVec4 *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (ImVec2 *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec2 const & is null", 0);
    return ;
  } 
  arg2 = (ImVec4 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  arg3 = (char *)jarg3; 
  mq::imgui::RenderTextRight((ImVec2 const &)*arg1,(ImVec4 const &)*arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_RenderTextRight__SWIG_1(int jarg1, int jarg2, void * jarg3, char * jarg4) {
  int arg1 ;
  int arg2 ;
  ImVec4 *arg3 = 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (ImVec4 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "ImVec4 const & is null", 0);
    return ;
  } 
  arg4 = (char *)jarg4; 
  mq::imgui::RenderTextRight(arg1,arg2,(ImVec4 const &)*arg3,(char const *)arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollapsingSubHeader__SWIG_0(char * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  ImGuiTreeNodeFlags arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  arg3 = (ImGuiTreeNodeFlags)jarg3; 
  result = (bool)mq::imgui::CollapsingSubHeader((char const *)arg1,arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollapsingSubHeader__SWIG_1(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)mq::imgui::CollapsingSubHeader((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollapsingSubHeader__SWIG_2(char * jarg1, int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  ImGuiTreeNodeFlags arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (ImGuiTreeNodeFlags)jarg2; 
  result = (bool)mq::imgui::CollapsingSubHeader((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CollapsingSubHeader__SWIG_3(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)mq::imgui::CollapsingSubHeader((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfigureFonts(void * jarg1) {
  ImFontAtlas *arg1 = (ImFontAtlas *) 0 ;
  
  arg1 = (ImFontAtlas *)jarg1; 
  mq::imgui::ConfigureFonts(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DefaultFont_set(void * jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  mq::imgui::DefaultFont = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DefaultFont_get() {
  void * jresult ;
  ImFont *result = 0 ;
  
  result = (ImFont *)mq::imgui::DefaultFont;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConsoleFont_set(void * jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  mq::imgui::ConsoleFont = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConsoleFont_get() {
  void * jresult ;
  ImFont *result = 0 ;
  
  result = (ImFont *)mq::imgui::ConsoleFont;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeTextFont_set(void * jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  mq::imgui::LargeTextFont = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LargeTextFont_get() {
  void * jresult ;
  ImFont *result = 0 ;
  
  result = (ImFont *)mq::imgui::LargeTextFont;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LargeIconFont_set(void * jarg1) {
  ImFont *arg1 = (ImFont *) 0 ;
  
  arg1 = (ImFont *)jarg1; 
  mq::imgui::LargeIconFont = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LargeIconFont_get() {
  void * jresult ;
  ImFont *result = 0 ;
  
  result = (ImFont *)mq::imgui::LargeIconFont;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ConfigureStyle() {
  mq::imgui::ConfigureStyle();
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColumnHeader_label_set(void * jarg1, char * jarg2) {
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->label = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->label, (const char *)arg2);
    } else {
      arg1->label = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ColumnHeader_label_get(void * jarg1) {
  char * jresult ;
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  result = (char *) ((arg1)->label);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColumnHeader_size_set(void * jarg1, float jarg2) {
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  float arg2 ;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColumnHeader_size_get(void * jarg1) {
  float jresult ;
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  float result;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  result = (float) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColumnHeader_sizeMIN_set(void * jarg1, float jarg2) {
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  float arg2 ;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->sizeMIN = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ColumnHeader_sizeMIN_get(void * jarg1) {
  float jresult ;
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  float result;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  result = (float) ((arg1)->sizeMIN);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColumnHeader_allowResize_set(void * jarg1, unsigned int jarg2) {
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->allowResize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ColumnHeader_allowResize_get(void * jarg1) {
  unsigned int jresult ;
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  bool result;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  result = (bool) ((arg1)->allowResize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ColumnHeader() {
  void * jresult ;
  mq::imgui::ColumnHeader *result = 0 ;
  
  result = (mq::imgui::ColumnHeader *)new mq::imgui::ColumnHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ColumnHeader(void * jarg1) {
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColumnHeaders__SWIG_0(char * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  char *arg1 = (char *) 0 ;
  mq::imgui::ColumnHeader *arg2 = (mq::imgui::ColumnHeader *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::imgui::ColumnHeader *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  mq::imgui::ColumnHeaders((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ColumnHeaders__SWIG_1(char * jarg1, void * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  mq::imgui::ColumnHeader *arg2 = (mq::imgui::ColumnHeader *) 0 ;
  int arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::imgui::ColumnHeader *)jarg2; 
  arg3 = (int)jarg3; 
  mq::imgui::ColumnHeaders((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BeginColumnHeadersSync__SWIG_0(char * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  char *arg1 = (char *) 0 ;
  mq::imgui::ColumnHeader *arg2 = (mq::imgui::ColumnHeader *) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::imgui::ColumnHeader *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  mq::imgui::BeginColumnHeadersSync((char const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_BeginColumnHeadersSync__SWIG_1(char * jarg1, void * jarg2, int jarg3) {
  char *arg1 = (char *) 0 ;
  mq::imgui::ColumnHeader *arg2 = (mq::imgui::ColumnHeader *) 0 ;
  int arg3 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (mq::imgui::ColumnHeader *)jarg2; 
  arg3 = (int)jarg3; 
  mq::imgui::BeginColumnHeadersSync((char const *)arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EndColumnHeadersSync(void * jarg1, int jarg2) {
  mq::imgui::ColumnHeader *arg1 = (mq::imgui::ColumnHeader *) 0 ;
  int arg2 ;
  
  arg1 = (mq::imgui::ColumnHeader *)jarg1; 
  arg2 = (int)jarg2; 
  mq::imgui::EndColumnHeadersSync(arg1,arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_DEFAULT_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_DARKGREY_get() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_DARKGREEN_get() {
  int jresult ;
  int result;
  
  result = (int)(0x02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_DARKBLUE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x03);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_PURPLE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x05);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_COLOR_LIGHTGREY_get() {
  int jresult ;
  int result;
  
  result = (int)(0x06);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCOLOR_GREY_get() {
  int jresult ;
  int result;
  
  result = (int)(0x06);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCOLOR_GREEN_get() {
  int jresult ;
  int result;
  
  result = (int)(0x02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCOLOR_LIGHTBLUE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCOLOR_BLUE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x04);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCOLOR_BLACK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCOLOR_WHITE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0a);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCOLOR_YELLOW_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0f);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCOLOR_RED_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0d);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SAY_get() {
  int jresult ;
  int result;
  
  result = (int)(256);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_TELL_get() {
  int jresult ;
  int result;
  
  result = (int)(257);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_GROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(258);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_GUILD_get() {
  int jresult ;
  int result;
  
  result = (int)(259);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_OOC_get() {
  int jresult ;
  int result;
  
  result = (int)(260);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_AUCTION_get() {
  int jresult ;
  int result;
  
  result = (int)(261);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SHOUT_get() {
  int jresult ;
  int result;
  
  result = (int)(262);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_EMOTE_get() {
  int jresult ;
  int result;
  
  result = (int)(263);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SPELLS_get() {
  int jresult ;
  int result;
  
  result = (int)(264);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_YOU_HIT_OTHER_get() {
  int jresult ;
  int result;
  
  result = (int)(265);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_OTHER_HIT_YOU_get() {
  int jresult ;
  int result;
  
  result = (int)(266);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_YOU_MISS_OTHER_get() {
  int jresult ;
  int result;
  
  result = (int)(267);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_OTHER_MISS_YOU_get() {
  int jresult ;
  int result;
  
  result = (int)(268);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_DUELS_get() {
  int jresult ;
  int result;
  
  result = (int)(269);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SKILLS_get() {
  int jresult ;
  int result;
  
  result = (int)(270);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_DISCIPLINES_get() {
  int jresult ;
  int result;
  
  result = (int)(271);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_UNUSED001_get() {
  int jresult ;
  int result;
  
  result = (int)(272);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_DEFAULT_get() {
  int jresult ;
  int result;
  
  result = (int)(273);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_FACTION_get() {
  int jresult ;
  int result;
  
  result = (int)(274);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_MERCHANT_OFFER_get() {
  int jresult ;
  int result;
  
  result = (int)(275);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_MERCHANT_EXCHANGE_get() {
  int jresult ;
  int result;
  
  result = (int)(276);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_YOUR_DEATH_get() {
  int jresult ;
  int result;
  
  result = (int)(277);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_OTHER_DEATH_get() {
  int jresult ;
  int result;
  
  result = (int)(278);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_OTHER_HIT_OTHER_get() {
  int jresult ;
  int result;
  
  result = (int)(279);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_OTHER_MISS_OTHER_get() {
  int jresult ;
  int result;
  
  result = (int)(280);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_WHO_get() {
  int jresult ;
  int result;
  
  result = (int)(281);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_YELL_get() {
  int jresult ;
  int result;
  
  result = (int)(282);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_NON_MELEE_get() {
  int jresult ;
  int result;
  
  result = (int)(283);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SPELL_WORN_OFF_get() {
  int jresult ;
  int result;
  
  result = (int)(284);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_MONEY_SPLIT_get() {
  int jresult ;
  int result;
  
  result = (int)(285);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_LOOT_get() {
  int jresult ;
  int result;
  
  result = (int)(286);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_RANDOM_get() {
  int jresult ;
  int result;
  
  result = (int)(287);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_OTHERS_SPELLS_get() {
  int jresult ;
  int result;
  
  result = (int)(288);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SPELL_FAILURE_get() {
  int jresult ;
  int result;
  
  result = (int)(289);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_CHANNEL_get() {
  int jresult ;
  int result;
  
  result = (int)(290);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_1_get() {
  int jresult ;
  int result;
  
  result = (int)(291);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_2_get() {
  int jresult ;
  int result;
  
  result = (int)(292);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_3_get() {
  int jresult ;
  int result;
  
  result = (int)(293);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_4_get() {
  int jresult ;
  int result;
  
  result = (int)(294);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_5_get() {
  int jresult ;
  int result;
  
  result = (int)(295);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_6_get() {
  int jresult ;
  int result;
  
  result = (int)(296);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_7_get() {
  int jresult ;
  int result;
  
  result = (int)(297);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_8_get() {
  int jresult ;
  int result;
  
  result = (int)(298);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_9_get() {
  int jresult ;
  int result;
  
  result = (int)(299);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_CHAT_10_get() {
  int jresult ;
  int result;
  
  result = (int)(300);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_MELEE_CRIT_get() {
  int jresult ;
  int result;
  
  result = (int)(301);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SPELL_CRIT_get() {
  int jresult ;
  int result;
  
  result = (int)(302);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_TOO_FAR_AWAY_get() {
  int jresult ;
  int result;
  
  result = (int)(303);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_NPC_RAMPAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(304);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_NPC_FLURRY_get() {
  int jresult ;
  int result;
  
  result = (int)(305);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_NPC_ENRAGE_get() {
  int jresult ;
  int result;
  
  result = (int)(306);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_SAY_get() {
  int jresult ;
  int result;
  
  result = (int)(307);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_TELL_get() {
  int jresult ;
  int result;
  
  result = (int)(308);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_GROUP_get() {
  int jresult ;
  int result;
  
  result = (int)(309);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_GUILD_get() {
  int jresult ;
  int result;
  
  result = (int)(310);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_OOC_get() {
  int jresult ;
  int result;
  
  result = (int)(311);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_AUCTION_get() {
  int jresult ;
  int result;
  
  result = (int)(312);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_SHOUT_get() {
  int jresult ;
  int result;
  
  result = (int)(313);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_EMOTE_get() {
  int jresult ;
  int result;
  
  result = (int)(314);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_1_get() {
  int jresult ;
  int result;
  
  result = (int)(315);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_2_get() {
  int jresult ;
  int result;
  
  result = (int)(316);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_3_get() {
  int jresult ;
  int result;
  
  result = (int)(317);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_4_get() {
  int jresult ;
  int result;
  
  result = (int)(318);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_5_get() {
  int jresult ;
  int result;
  
  result = (int)(319);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_6_get() {
  int jresult ;
  int result;
  
  result = (int)(320);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_7_get() {
  int jresult ;
  int result;
  
  result = (int)(321);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_8_get() {
  int jresult ;
  int result;
  
  result = (int)(322);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_9_get() {
  int jresult ;
  int result;
  
  result = (int)(323);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ECHO_CHAT_10_get() {
  int jresult ;
  int result;
  
  result = (int)(324);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_AVATAR_CMD_get() {
  int jresult ;
  int result;
  
  result = (int)(325);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_LINK_get() {
  int jresult ;
  int result;
  
  result = (int)(326);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_RAID_get() {
  int jresult ;
  int result;
  
  result = (int)(327);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_PET_get() {
  int jresult ;
  int result;
  
  result = (int)(328);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_DAMAGESHIELD_get() {
  int jresult ;
  int result;
  
  result = (int)(329);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_LEADER_get() {
  int jresult ;
  int result;
  
  result = (int)(330);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_PETRAMPFLURRY_get() {
  int jresult ;
  int result;
  
  result = (int)(331);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_PETCRITS_get() {
  int jresult ;
  int result;
  
  result = (int)(332);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_FOCUS_get() {
  int jresult ;
  int result;
  
  result = (int)(333);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_XP_get() {
  int jresult ;
  int result;
  
  result = (int)(334);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SYSTEM_get() {
  int jresult ;
  int result;
  
  result = (int)(335);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_PET_SPELLS_get() {
  int jresult ;
  int result;
  
  result = (int)(336);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_PET_RESPONSES_get() {
  int jresult ;
  int result;
  
  result = (int)(337);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_ITEM_SPEECH_get() {
  int jresult ;
  int result;
  
  result = (int)(338);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_STRIKETHROUGH_get() {
  int jresult ;
  int result;
  
  result = (int)(339);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_STUN_get() {
  int jresult ;
  int result;
  
  result = (int)(340);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_SWARM_PET_DEATH_get() {
  int jresult ;
  int result;
  
  result = (int)(341);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_FELLOWSHIP_get() {
  int jresult ;
  int result;
  
  result = (int)(342);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_NPC_SPEECH_get() {
  int jresult ;
  int result;
  
  result = (int)(343);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_NPC_SPEECH_TO_YOU_get() {
  int jresult ;
  int result;
  
  result = (int)(344);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_USERCOLOR_GUILD_MSG_get() {
  int jresult ;
  int result;
  
  result = (int)(345);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_USER_COLORS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_USER_COLORS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gDefaultUserDefinedColors_set(void * jarg1) {
  mq::MQColor *arg1 = (mq::MQColor *) (mq::MQColor *)0 ;
  
  arg1 = (mq::MQColor *)jarg1; 
  {
    size_t ii;
    mq::MQColor *b = (mq::MQColor *) eqlib::gDefaultUserDefinedColors;
    for (ii = 0; ii < (size_t)eqlib::NUM_USER_COLORS; ii++) b[ii] = *((mq::MQColor *) arg1 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_gDefaultUserDefinedColors_get() {
  void * jresult ;
  mq::MQColor *result = 0 ;
  
  result = (mq::MQColor *)(mq::MQColor *)eqlib::gDefaultUserDefinedColors;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChatColorFilterData_ChatFilterID_set(void * jarg1, int jarg2) {
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  eqlib::eChatFilters arg2 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  arg2 = (eqlib::eChatFilters)jarg2; 
  if (arg1) (arg1)->ChatFilterID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChatColorFilterData_ChatFilterID_get(void * jarg1) {
  int jresult ;
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  eqlib::eChatFilters result;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  result = (eqlib::eChatFilters) ((arg1)->ChatFilterID);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChatColorFilterData_ChatColorID_set(void * jarg1, int jarg2) {
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ChatColorID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChatColorFilterData_ChatColorID_get(void * jarg1) {
  int jresult ;
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  int result;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  result = (int) ((arg1)->ChatColorID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChatColorFilterData_ChatFilterOptions_set(void * jarg1, int jarg2) {
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  eqlib::eChatFilterOptions arg2 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  arg2 = (eqlib::eChatFilterOptions)jarg2; 
  if (arg1) (arg1)->ChatFilterOptions = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChatColorFilterData_ChatFilterOptions_get(void * jarg1) {
  int jresult ;
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  eqlib::eChatFilterOptions result;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  result = (eqlib::eChatFilterOptions) ((arg1)->ChatFilterOptions);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChatColorFilterData_ChatFilterDefault_set(void * jarg1, int jarg2) {
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  eqlib::eChatFilterValues arg2 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  arg2 = (eqlib::eChatFilterValues)jarg2; 
  if (arg1) (arg1)->ChatFilterDefault = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChatColorFilterData_ChatFilterDefault_get(void * jarg1) {
  int jresult ;
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  eqlib::eChatFilterValues result;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  result = (eqlib::eChatFilterValues) ((arg1)->ChatFilterDefault);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChatColorFilterData_NameToken_set(void * jarg1, int jarg2) {
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NameToken = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChatColorFilterData_NameToken_get(void * jarg1) {
  int jresult ;
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  int result;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  result = (int) ((arg1)->NameToken);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChatColorFilterData_IniName_set(void * jarg1, char * jarg2) {
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->IniName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->IniName, (const char *)arg2);
    } else {
      arg1->IniName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ChatColorFilterData_IniName_get(void * jarg1) {
  char * jresult ;
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  result = (char *) ((arg1)->IniName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChatColorFilterData_ChatFilterCategories_set(void * jarg1, int jarg2) {
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ChatFilterCategories = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ChatColorFilterData_ChatFilterCategories_get(void * jarg1) {
  int jresult ;
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  int result;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  result = (int) ((arg1)->ChatFilterCategories);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChatColorFilterData() {
  void * jresult ;
  eqlib::ChatColorFilterData *result = 0 ;
  
  result = (eqlib::ChatColorFilterData *)new eqlib::ChatColorFilterData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChatColorFilterData(void * jarg1) {
  eqlib::ChatColorFilterData *arg1 = (eqlib::ChatColorFilterData *) 0 ;
  
  arg1 = (eqlib::ChatColorFilterData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_COLORFILTER_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_COLORFILTER_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChatFilterData_chatFilters_set(void * jarg1, void * jarg2) {
  eqlib::ChatFilterData *arg1 = (eqlib::ChatFilterData *) 0 ;
  eqlib::eChatFilterValues *arg2 = (eqlib::eChatFilterValues *) (eqlib::eChatFilterValues *)0 ;
  
  arg1 = (eqlib::ChatFilterData *)jarg1; 
  arg2 = (eqlib::eChatFilterValues *)jarg2; 
  {
    size_t ii;
    eqlib::eChatFilterValues *b = (eqlib::eChatFilterValues *) arg1->chatFilters;
    for (ii = 0; ii < (size_t)eqlib::NUM_CHAT_FILTERS; ii++) b[ii] = *((eqlib::eChatFilterValues *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChatFilterData_chatFilters_get(void * jarg1) {
  void * jresult ;
  eqlib::ChatFilterData *arg1 = (eqlib::ChatFilterData *) 0 ;
  eqlib::eChatFilterValues *result = 0 ;
  
  arg1 = (eqlib::ChatFilterData *)jarg1; 
  result = (eqlib::eChatFilterValues *)(eqlib::eChatFilterValues *) ((arg1)->chatFilters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChatFilterData() {
  void * jresult ;
  eqlib::ChatFilterData *result = 0 ;
  
  result = (eqlib::ChatFilterData *)new eqlib::ChatFilterData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChatFilterData(void * jarg1) {
  eqlib::ChatFilterData *arg1 = (eqlib::ChatFilterData *) 0 ;
  
  arg1 = (eqlib::ChatFilterData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_Y_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_Y_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_X_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_X_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_Z_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_Z_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_SpeedY_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_SpeedY_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->SpeedY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_SpeedX_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_SpeedX_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->SpeedX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_SpeedZ_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_SpeedZ_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->SpeedZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_SpeedRun_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedRun = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_SpeedRun_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->SpeedRun);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_Heading_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_Heading_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->Heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_Angle_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_Angle_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_AccelAngle_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AccelAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_AccelAngle_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->AccelAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_SpeedHeading_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedHeading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_SpeedHeading_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->SpeedHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CPhysicsInfo_CameraAngle_set(void * jarg1, float jarg2) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CameraAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CPhysicsInfo_CameraAngle_get(void * jarg1) {
  float jresult ;
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->CameraAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CPhysicsInfo() {
  void * jresult ;
  eqlib::CPhysicsInfo *result = 0 ;
  
  result = (eqlib::CPhysicsInfo *)new eqlib::CPhysicsInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CPhysicsInfo(void * jarg1) {
  eqlib::CPhysicsInfo *arg1 = (eqlib::CPhysicsInfo *) 0 ;
  
  arg1 = (eqlib::CPhysicsInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDoCollisionMovementStats_Source_set(void * jarg1, void * jarg2) {
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  eqlib::CPhysicsInfo *arg2 = (eqlib::CPhysicsInfo *) 0 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  arg2 = (eqlib::CPhysicsInfo *)jarg2; 
  if (arg1) (arg1)->Source = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDoCollisionMovementStats_Source_get(void * jarg1) {
  void * jresult ;
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  eqlib::CPhysicsInfo *result = 0 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  result = (eqlib::CPhysicsInfo *)& ((arg1)->Source);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDoCollisionMovementStats_DestY_set(void * jarg1, float jarg2) {
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DestY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SDoCollisionMovementStats_DestY_get(void * jarg1) {
  float jresult ;
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float result;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  result = (float) ((arg1)->DestY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDoCollisionMovementStats_DestX_set(void * jarg1, float jarg2) {
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DestX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SDoCollisionMovementStats_DestX_get(void * jarg1) {
  float jresult ;
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float result;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  result = (float) ((arg1)->DestX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDoCollisionMovementStats_DestZ_set(void * jarg1, float jarg2) {
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DestZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SDoCollisionMovementStats_DestZ_get(void * jarg1) {
  float jresult ;
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float result;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  result = (float) ((arg1)->DestZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDoCollisionMovementStats_SourceFloor_set(void * jarg1, float jarg2) {
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SourceFloor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SDoCollisionMovementStats_SourceFloor_get(void * jarg1) {
  float jresult ;
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float result;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  result = (float) ((arg1)->SourceFloor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDoCollisionMovementStats_DestFloor_set(void * jarg1, float jarg2) {
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DestFloor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SDoCollisionMovementStats_DestFloor_get(void * jarg1) {
  float jresult ;
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  float result;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  result = (float) ((arg1)->DestFloor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDoCollisionMovementStats_Dest_set(void * jarg1, void * jarg2) {
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  eqlib::CPhysicsInfo *arg2 = (eqlib::CPhysicsInfo *) 0 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  arg2 = (eqlib::CPhysicsInfo *)jarg2; 
  if (arg1) (arg1)->Dest = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDoCollisionMovementStats_Dest_get(void * jarg1) {
  void * jresult ;
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  eqlib::CPhysicsInfo *result = 0 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  result = (eqlib::CPhysicsInfo *)& ((arg1)->Dest);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SDoCollisionMovementStats() {
  void * jresult ;
  eqlib::SDoCollisionMovementStats *result = 0 ;
  
  result = (eqlib::SDoCollisionMovementStats *)new eqlib::SDoCollisionMovementStats();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SDoCollisionMovementStats(void * jarg1) {
  eqlib::SDoCollisionMovementStats *arg1 = (eqlib::SDoCollisionMovementStats *) 0 ;
  
  arg1 = (eqlib::SDoCollisionMovementStats *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLineBase_OriginY_set(void * jarg1, float jarg2) {
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->OriginY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CLineBase_OriginY_get(void * jarg1) {
  float jresult ;
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  result = (float) ((arg1)->OriginY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLineBase_OriginX_set(void * jarg1, float jarg2) {
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->OriginX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CLineBase_OriginX_get(void * jarg1) {
  float jresult ;
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  result = (float) ((arg1)->OriginX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLineBase_OriginZ_set(void * jarg1, float jarg2) {
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->OriginZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CLineBase_OriginZ_get(void * jarg1) {
  float jresult ;
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  result = (float) ((arg1)->OriginZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLineBase_DirectionY_set(void * jarg1, float jarg2) {
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DirectionY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CLineBase_DirectionY_get(void * jarg1) {
  float jresult ;
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  result = (float) ((arg1)->DirectionY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLineBase_DirectionX_set(void * jarg1, float jarg2) {
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DirectionX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CLineBase_DirectionX_get(void * jarg1) {
  float jresult ;
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  result = (float) ((arg1)->DirectionX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CLineBase_DirectionZ_set(void * jarg1, float jarg2) {
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DirectionZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CLineBase_DirectionZ_get(void * jarg1) {
  float jresult ;
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  result = (float) ((arg1)->DirectionZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CLineBase() {
  void * jresult ;
  eqlib::CLineBase *result = 0 ;
  
  result = (eqlib::CLineBase *)new eqlib::CLineBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CLineBase(void * jarg1) {
  eqlib::CLineBase *arg1 = (eqlib::CLineBase *) 0 ;
  
  arg1 = (eqlib::CLineBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CLineSegment() {
  void * jresult ;
  eqlib::CLineSegment *result = 0 ;
  
  result = (eqlib::CLineSegment *)new eqlib::CLineSegment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CLineSegment(void * jarg1) {
  eqlib::CLineSegment *arg1 = (eqlib::CLineSegment *) 0 ;
  
  arg1 = (eqlib::CLineSegment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CCapsule_Radius_set(void * jarg1, float jarg2) {
  eqlib::CCapsule *arg1 = (eqlib::CCapsule *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CCapsule *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Radius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CCapsule_Radius_get(void * jarg1) {
  float jresult ;
  eqlib::CCapsule *arg1 = (eqlib::CCapsule *) 0 ;
  float result;
  
  arg1 = (eqlib::CCapsule *)jarg1; 
  result = (float) ((arg1)->Radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CCapsule() {
  void * jresult ;
  eqlib::CCapsule *result = 0 ;
  
  result = (eqlib::CCapsule *)new eqlib::CCapsule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CCapsule(void * jarg1) {
  eqlib::CCapsule *arg1 = (eqlib::CCapsule *) 0 ;
  
  arg1 = (eqlib::CCapsule *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsEffect_SpellID_set(void * jarg1, int jarg2) {
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsEffect_SpellID_get(void * jarg1) {
  int jresult ;
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  int result;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  result = (int) ((arg1)->SpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsEffect_CasterID_set(void * jarg1, int jarg2) {
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CasterID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsEffect_CasterID_get(void * jarg1) {
  int jresult ;
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  int result;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  result = (int) ((arg1)->CasterID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsEffect_EffectID_set(void * jarg1, int jarg2) {
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EffectID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsEffect_EffectID_get(void * jarg1) {
  int jresult ;
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  int result;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  result = (int) ((arg1)->EffectID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsEffect_BaseEffect_set(void * jarg1, int jarg2) {
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseEffect = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PhysicsEffect_BaseEffect_get(void * jarg1) {
  int jresult ;
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  int result;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  result = (int) ((arg1)->BaseEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsEffect() {
  void * jresult ;
  eqlib::PhysicsEffect *result = 0 ;
  
  result = (eqlib::PhysicsEffect *)new eqlib::PhysicsEffect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsEffect(void * jarg1) {
  eqlib::PhysicsEffect *arg1 = (eqlib::PhysicsEffect *) 0 ;
  
  arg1 = (eqlib::PhysicsEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowshipMember_UniqueEntityID_set(void * jarg1, unsigned int jarg2) {
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->UniqueEntityID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SFellowshipMember_UniqueEntityID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  result = (uint32_t) ((arg1)->UniqueEntityID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowshipMember_Name_set(void * jarg1, char * jarg2) {
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, eqlib::EQ_MAX_NAME-1);
      arg1->Name[eqlib::EQ_MAX_NAME-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SFellowshipMember_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowshipMember_ZoneID_set(void * jarg1, int jarg2) {
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ZoneID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SFellowshipMember_ZoneID_get(void * jarg1) {
  int jresult ;
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  int result;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  result = (int) ((arg1)->ZoneID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowshipMember_Level_set(void * jarg1, int jarg2) {
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SFellowshipMember_Level_get(void * jarg1) {
  int jresult ;
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  int result;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  result = (int) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowshipMember_Class_set(void * jarg1, int jarg2) {
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Class = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SFellowshipMember_Class_get(void * jarg1) {
  int jresult ;
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  int result;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  result = (int) ((arg1)->Class);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowshipMember_LastOn_set(void * jarg1, int jarg2) {
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LastOn = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SFellowshipMember_LastOn_get(void * jarg1) {
  int jresult ;
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  int result;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  result = (int) ((arg1)->LastOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SFellowshipMember() {
  void * jresult ;
  eqlib::SFellowshipMember *result = 0 ;
  
  result = (eqlib::SFellowshipMember *)new eqlib::SFellowshipMember();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SFellowshipMember(void * jarg1) {
  eqlib::SFellowshipMember *arg1 = (eqlib::SFellowshipMember *) 0 ;
  
  arg1 = (eqlib::SFellowshipMember *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_FELLOWSHIP_MEMBERS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_FELLOWSHIP_MEMBERS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_FELLOWSHIP_MOTD_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_FELLOWSHIP_MOTD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SFellowship_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::SFellowship_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_Version_set(void * jarg1, unsigned int jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SFellowship_Version_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (unsigned int) ((arg1)->Version);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_FellowshipID_set(void * jarg1, int jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FellowshipID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SFellowship_FellowshipID_get(void * jarg1) {
  int jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  int result;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (int) ((arg1)->FellowshipID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_FellowshipName_set(void * jarg1, char * jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->FellowshipName, (const char *)arg2, 0x40-1);
      arg1->FellowshipName[0x40-1] = 0;
    } else {
      arg1->FellowshipName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SFellowship_FellowshipName_get(void * jarg1) {
  char * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (char *)(char *) ((arg1)->FellowshipName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_MotD_set(void * jarg1, char * jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->MotD, (const char *)arg2, eqlib::MAX_FELLOWSHIP_MOTD-1);
      arg1->MotD[eqlib::MAX_FELLOWSHIP_MOTD-1] = 0;
    } else {
      arg1->MotD[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SFellowship_MotD_get(void * jarg1) {
  char * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (char *)(char *) ((arg1)->MotD);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_Members_set(void * jarg1, int jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Members = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SFellowship_Members_get(void * jarg1) {
  int jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  int result;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (int) ((arg1)->Members);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_FellowshipMember_set(void * jarg1, void * jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  eqlib::SFellowshipMember *arg2 = (eqlib::SFellowshipMember *) (eqlib::SFellowshipMember *)0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (eqlib::SFellowshipMember *)jarg2; 
  {
    size_t ii;
    eqlib::SFellowshipMember *b = (eqlib::SFellowshipMember *) arg1->FellowshipMember;
    for (ii = 0; ii < (size_t)eqlib::MAX_FELLOWSHIP_MEMBERS; ii++) b[ii] = *((eqlib::SFellowshipMember *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SFellowship_FellowshipMember_get(void * jarg1) {
  void * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  eqlib::SFellowshipMember *result = 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (eqlib::SFellowshipMember *)(eqlib::SFellowshipMember *) ((arg1)->FellowshipMember);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_Sync_set(void * jarg1, unsigned int jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Sync = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SFellowship_Sync_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (unsigned int) ((arg1)->Sync);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_PlayerHandles_set(void * jarg1, void * jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  char (*arg2)[32] = (char (*)[32]) (char (*)[32])0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (char (*)[32])jarg2; 
  {
    char (*inp)[32] = (char (*)[32])(arg2);
    char (*dest)[32] = (char (*)[32])(arg1->PlayerHandles);
    size_t ii = 0;
    for (; ii < eqlib::MAX_FELLOWSHIP_MEMBERS; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 32; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SFellowship_PlayerHandles_get(void * jarg1) {
  void * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  char (*result)[32] = 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (char (*)[32])(char (*)[32]) ((arg1)->PlayerHandles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_bExpSharingEnabled_set(void * jarg1, void * jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->bExpSharingEnabled;
    for (ii = 0; ii < (size_t)eqlib::MAX_FELLOWSHIP_MEMBERS; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SFellowship_bExpSharingEnabled_get(void * jarg1) {
  void * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (bool *)(bool *) ((arg1)->bExpSharingEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_bSharedExpCapped_set(void * jarg1, void * jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->bSharedExpCapped;
    for (ii = 0; ii < (size_t)eqlib::MAX_FELLOWSHIP_MEMBERS; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SFellowship_bSharedExpCapped_get(void * jarg1) {
  void * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (bool *)(bool *) ((arg1)->bSharedExpCapped);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SFellowship_bIsOfflineMode_set(void * jarg1, void * jarg2) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->bIsOfflineMode;
    for (ii = 0; ii < (size_t)eqlib::MAX_FELLOWSHIP_MEMBERS; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SFellowship_bIsOfflineMode_get(void * jarg1) {
  void * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (bool *)(bool *) ((arg1)->bIsOfflineMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SFellowship_get_Leader(void * jarg1) {
  char * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (char *)(arg1)->get_Leader();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SFellowship_get_FellowshipGUID(void * jarg1) {
  void * jresult ;
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  EqGuid result;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  result = (arg1)->get_FellowshipGUID();
  jresult = new EqGuid(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SFellowship() {
  void * jresult ;
  eqlib::SFellowship *result = 0 ;
  
  result = (eqlib::SFellowship *)new eqlib::SFellowship();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SFellowship(void * jarg1) {
  eqlib::SFellowship *arg1 = (eqlib::SFellowship *) 0 ;
  
  arg1 = (eqlib::SFellowship *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_spawnID_set(void * jarg1, int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spawnID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chngForm_spawnID_get(void * jarg1) {
  int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (int) ((arg1)->spawnID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_name_set(void * jarg1, char * jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, eqlib::EQ_MAX_NAME-1);
      arg1->name[eqlib::EQ_MAX_NAME-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_chngForm_name_get(void * jarg1) {
  char * jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_race_set(void * jarg1, int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->race = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chngForm_race_get(void * jarg1) {
  int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (int) ((arg1)->race);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_gender_set(void * jarg1, char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->gender = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_chngForm_gender_get(void * jarg1) {
  char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (char) ((arg1)->gender);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_textureType_set(void * jarg1, char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->textureType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_chngForm_textureType_get(void * jarg1) {
  char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (char) ((arg1)->textureType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_armorVariation_set(void * jarg1, char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->armorVariation = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_chngForm_armorVariation_get(void * jarg1) {
  char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (char) ((arg1)->armorVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_armorMaterial_set(void * jarg1, char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->armorMaterial = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_chngForm_armorMaterial_get(void * jarg1) {
  char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (char) ((arg1)->armorMaterial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_head_set(void * jarg1, char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->head = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_chngForm_head_get(void * jarg1) {
  char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  char result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (char) ((arg1)->head);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_faceStyle_set(void * jarg1, int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->faceStyle = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chngForm_faceStyle_get(void * jarg1) {
  int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (int) ((arg1)->faceStyle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_hairStyle_set(void * jarg1, unsigned char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hairStyle = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_chngForm_hairStyle_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (uint8_t) ((arg1)->hairStyle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_hairColor_set(void * jarg1, unsigned char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->hairColor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_chngForm_hairColor_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (uint8_t) ((arg1)->hairColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_facialHair_set(void * jarg1, unsigned char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->facialHair = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_chngForm_facialHair_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (uint8_t) ((arg1)->facialHair);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_facialHairColor_set(void * jarg1, unsigned char jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->facialHairColor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_chngForm_facialHairColor_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (uint8_t) ((arg1)->facialHairColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_height_set(void * jarg1, float jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_chngForm_height_get(void * jarg1) {
  float jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  float result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_npcTintIndex_set(void * jarg1, unsigned int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->npcTintIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_chngForm_npcTintIndex_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (uint32_t) ((arg1)->npcTintIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_keepArmorProperties_set(void * jarg1, unsigned int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->keepArmorProperties = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_chngForm_keepArmorProperties_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  bool result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (bool) ((arg1)->keepArmorProperties);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_armorProperties_set(void * jarg1, void * jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  ArmorProperties *arg2 = (ArmorProperties *) (ArmorProperties *)0 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (ArmorProperties *)jarg2; 
  {
    size_t ii;
    ArmorProperties *b = (ArmorProperties *) arg1->armorProperties;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((ArmorProperties *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_chngForm_armorProperties_get(void * jarg1) {
  void * jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  ArmorProperties *result = 0 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (ArmorProperties *)(ArmorProperties *) ((arg1)->armorProperties);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_armorTint_set(void * jarg1, void * jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->armorTint;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_chngForm_armorTint_get(void * jarg1) {
  void * jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (int *)(int *) ((arg1)->armorTint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_Class_set(void * jarg1, int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Class = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chngForm_Class_get(void * jarg1) {
  int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (int) ((arg1)->Class);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_heritage_set(void * jarg1, int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->heritage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chngForm_heritage_get(void * jarg1) {
  int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (int) ((arg1)->heritage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_tattoo_set(void * jarg1, int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->tattoo = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chngForm_tattoo_get(void * jarg1) {
  int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (int) ((arg1)->tattoo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_chngForm_facialAttachment_set(void * jarg1, int jarg2) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->facialAttachment = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_chngForm_facialAttachment_get(void * jarg1) {
  int jresult ;
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  int result;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  result = (int) ((arg1)->facialAttachment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_chngForm() {
  void * jresult ;
  eqlib::chngForm *result = 0 ;
  
  result = (eqlib::chngForm *)new eqlib::chngForm();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_chngForm(void * jarg1) {
  eqlib::chngForm *arg1 = (eqlib::chngForm *) 0 ;
  
  arg1 = (eqlib::chngForm *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_SpellETA_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->SpellETA = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_SpellETA_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (uint32_t) ((arg1)->SpellETA);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_SpellID_set(void * jarg1, int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LaunchSpellData_SpellID_get(void * jarg1) {
  int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (int) ((arg1)->SpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_SpellSlot_set(void * jarg1, unsigned char jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->SpellSlot = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaunchSpellData_SpellSlot_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (uint8_t) ((arg1)->SpellSlot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_SpellLevel_set(void * jarg1, unsigned char jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->SpellLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_LaunchSpellData_SpellLevel_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (uint8_t) ((arg1)->SpellLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_ItemLocation_set(void * jarg1, void * jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  ItemGlobalIndex *arg2 = (ItemGlobalIndex *) 0 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (ItemGlobalIndex *)jarg2; 
  if (arg1) (arg1)->ItemLocation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LaunchSpellData_ItemLocation_get(void * jarg1) {
  void * jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (ItemGlobalIndex *)& ((arg1)->ItemLocation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_ItemCastType_set(void * jarg1, int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  ItemSpellTypes arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (ItemSpellTypes)jarg2; 
  if (arg1) (arg1)->ItemCastType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LaunchSpellData_ItemCastType_get(void * jarg1) {
  int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  ItemSpellTypes result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (ItemSpellTypes) ((arg1)->ItemCastType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_ItemID_set(void * jarg1, int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ItemID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LaunchSpellData_ItemID_get(void * jarg1) {
  int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (int) ((arg1)->ItemID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_CastingY_set(void * jarg1, float jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CastingY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaunchSpellData_CastingY_get(void * jarg1) {
  float jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (float) ((arg1)->CastingY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_CastingX_set(void * jarg1, float jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CastingX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaunchSpellData_CastingX_get(void * jarg1) {
  float jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (float) ((arg1)->CastingX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_DamageID_set(void * jarg1, int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DamageID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LaunchSpellData_DamageID_get(void * jarg1) {
  int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (int) ((arg1)->DamageID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_TargetID_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->TargetID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_TargetID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (uint32_t) ((arg1)->TargetID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_bDetrimental_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDetrimental = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_bDetrimental_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool) ((arg1)->bDetrimental);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_bResetMeleeTimers_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bResetMeleeTimers = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_bResetMeleeTimers_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool) ((arg1)->bResetMeleeTimers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_bResetAAOnNotTakeHold_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bResetAAOnNotTakeHold = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_bResetAAOnNotTakeHold_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool) ((arg1)->bResetAAOnNotTakeHold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_bFreeTarget_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bFreeTarget = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_bFreeTarget_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool) ((arg1)->bFreeTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_TargetPosY_set(void * jarg1, float jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPosY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaunchSpellData_TargetPosY_get(void * jarg1) {
  float jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (float) ((arg1)->TargetPosY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_TargetPosX_set(void * jarg1, float jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPosX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaunchSpellData_TargetPosX_get(void * jarg1) {
  float jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (float) ((arg1)->TargetPosX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_TargetPosZ_set(void * jarg1, float jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetPosZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaunchSpellData_TargetPosZ_get(void * jarg1) {
  float jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (float) ((arg1)->TargetPosZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_bTwinCast_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTwinCast = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_bTwinCast_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool) ((arg1)->bTwinCast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_bLanded_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bLanded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_bLanded_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool) ((arg1)->bLanded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_bNPCTarget_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNPCTarget = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_bNPCTarget_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool) ((arg1)->bNPCTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_bHasHitRecourse_set(void * jarg1, unsigned int jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHasHitRecourse = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_bHasHitRecourse_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool) ((arg1)->bHasHitRecourse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_AnchorPosY_set(void * jarg1, float jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AnchorPosY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaunchSpellData_AnchorPosY_get(void * jarg1) {
  float jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (float) ((arg1)->AnchorPosY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_AnchorPosX_set(void * jarg1, float jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AnchorPosX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaunchSpellData_AnchorPosX_get(void * jarg1) {
  float jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (float) ((arg1)->AnchorPosX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LaunchSpellData_AnchorPosZ_set(void * jarg1, float jarg2) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AnchorPosZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_LaunchSpellData_AnchorPosZ_get(void * jarg1) {
  float jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  float result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (float) ((arg1)->AnchorPosZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_LaunchSpellData_IsCasting(void * jarg1) {
  unsigned int jresult ;
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  bool result;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  result = (bool)((eqlib::LaunchSpellData const *)arg1)->IsCasting();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LaunchSpellData() {
  void * jresult ;
  eqlib::LaunchSpellData *result = 0 ;
  
  result = (eqlib::LaunchSpellData *)new eqlib::LaunchSpellData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LaunchSpellData(void * jarg1) {
  eqlib::LaunchSpellData *arg1 = (eqlib::LaunchSpellData *) 0 ;
  
  arg1 = (eqlib::LaunchSpellData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBase_vtable2_set(void * jarg1, void * jarg2) {
  eqlib::PhysicsBase *arg1 = (eqlib::PhysicsBase *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::PhysicsBase *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->vtable2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PhysicsBase_vtable2_get(void * jarg1) {
  void * jresult ;
  eqlib::PhysicsBase *arg1 = (eqlib::PhysicsBase *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::PhysicsBase *)jarg1; 
  result = (void *) ((arg1)->vtable2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PhysicsBase_bApplyGravity_set(void * jarg1, unsigned int jarg2) {
  eqlib::PhysicsBase *arg1 = (eqlib::PhysicsBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PhysicsBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bApplyGravity = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PhysicsBase_bApplyGravity_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PhysicsBase *arg1 = (eqlib::PhysicsBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PhysicsBase *)jarg1; 
  result = (bool) ((arg1)->bApplyGravity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PhysicsBase() {
  void * jresult ;
  eqlib::PhysicsBase *result = 0 ;
  
  result = (eqlib::PhysicsBase *)new eqlib::PhysicsBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PhysicsBase(void * jarg1) {
  eqlib::PhysicsBase *arg1 = (eqlib::PhysicsBase *) 0 ;
  
  arg1 = (eqlib::PhysicsBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPhysics_pSpawn_set(void * jarg1, void * jarg2) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  if (arg1) (arg1)->pSpawn = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerPhysics_pSpawn_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  result = (eqlib::PlayerClient *) ((arg1)->pSpawn);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPhysics_Levitate_set(void * jarg1, int jarg2) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  eqlib::GravityBehavior arg2 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  arg2 = (eqlib::GravityBehavior)jarg2; 
  if (arg1) (arg1)->Levitate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerPhysics_Levitate_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  eqlib::GravityBehavior result;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  result = (eqlib::GravityBehavior) ((arg1)->Levitate);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPhysics_UpDownIndex_set(void * jarg1, int jarg2) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UpDownIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerPhysics_UpDownIndex_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  result = (int) ((arg1)->UpDownIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPhysics_LeftRightIndex_set(void * jarg1, int jarg2) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LeftRightIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerPhysics_LeftRightIndex_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  result = (int) ((arg1)->LeftRightIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPhysics_UpDownSpeed_set(void * jarg1, int jarg2) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UpDownSpeed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerPhysics_UpDownSpeed_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  result = (int) ((arg1)->UpDownSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPhysics_LeftRightSpeed_set(void * jarg1, int jarg2) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LeftRightSpeed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerPhysics_LeftRightSpeed_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  result = (int) ((arg1)->LeftRightSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPhysics_LeftRightDist_set(void * jarg1, float jarg2) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->LeftRightDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerPhysics_LeftRightDist_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  result = (float) ((arg1)->LeftRightDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPhysics_UpDownDist_set(void * jarg1, float jarg2) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->UpDownDist = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerPhysics_UpDownDist_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  result = (float) ((arg1)->UpDownDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerPhysics() {
  void * jresult ;
  eqlib::PlayerPhysics *result = 0 ;
  
  result = (eqlib::PlayerPhysics *)new eqlib::PlayerPhysics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerPhysics(void * jarg1) {
  eqlib::PlayerPhysics *arg1 = (eqlib::PlayerPhysics *) 0 ;
  
  arg1 = (eqlib::PlayerPhysics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerPhysicsClient() {
  void * jresult ;
  eqlib::PlayerPhysicsClient *result = 0 ;
  
  result = (eqlib::PlayerPhysicsClient *)new eqlib::PlayerPhysicsClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerPhysicsClient(void * jarg1) {
  eqlib::PlayerPhysicsClient *arg1 = (eqlib::PlayerPhysicsClient *) 0 ;
  
  arg1 = (eqlib::PlayerPhysicsClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_DeltaX_set(void * jarg1, float jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DeltaX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PZCPhysicsInfo_DeltaX_get(void * jarg1) {
  float jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->DeltaX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_Heading_set(void * jarg1, int jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Heading = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PZCPhysicsInfo_Heading_get(void * jarg1) {
  int jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (int) ((arg1)->Heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_DeltaHeading_set(void * jarg1, int jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DeltaHeading = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PZCPhysicsInfo_DeltaHeading_get(void * jarg1) {
  int jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (int) ((arg1)->DeltaHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_Acceleration_set(void * jarg1, int jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Acceleration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PZCPhysicsInfo_Acceleration_get(void * jarg1) {
  int jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (int) ((arg1)->Acceleration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_X_set(void * jarg1, float jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PZCPhysicsInfo_X_get(void * jarg1) {
  float jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_DeltaZ_set(void * jarg1, float jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DeltaZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PZCPhysicsInfo_DeltaZ_get(void * jarg1) {
  float jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->DeltaZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_Z_set(void * jarg1, float jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PZCPhysicsInfo_Z_get(void * jarg1) {
  float jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_Y_set(void * jarg1, float jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PZCPhysicsInfo_Y_get(void * jarg1) {
  float jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_Animation_set(void * jarg1, int jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Animation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PZCPhysicsInfo_Animation_get(void * jarg1) {
  int jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (int) ((arg1)->Animation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_DeltaY_set(void * jarg1, float jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DeltaY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PZCPhysicsInfo_DeltaY_get(void * jarg1) {
  float jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  float result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (float) ((arg1)->DeltaY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PZCPhysicsInfo_ZHeading_set(void * jarg1, int jarg2) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ZHeading = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PZCPhysicsInfo_ZHeading_get(void * jarg1) {
  int jresult ;
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  result = (int) ((arg1)->ZHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PZCPhysicsInfo() {
  void * jresult ;
  eqlib::PZCPhysicsInfo *result = 0 ;
  
  result = (eqlib::PZCPhysicsInfo *)new eqlib::PZCPhysicsInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PZCPhysicsInfo(void * jarg1) {
  eqlib::PZCPhysicsInfo *arg1 = (eqlib::PZCPhysicsInfo *) 0 ;
  
  arg1 = (eqlib::PZCPhysicsInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerManagerBase(void * jarg1) {
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerManagerBase_NextID_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NextID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerManagerBase_NextID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  result = (uint32_t) ((arg1)->NextID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerManagerBase_PlayerList_set(void * jarg1, void * jarg2) {
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  TList< eqlib::PlayerClient > *arg2 = (TList< eqlib::PlayerClient > *) 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  arg2 = (TList< eqlib::PlayerClient > *)jarg2; 
  if (arg1) (arg1)->PlayerList = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerBase_PlayerList_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  TList< eqlib::PlayerClient > *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  result = (TList< eqlib::PlayerClient > *)& ((arg1)->PlayerList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerManagerBase_PlayerNameHashTable_set(void * jarg1, void * jarg2) {
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  HashTable< eqlib::PlayerClient * > *arg2 = (HashTable< eqlib::PlayerClient * > *) 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  arg2 = (HashTable< eqlib::PlayerClient * > *)jarg2; 
  if (arg1) (arg1)->PlayerNameHashTable = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerBase_PlayerNameHashTable_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  HashTable< eqlib::PlayerClient * > *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  result = (HashTable< eqlib::PlayerClient * > *) ((arg1)->PlayerNameHashTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerManagerBase_PlayerIdHashTable_set(void * jarg1, void * jarg2) {
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  HashTable< eqlib::PlayerClient * > *arg2 = (HashTable< eqlib::PlayerClient * > *) 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  arg2 = (HashTable< eqlib::PlayerClient * > *)jarg2; 
  if (arg1) (arg1)->PlayerIdHashTable = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerBase_PlayerIdHashTable_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  HashTable< eqlib::PlayerClient * > *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  result = (HashTable< eqlib::PlayerClient * > *) ((arg1)->PlayerIdHashTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerBase_get_FirstSpawn(void * jarg1) {
  void * jresult ;
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  result = (eqlib::PlayerClient *)((eqlib::PlayerManagerBase const *)arg1)->get_FirstSpawn();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerBase_get_LastSpawn(void * jarg1) {
  void * jresult ;
  eqlib::PlayerManagerBase *arg1 = (eqlib::PlayerManagerBase *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerBase *)jarg1; 
  result = (eqlib::PlayerClient *)((eqlib::PlayerManagerBase const *)arg1)->get_LastSpawn();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerManagerBase() {
  void * jresult ;
  eqlib::PlayerManagerBase *result = 0 ;
  
  result = (eqlib::PlayerManagerBase *)new eqlib::PlayerManagerBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerManagerClient(void * jarg1) {
  eqlib::PlayerManagerClient *arg1 = (eqlib::PlayerManagerClient *) 0 ;
  
  arg1 = (eqlib::PlayerManagerClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerClient_GetSpawnByID(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::PlayerManagerClient *arg1 = (eqlib::PlayerManagerClient *) 0 ;
  int arg2 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerClient *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::PlayerClient *)(arg1)->GetSpawnByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerClient_GetSpawnByName(void * jarg1, char * jarg2) {
  void * jresult ;
  eqlib::PlayerManagerClient *arg1 = (eqlib::PlayerManagerClient *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerClient *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (eqlib::PlayerClient *)(arg1)->GetSpawnByName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerClient_GetPlayerFromPartialName(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  eqlib::PlayerManagerClient *arg1 = (eqlib::PlayerManagerClient *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::PlayerBase *arg3 = (eqlib::PlayerBase *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerClient *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (eqlib::PlayerBase *)jarg3; 
  result = (eqlib::PlayerClient *)(arg1)->GetPlayerFromPartialName((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerManagerClient_CreatePlayer(void * jarg1, void * jarg2, unsigned char jarg3, int jarg4, int jarg5, char * jarg6, unsigned int jarg7, char * jarg8, char * jarg9) {
  void * jresult ;
  eqlib::PlayerManagerClient *arg1 = (eqlib::PlayerManagerClient *) 0 ;
  CUnSerializeBuffer *arg2 = (CUnSerializeBuffer *) 0 ;
  unsigned char arg3 ;
  int arg4 ;
  int arg5 ;
  char *arg6 = (char *) 0 ;
  bool arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerManagerClient *)jarg1; 
  arg2 = (CUnSerializeBuffer *)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (char *)jarg6; 
  arg7 = jarg7 ? true : false; 
  arg8 = (char *)jarg8; 
  arg9 = (char *)jarg9; 
  result = (eqlib::PlayerClient *)(arg1)->CreatePlayer(arg2,arg3,arg4,arg5,(char const *)arg6,arg7,(char const *)arg8,(char const *)arg9);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerManagerClient() {
  void * jresult ;
  eqlib::PlayerManagerClient *result = 0 ;
  
  result = (eqlib::PlayerManagerClient *)new eqlib::PlayerManagerClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_JumpStrength_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->JumpStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_JumpStrength_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->JumpStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SwimStrength_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SwimStrength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_SwimStrength_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->SwimStrength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SpeedMultiplier_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedMultiplier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_SpeedMultiplier_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->SpeedMultiplier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_AreaFriction_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AreaFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_AreaFriction_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->AreaFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_AccelerationFriction_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AccelerationFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_AccelerationFriction_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->AccelerationFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_CollidingType_set(void * jarg1, int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  EActorType arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (EActorType)jarg2; 
  if (arg1) (arg1)->CollidingType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerBase_CollidingType_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  EActorType result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (EActorType) ((arg1)->CollidingType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_FloorHeight_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FloorHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_FloorHeight_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->FloorHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_bSinksInWater_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSinksInWater = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_bSinksInWater_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (bool) ((arg1)->bSinksInWater);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_PlayerTimeStamp_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->PlayerTimeStamp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_PlayerTimeStamp_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->PlayerTimeStamp);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_LastTimeIdle_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastTimeIdle = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_LastTimeIdle_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->LastTimeIdle);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Lastname_set(void * jarg1, char * jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Lastname, (const char *)arg2, 0x20-1);
      arg1->Lastname[0x20-1] = 0;
    } else {
      arg1->Lastname[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerBase_Lastname_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (char *)(char *) ((arg1)->Lastname);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_AreaHPRegenMod_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AreaHPRegenMod = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_AreaHPRegenMod_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->AreaHPRegenMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_AreaEndRegenMod_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AreaEndRegenMod = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_AreaEndRegenMod_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->AreaEndRegenMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_AreaManaRegenMod_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AreaManaRegenMod = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_AreaManaRegenMod_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->AreaManaRegenMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Y_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_Y_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_X_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_X_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Z_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_Z_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SpeedY_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_SpeedY_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->SpeedY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SpeedX_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_SpeedX_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->SpeedX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SpeedZ_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_SpeedZ_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->SpeedZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SpeedRun_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedRun = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_SpeedRun_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->SpeedRun);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Heading_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_Heading_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->Heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Angle_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_Angle_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_AccelAngle_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AccelAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_AccelAngle_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->AccelAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SpeedHeading_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SpeedHeading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_SpeedHeading_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->SpeedHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_CameraAngle_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CameraAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_CameraAngle_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->CameraAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_UnderWater_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->UnderWater = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_UnderWater_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->UnderWater);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_LastBodyEnvironmentType_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastBodyEnvironmentType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_LastBodyEnvironmentType_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->LastBodyEnvironmentType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_LastFeetEnvironmentType_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastFeetEnvironmentType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_LastFeetEnvironmentType_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->LastFeetEnvironmentType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_HeadWet_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->HeadWet = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerBase_HeadWet_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (uint8_t) ((arg1)->HeadWet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_FeetWet_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->FeetWet = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerBase_FeetWet_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (uint8_t) ((arg1)->FeetWet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_BodyWet_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->BodyWet = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerBase_BodyWet_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (uint8_t) ((arg1)->BodyWet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_LastBodyWet_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LastBodyWet = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerBase_LastBodyWet_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (uint8_t) ((arg1)->LastBodyWet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Name_set(void * jarg1, char * jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, eqlib::EQ_MAX_NAME-1);
      arg1->Name[eqlib::EQ_MAX_NAME-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerBase_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_DisplayedName_set(void * jarg1, char * jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->DisplayedName, (const char *)arg2, eqlib::EQ_MAX_NAME-1);
      arg1->DisplayedName[eqlib::EQ_MAX_NAME-1] = 0;
    } else {
      arg1->DisplayedName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerBase_DisplayedName_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (char *)(char *) ((arg1)->DisplayedName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_PossiblyStuck_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->PossiblyStuck = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerBase_PossiblyStuck_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (uint8_t) ((arg1)->PossiblyStuck);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Type_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerBase_Type_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (uint8_t) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Properties_set(void * jarg1, void * jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  CharacterPropertyHash *arg2 = (CharacterPropertyHash *) 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (CharacterPropertyHash *)jarg2; 
  if (arg1) (arg1)->Properties = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerBase_Properties_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  CharacterPropertyHash *result = 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (CharacterPropertyHash *)& ((arg1)->Properties);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_AvatarHeight_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AvatarHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_AvatarHeight_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->AvatarHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Height_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_Height_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Width_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_Width_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Length_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Length = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_Length_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->Length);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SpawnID_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->SpawnID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_SpawnID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->SpawnID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_PlayerState_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->PlayerState = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_PlayerState_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->PlayerState);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Vehicle_set(void * jarg1, void * jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  if (arg1) (arg1)->Vehicle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerBase_Vehicle_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (eqlib::PlayerClient *) ((arg1)->Vehicle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Mount_set(void * jarg1, void * jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  if (arg1) (arg1)->Mount = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerBase_Mount_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (eqlib::PlayerClient *) ((arg1)->Mount);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Rider_set(void * jarg1, void * jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  if (arg1) (arg1)->Rider = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerBase_Rider_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (eqlib::PlayerClient *) ((arg1)->Rider);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Unknown0x0164_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Unknown0x0164 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_Unknown0x0164_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->Unknown0x0164);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_Targetable_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Targetable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_Targetable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (bool) ((arg1)->Targetable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_bTargetCyclable_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTargetCyclable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_bTargetCyclable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (bool) ((arg1)->bTargetCyclable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_bClickThrough_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bClickThrough = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_bClickThrough_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (bool) ((arg1)->bClickThrough);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_bBeingFlung_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bBeingFlung = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_bBeingFlung_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (bool) ((arg1)->bBeingFlung);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_FlingActiveTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->FlingActiveTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_FlingActiveTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->FlingActiveTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_FlingTimerStart_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->FlingTimerStart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_FlingTimerStart_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int) ((arg1)->FlingTimerStart);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_bFlingSomething_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bFlingSomething = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_bFlingSomething_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (bool) ((arg1)->bFlingSomething);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_FlingY_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FlingY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_FlingY_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->FlingY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_FlingX_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FlingX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_FlingX_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->FlingX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_FlingZ_set(void * jarg1, float jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FlingZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerBase_FlingZ_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (float) ((arg1)->FlingZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_bFlingSnapToDest_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bFlingSnapToDest = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_bFlingSnapToDest_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (bool) ((arg1)->bFlingSnapToDest);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SplineID_set(void * jarg1, int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SplineID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerBase_SplineID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (int) ((arg1)->SplineID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerBase_SplineRiderID_set(void * jarg1, int jarg2) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SplineRiderID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerBase_SplineRiderID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (int) ((arg1)->SplineRiderID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_GetId(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int)((eqlib::PlayerBase const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerBase_get_BodyType(void * jarg1) {
  void * jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  unsigned int **result = 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (unsigned int **)(arg1)->get_BodyType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_HasProperty__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->HasProperty(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_HasProperty__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->HasProperty(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_HasProperty__SWIG_2(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->HasProperty(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_IsTargetable(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  result = (bool)(arg1)->IsTargetable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_CanSee__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  eqlib::PlayerBase *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (eqlib::PlayerBase *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::PlayerBase const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CanSee((eqlib::PlayerBase const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerBase_CanSee__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  CVector3 *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  arg2 = (CVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "CVector3 const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->CanSee((CVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerBase(void * jarg1) {
  eqlib::PlayerBase *arg1 = (eqlib::PlayerBase *) 0 ;
  
  arg1 = (eqlib::PlayerBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastIntimidateUse_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastIntimidateUse = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastIntimidateUse_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastIntimidateUse);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_IsPassenger_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->IsPassenger = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_IsPassenger_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->IsPassenger);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_ViewHeight_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ViewHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_ViewHeight_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->ViewHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bOfflineMode_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bOfflineMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bOfflineMode_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bOfflineMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_RealEstateID_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RealEstateID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_RealEstateID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->RealEstateID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_TitleVisible_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->TitleVisible = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_TitleVisible_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->TitleVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bStationary_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bStationary = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bStationary_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bStationary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CharClass_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->CharClass = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_CharClass_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->CharClass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_EnduranceCurrent_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnduranceCurrent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_EnduranceCurrent_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->EnduranceCurrent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_MinuteTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->MinuteTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_MinuteTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->MinuteTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LoginRelated_set(void * jarg1, char * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LoginRelated, (const char *)arg2, 0x20-1);
      arg1->LoginRelated[0x20-1] = 0;
    } else {
      arg1->LoginRelated[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerZoneClient_LoginRelated_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (char *)(char *) ((arg1)->LoginRelated);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_DraggingPlayer_set(void * jarg1, char * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->DraggingPlayer, (const char *)arg2, 0x40-1);
      arg1->DraggingPlayer[0x40-1] = 0;
    } else {
      arg1->DraggingPlayer[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerZoneClient_DraggingPlayer_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (char *)(char *) ((arg1)->DraggingPlayer);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Mercenary_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Mercenary = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_Mercenary_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->Mercenary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_FallingStartZ_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FallingStartZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_FallingStartZ_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->FallingStartZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Zone_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Zone = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_Zone_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->Zone);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Light_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Light = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_Light_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->Light);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastSecondaryUseTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastSecondaryUseTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastSecondaryUseTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastSecondaryUseTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_IsAttacking_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IsAttacking = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_IsAttacking_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->IsAttacking);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_BearingToTarget_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->BearingToTarget = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_BearingToTarget_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->BearingToTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_GMRank_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->GMRank = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_GMRank_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->GMRank);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_AnimationSpeedRelated_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AnimationSpeedRelated = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_AnimationSpeedRelated_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->AnimationSpeedRelated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Type2_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Type2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_Type2_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->Type2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bBuffTimersOnHold_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bBuffTimersOnHold = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bBuffTimersOnHold_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bBuffTimersOnHold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastRangedUsedTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastRangedUsedTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastRangedUsedTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastRangedUsedTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_pRaceGenderInfo_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pRaceGenderInfo = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_pRaceGenderInfo_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (void *) ((arg1)->pRaceGenderInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastAttack_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LastAttack = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_LastAttack_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->LastAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastPrimaryUseTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastPrimaryUseTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastPrimaryUseTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastPrimaryUseTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CurrIOState_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrIOState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_CurrIOState_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->CurrIOState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastRefresh_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastRefresh = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastRefresh_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastRefresh);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_GuildStatus_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GuildStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_GuildStatus_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->GuildStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastTick_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastTick = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastTick_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastTick);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Level_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_Level_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bAttackRelated_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAttackRelated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bAttackRelated_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bAttackRelated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LoginSerial_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LoginSerial = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LoginSerial_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LoginSerial);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_SomethingElse_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SomethingElse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_SomethingElse_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->SomethingElse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_GM_set(void * jarg1, char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->GM = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_PlayerZoneClient_GM_get(void * jarg1) {
  char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (char) ((arg1)->GM);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_FishingETA_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->FishingETA = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_FishingETA_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->FishingETA);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Sneak_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Sneak = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_Sneak_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->Sneak);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bAnimationOnPop_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAnimationOnPop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bAnimationOnPop_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bAnimationOnPop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastResendAddPlayerPacket_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastResendAddPlayerPacket = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastResendAddPlayerPacket_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastResendAddPlayerPacket);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_pViewPlayer_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::SPAWNINFO *arg2 = (eqlib::SPAWNINFO *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (eqlib::SPAWNINFO *)jarg2; 
  if (arg1) (arg1)->pViewPlayer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_pViewPlayer_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::SPAWNINFO *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (eqlib::SPAWNINFO *) ((arg1)->pViewPlayer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_ACounter_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ACounter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_ACounter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->ACounter);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CameraOffset_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CameraOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CameraOffset_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CameraOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Meditating_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Meditating = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_Meditating_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->Meditating);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_FindBits_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->FindBits = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_FindBits_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->FindBits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_SecondaryTintIndex_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SecondaryTintIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_SecondaryTintIndex_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->SecondaryTintIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastCollision_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::CPhysicsInfo *arg2 = (eqlib::CPhysicsInfo *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (eqlib::CPhysicsInfo *)jarg2; 
  if (arg1) (arg1)->LastCollision = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_LastCollision_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::CPhysicsInfo *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (eqlib::CPhysicsInfo *)& ((arg1)->LastCollision);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_PetID_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PetID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_PetID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->PetID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Anon_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Anon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_Anon_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->Anon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_RespawnTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->RespawnTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_RespawnTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->RespawnTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastCastNum_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LastCastNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_LastCastNum_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->LastCastNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_AARank_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AARank = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_AARank_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->AARank);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastCastTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastCastTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastCastTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastCastTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_pCharacter_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  CharacterZoneClient *arg2 = (CharacterZoneClient *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (CharacterZoneClient *)jarg2; 
  if (arg1) (arg1)->pCharacter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_pCharacter_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  CharacterZoneClient *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (CharacterZoneClient *) ((arg1)->pCharacter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_MerchantGreed_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MerchantGreed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_MerchantGreed_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->MerchantGreed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_pTouchingSwitch_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pTouchingSwitch = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_pTouchingSwitch_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (void *) ((arg1)->pTouchingSwitch);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_TimeStamp_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->TimeStamp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_TimeStamp_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->TimeStamp);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_HPMax_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int32_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->HPMax = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_HPMax_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int32_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int32_t) ((arg1)->HPMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bSummoned_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSummoned = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bSummoned_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bSummoned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_InPvPArea_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->InPvPArea = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_InPvPArea_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->InPvPArea);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_HPCurrent_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int32_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->HPCurrent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_HPCurrent_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int32_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int32_t) ((arg1)->HPCurrent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_SpellGemETA_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->SpellGemETA;
    for (ii = 0; ii < (size_t)13; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_SpellGemETA_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->SpellGemETA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_GetMeleeRangeVar1_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->GetMeleeRangeVar1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_GetMeleeRangeVar1_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->GetMeleeRangeVar1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Trader_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Trader = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_Trader_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->Trader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_SomeData_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->SomeData;
    for (ii = 0; ii < (size_t)0x2; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_SomeData_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int *)(int *) ((arg1)->SomeData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bSwitchMoved_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSwitchMoved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bSwitchMoved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bSwitchMoved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_MyWalkSpeed_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MyWalkSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_MyWalkSpeed_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->MyWalkSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_HoldingAnimation_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->HoldingAnimation = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_HoldingAnimation_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->HoldingAnimation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_HideMode_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HideMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_HideMode_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->HideMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Stuff_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Stuff = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_Stuff_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->Stuff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_AltAttack_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AltAttack = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_AltAttack_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->AltAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_PotionTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->PotionTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_PotionTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint32_t) ((arg1)->PotionTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_HmmWhat_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->HmmWhat = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_HmmWhat_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->HmmWhat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_PvPFlag_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PvPFlag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_PvPFlag_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->PvPFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_GuildID_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int32_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->GuildID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_GuildID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int32_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int32_t) ((arg1)->GuildID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_RunSpeed_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RunSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_RunSpeed_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->RunSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_ManaMax_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ManaMax = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_ManaMax_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->ManaMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastMealTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastMealTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastMealTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastMealTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_StandState_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->StandState = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_StandState_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->StandState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastTimeStoodStill_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastTimeStoodStill = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastTimeStoodStill_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastTimeStoodStill);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_DoSpecialMelee_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DoSpecialMelee = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_DoSpecialMelee_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->DoSpecialMelee);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CombatSkillTicks_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->CombatSkillTicks;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_CombatSkillTicks_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->CombatSkillTicks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_MissileRangeToTarget_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MissileRangeToTarget = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_MissileRangeToTarget_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->MissileRangeToTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_SitStartTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->SitStartTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_SitStartTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->SitStartTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_realEstateItemGuid_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  EqItemGuid *arg2 = (EqItemGuid *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (EqItemGuid *)jarg2; 
  if (arg1) (arg1)->realEstateItemGuid = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_realEstateItemGuid_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  EqItemGuid *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (EqItemGuid *)& ((arg1)->realEstateItemGuid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bShowHelm_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowHelm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bShowHelm_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bShowHelm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_MasterID_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->MasterID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_MasterID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->MasterID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CombatSkillUsed_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->CombatSkillUsed;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_CombatSkillUsed_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->CombatSkillUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Handle_set(void * jarg1, char * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Handle, (const char *)arg2, 0x20-1);
      arg1->Handle[0x20-1] = 0;
    } else {
      arg1->Handle[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerZoneClient_Handle_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (char *)(char *) ((arg1)->Handle);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_FD_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->FD = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_FD_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->FD);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_PrimaryTintIndex_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PrimaryTintIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_PrimaryTintIndex_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->PrimaryTintIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_AFK_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AFK = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_AFK_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->AFK);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_EnduranceMax_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->EnduranceMax = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_EnduranceMax_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->EnduranceMax);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_NextIntimidateTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->NextIntimidateTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_NextIntimidateTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->NextIntimidateTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_SpellCooldownETA_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->SpellCooldownETA = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_SpellCooldownETA_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->SpellCooldownETA);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Linkdead_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Linkdead = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_Linkdead_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->Linkdead);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Buyer_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Buyer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_Buyer_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->Buyer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LastTrapDamageTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastTrapDamageTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LastTrapDamageTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastTrapDamageTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bTempPet_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTempPet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bTempPet_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bTempPet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Title_set(void * jarg1, char * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Title, (const char *)arg2, 0x20-1);
      arg1->Title[0x20-1] = 0;
    } else {
      arg1->Title[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerZoneClient_Title_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (char *)(char *) ((arg1)->Title);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_FishingEvent_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->FishingEvent = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_FishingEvent_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->FishingEvent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Suffix_set(void * jarg1, char * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Suffix, (const char *)arg2, 0x20-1);
      arg1->Suffix[0x20-1] = 0;
    } else {
      arg1->Suffix[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerZoneClient_Suffix_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (char *)(char *) ((arg1)->Suffix);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_RealEstateItemId_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RealEstateItemId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_RealEstateItemId_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->RealEstateItemId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_WarCry_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WarCry = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_WarCry_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->WarCry);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Blind_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Blind = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_Blind_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->Blind);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bBetaBuffed_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bBetaBuffed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bBetaBuffed_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bBetaBuffed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_NextSwim_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->NextSwim = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_NextSwim_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->NextSwim);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CorpseDragCount_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->CorpseDragCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_CorpseDragCount_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->CorpseDragCount);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_IntimidateCount_set(void * jarg1, unsigned char jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->IntimidateCount = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_IntimidateCount_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (uint8_t) ((arg1)->IntimidateCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_berserker_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->berserker = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_berserker_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->berserker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_StunTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->StunTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_StunTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->StunTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_LFG_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->LFG = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LFG_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->LFG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CastingData_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::LaunchSpellData *arg2 = (eqlib::LaunchSpellData *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (eqlib::LaunchSpellData *)jarg2; 
  if (arg1) (arg1)->CastingData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_CastingData_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::LaunchSpellData *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (eqlib::LaunchSpellData *)& ((arg1)->CastingData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_ManaCurrent_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ManaCurrent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_ManaCurrent_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->ManaCurrent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_DragNames_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char (*arg2)[0x40] = (char (*)[0x40]) (char (*)[0x40])0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (char (*)[0x40])jarg2; 
  {
    char (*inp)[0x40] = (char (*)[0x40])(arg2);
    char (*dest)[0x40] = (char (*)[0x40])(arg1->DragNames);
    size_t ii = 0;
    for (; ii < 0x2; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 0x40; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_DragNames_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  char (*result)[0x40] = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (char (*)[0x40])(char (*)[0x40]) ((arg1)->DragNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Deity_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Deity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_Deity_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->Deity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_NpcTintIndex_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NpcTintIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_NpcTintIndex_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->NpcTintIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_ppUDP_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int **arg2 = (unsigned int **) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int **)jarg2; 
  if (arg1) (arg1)->ppUDP = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_ppUDP_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int **result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int **) ((arg1)->ppUDP);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_bAlwaysShowAura_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAlwaysShowAura = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_bAlwaysShowAura_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool) ((arg1)->bAlwaysShowAura);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_MovementStats_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  TCircularBuffer< eqlib::SDoCollisionMovementStats,20 > *arg2 = (TCircularBuffer< eqlib::SDoCollisionMovementStats,20 > *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (TCircularBuffer< eqlib::SDoCollisionMovementStats,20 > *)jarg2; 
  if (arg1) (arg1)->MovementStats = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_MovementStats_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  TCircularBuffer< eqlib::SDoCollisionMovementStats,20 > *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (TCircularBuffer< eqlib::SDoCollisionMovementStats,20 > *)& ((arg1)->MovementStats);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_WhoFollowing_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  if (arg1) (arg1)->WhoFollowing = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_WhoFollowing_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (eqlib::PlayerClient *) ((arg1)->WhoFollowing);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_GroupAssistNPC_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->GroupAssistNPC;
    for (ii = 0; ii < (size_t)eqlib::MAX_GROUP_ASSISTS; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_GroupAssistNPC_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->GroupAssistNPC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_RaidAssistNPC_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->RaidAssistNPC;
    for (ii = 0; ii < (size_t)eqlib::MAX_RAID_ASSISTS; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_RaidAssistNPC_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->RaidAssistNPC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_GroupMarkNPC_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->GroupMarkNPC;
    for (ii = 0; ii < (size_t)eqlib::MAX_GROUP_MARK_TARGETS; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_GroupMarkNPC_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->GroupMarkNPC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_RaidMarkNPC_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *arg2 = (unsigned int *) (unsigned int *)0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  {
    size_t ii;
    unsigned int *b = (unsigned int *) arg1->RaidMarkNPC;
    for (ii = 0; ii < (size_t)eqlib::MAX_RAID_MARK_TARGETS; ii++) b[ii] = *((unsigned int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_RaidMarkNPC_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int *)(unsigned int *) ((arg1)->RaidMarkNPC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_TargetOfTarget_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->TargetOfTarget = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_TargetOfTarget_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->TargetOfTarget);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_PZCLastPhysics_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::PZCPhysicsInfo *arg2 = (eqlib::PZCPhysicsInfo *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (eqlib::PZCPhysicsInfo *)jarg2; 
  if (arg1) (arg1)->PZCLastPhysics = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_PZCLastPhysics_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::PZCPhysicsInfo *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (eqlib::PZCPhysicsInfo *)& ((arg1)->PZCLastPhysics);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_ParticleCastStartTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ParticleCastStartTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_ParticleCastStartTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->ParticleCastStartTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_ParticleCastDuration_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ParticleCastDuration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_ParticleCastDuration_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->ParticleCastDuration);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_ParticleVisualSpellNum_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ParticleVisualSpellNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_ParticleVisualSpellNum_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->ParticleVisualSpellNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_Unknown0xea0_set(void * jarg1, int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0xea0 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerZoneClient_Unknown0xea0_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (int) ((arg1)->Unknown0xea0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_mActorClient_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  ActorClient *arg2 = (ActorClient *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (ActorClient *)jarg2; 
  if (arg1) (arg1)->mActorClient = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_mActorClient_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  ActorClient *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (ActorClient *)& ((arg1)->mActorClient);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_pAnimation_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::PlayerAnimationBase *arg2 = (eqlib::PlayerAnimationBase *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (eqlib::PlayerAnimationBase *)jarg2; 
  if (arg1) (arg1)->pAnimation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_pAnimation_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::PlayerAnimationBase *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (eqlib::PlayerAnimationBase *) ((arg1)->pAnimation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_MeleeRadius_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MeleeRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_MeleeRadius_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->MeleeRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CollisionCounter_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->CollisionCounter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_CollisionCounter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned int) ((arg1)->CollisionCounter);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CachedFloorLocationY_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CachedFloorLocationY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CachedFloorLocationY_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CachedFloorLocationY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CachedFloorLocationX_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CachedFloorLocationX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CachedFloorLocationX_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CachedFloorLocationX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CachedFloorLocationZ_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CachedFloorLocationZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CachedFloorLocationZ_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CachedFloorLocationZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CachedFloorHeight_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CachedFloorHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CachedFloorHeight_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CachedFloorHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CachedCeilingLocationY_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CachedCeilingLocationY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CachedCeilingLocationY_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CachedCeilingLocationY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CachedCeilingLocationX_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CachedCeilingLocationX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CachedCeilingLocationX_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CachedCeilingLocationX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CachedCeilingLocationZ_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CachedCeilingLocationZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CachedCeilingLocationZ_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CachedCeilingLocationZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_CachedCeilingHeight_set(void * jarg1, float jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CachedCeilingHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerZoneClient_CachedCeilingHeight_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (float) ((arg1)->CachedCeilingHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_StaticCollision_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::CCapsule *arg2 = (eqlib::CCapsule *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (eqlib::CCapsule *)jarg2; 
  if (arg1) (arg1)->StaticCollision = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_StaticCollision_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  eqlib::CCapsule *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (eqlib::CCapsule *)& ((arg1)->StaticCollision);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_mPhysicsEffects_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  ArrayClass< eqlib::PhysicsEffect > *arg2 = (ArrayClass< eqlib::PhysicsEffect > *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (ArrayClass< eqlib::PhysicsEffect > *)jarg2; 
  if (arg1) (arg1)->mPhysicsEffects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_mPhysicsEffects_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  ArrayClass< eqlib::PhysicsEffect > *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (ArrayClass< eqlib::PhysicsEffect > *)& ((arg1)->mPhysicsEffects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerZoneClient_PhysicsEffectsUpdated_set(void * jarg1, void * jarg2) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  ArrayClass< bool > *arg2 = (ArrayClass< bool > *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (ArrayClass< bool > *)jarg2; 
  if (arg1) (arg1)->PhysicsEffectsUpdated = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_PhysicsEffectsUpdated_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  ArrayClass< bool > *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (ArrayClass< bool > *)& ((arg1)->PhysicsEffectsUpdated);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LegalPlayerRace__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  EQRace arg2 ;
  EQRace *argp2 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  argp2 = (EQRace *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQRace", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->LegalPlayerRace(SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_LegalPlayerRace__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (bool)(arg1)->LegalPlayerRace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerZoneClient_GetActor(void * jarg1) {
  void * jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  CActorInterface *result = 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (CActorInterface *)(arg1)->GetActor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_IsValidTeleport(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  result = (bool)(arg1)->IsValidTeleport(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerZoneClient_GetLevel(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  unsigned char result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  result = (unsigned char)((eqlib::PlayerZoneClient const *)arg1)->GetLevel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_DoAttack__SWIG_0(void * jarg1, unsigned char jarg2, unsigned char jarg3, void * jarg4) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  BYTE arg2 ;
  BYTE arg3 ;
  eqlib::PlayerZoneClient *arg4 = (eqlib::PlayerZoneClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (BYTE)jarg2; 
  arg3 = (BYTE)jarg3; 
  arg4 = (eqlib::PlayerZoneClient *)jarg4; 
  result = (bool)(arg1)->DoAttack(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_DoAttack__SWIG_1(void * jarg1, unsigned char jarg2, unsigned char jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  BYTE arg2 ;
  BYTE arg3 ;
  eqlib::PlayerZoneClient *arg4 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (BYTE)jarg2; 
  arg3 = (BYTE)jarg3; 
  arg4 = (eqlib::PlayerZoneClient *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->DoAttack(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_DoAttack__SWIG_2(void * jarg1, unsigned char jarg2, unsigned char jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  BYTE arg2 ;
  BYTE arg3 ;
  eqlib::PlayerZoneClient *arg4 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (BYTE)jarg2; 
  arg3 = (BYTE)jarg3; 
  arg4 = (eqlib::PlayerZoneClient *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  result = (bool)(arg1)->DoAttack(arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerZoneClient_DoAttack__SWIG_3(void * jarg1, unsigned char jarg2, unsigned char jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  BYTE arg2 ;
  BYTE arg3 ;
  eqlib::PlayerZoneClient *arg4 = (eqlib::PlayerZoneClient *) 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  arg2 = (BYTE)jarg2; 
  arg3 = (BYTE)jarg3; 
  arg4 = (eqlib::PlayerZoneClient *)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->DoAttack(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerZoneClient(void * jarg1) {
  eqlib::PlayerZoneClient *arg1 = (eqlib::PlayerZoneClient *) 0 ;
  
  arg1 = (eqlib::PlayerZoneClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::PlayerClient_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Animation_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Animation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Animation_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Animation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_NextAnim_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NextAnim = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_NextAnim_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->NextAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CurrLowerBodyAnim_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrLowerBodyAnim = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CurrLowerBodyAnim_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CurrLowerBodyAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_NextLowerBodyAnim_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NextLowerBodyAnim = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_NextLowerBodyAnim_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->NextLowerBodyAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CurrLowerAnimVariation_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrLowerAnimVariation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CurrLowerAnimVariation_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CurrLowerAnimVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CurrAnimVariation_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrAnimVariation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CurrAnimVariation_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CurrAnimVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CurrAnimRndVariation_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrAnimRndVariation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CurrAnimRndVariation_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CurrAnimRndVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Loop3d_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Loop3d_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Loop3d_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Loop3d_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Step_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Step_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Step_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Step_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CurLoop_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurLoop_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CurLoop_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CurLoop_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Idle3d1_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Idle3d1_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Idle3d1_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Idle3d1_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Idle3d2_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Idle3d2_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Idle3d2_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Idle3d2_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Jump_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Jump_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Jump_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Jump_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Hit1_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Hit1_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Hit1_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Hit1_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Hit2_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Hit2_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Hit2_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Hit2_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Hit3_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Hit3_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Hit3_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Hit3_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Hit4_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Hit4_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Hit4_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Hit4_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Gasp1_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Gasp1_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Gasp1_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Gasp1_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Gasp2_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Gasp2_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Gasp2_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Gasp2_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Drown_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Drown_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Drown_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Drown_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Death_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Death_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Death_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Death_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Attk1_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Attk1_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Attk1_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Attk1_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Attk2_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Attk2_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Attk2_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Attk2_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Attk3_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Attk3_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Attk3_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Attk3_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Walk_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Walk_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Walk_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Walk_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Run_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Run_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Run_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Run_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Crouch_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Crouch_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Crouch_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Crouch_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Swim_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Swim_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Swim_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Swim_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_TreadWater_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TreadWater_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_TreadWater_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->TreadWater_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Climb_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Climb_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Climb_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Climb_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Sit_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Sit_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Sit_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Sit_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Kick_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Kick_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Kick_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Kick_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Bash_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Bash_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Bash_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Bash_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_FireBow_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FireBow_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_FireBow_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->FireBow_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_MonkAttack1_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MonkAttack1_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_MonkAttack1_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->MonkAttack1_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_MonkAttack2_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MonkAttack2_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_MonkAttack2_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->MonkAttack2_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_MonkSpecial_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MonkSpecial_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_MonkSpecial_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->MonkSpecial_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_PrimaryBlunt_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PrimaryBlunt_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_PrimaryBlunt_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->PrimaryBlunt_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_PrimarySlash_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PrimarySlash_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_PrimarySlash_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->PrimarySlash_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_PrimaryStab_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PrimaryStab_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_PrimaryStab_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->PrimaryStab_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Punch_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Punch_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Punch_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Punch_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Roundhouse_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Roundhouse_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_Roundhouse_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->Roundhouse_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_SecondaryBlunt_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SecondaryBlunt_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_SecondaryBlunt_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->SecondaryBlunt_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_SecondarySlash_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SecondarySlash_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_SecondarySlash_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->SecondarySlash_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_SecondaryStab_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SecondaryStab_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_SecondaryStab_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->SecondaryStab_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_SwimAttack_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SwimAttack_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_SwimAttack_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->SwimAttack_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_TwoHandedBlunt_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TwoHandedBlunt_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_TwoHandedBlunt_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->TwoHandedBlunt_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_TwoHandedSlash_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TwoHandedSlash_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_TwoHandedSlash_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->TwoHandedSlash_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_TwoHandedStab_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TwoHandedStab_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_TwoHandedStab_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->TwoHandedStab_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_SecondaryPunch_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SecondaryPunch_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_SecondaryPunch_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->SecondaryPunch_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_JumpAcross_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->JumpAcross_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_JumpAcross_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->JumpAcross_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_WalkBackwards_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WalkBackwards_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_WalkBackwards_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->WalkBackwards_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CrouchWalk_SoundID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CrouchWalk_SoundID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CrouchWalk_SoundID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CrouchWalk_SoundID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_LastWalkTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastWalkTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_LastWalkTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastWalkTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_ShipRelated_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ShipRelated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_ShipRelated_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->ShipRelated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_RightHolding_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RightHolding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_RightHolding_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->RightHolding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_LeftHolding_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LeftHolding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_LeftHolding_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->LeftHolding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_LastBubblesTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastBubblesTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_LastBubblesTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastBubblesTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_LastColdBreathTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastColdBreathTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_LastColdBreathTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastColdBreathTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_LastColdBreathOverrideTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastColdBreathOverrideTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_LastColdBreathOverrideTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastColdBreathOverrideTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_LastParticleUpdateTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastParticleUpdateTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_LastParticleUpdateTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastParticleUpdateTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CeilingHeightAtCurrLocation_set(void * jarg1, float jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CeilingHeightAtCurrLocation = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerClient_CeilingHeightAtCurrLocation_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (float) ((arg1)->CeilingHeightAtCurrLocation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_MobileEmitter_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  EqMobileEmitter *arg2 = (EqMobileEmitter *) 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (EqMobileEmitter *)jarg2; 
  if (arg1) (arg1)->MobileEmitter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_MobileEmitter_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  EqMobileEmitter *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (EqMobileEmitter *) ((arg1)->MobileEmitter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bInstantHPGaugeChange_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInstantHPGaugeChange = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bInstantHPGaugeChange_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bInstantHPGaugeChange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_LastUpdateReceivedTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastUpdateReceivedTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_LastUpdateReceivedTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastUpdateReceivedTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_MaxSpeakDistance_set(void * jarg1, float jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaxSpeakDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerClient_MaxSpeakDistance_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (float) ((arg1)->MaxSpeakDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_WalkSpeed_set(void * jarg1, float jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->WalkSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerClient_WalkSpeed_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (float) ((arg1)->WalkSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bHideCorpse_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->bHideCorpse = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bHideCorpse_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (uint32_t) ((arg1)->bHideCorpse);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_AssistName_set(void * jarg1, char * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AssistName, (const char *)arg2, 0x40-1);
      arg1->AssistName[0x40-1] = 0;
    } else {
      arg1->AssistName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerClient_AssistName_get(void * jarg1) {
  char * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (char *)(char *) ((arg1)->AssistName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_InvitedToGroup_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->InvitedToGroup = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_InvitedToGroup_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->InvitedToGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_GroupMemberTargeted_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GroupMemberTargeted = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GroupMemberTargeted_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->GroupMemberTargeted);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bRemovalPending_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRemovalPending = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bRemovalPending_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bRemovalPending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_pCorpse_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pCorpse = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_pCorpse_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (void *) ((arg1)->pCorpse);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_EmitterScalingRadius_set(void * jarg1, float jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->EmitterScalingRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerClient_EmitterScalingRadius_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (float) ((arg1)->EmitterScalingRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_DefaultEmitterID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DefaultEmitterID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_DefaultEmitterID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->DefaultEmitterID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bDisplayNameSprite_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisplayNameSprite = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bDisplayNameSprite_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bDisplayNameSprite);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bIdleAnimationOff_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIdleAnimationOff = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bIdleAnimationOff_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bIdleAnimationOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bIsInteractiveObject_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsInteractiveObject = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bIsInteractiveObject_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bIsInteractiveObject);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_InteractiveObjectModelName_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->InteractiveObjectModelName;
    for (ii = 0; ii < (size_t)0x80; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_InteractiveObjectModelName_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->InteractiveObjectModelName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_InteractiveObjectOtherName_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->InteractiveObjectOtherName;
    for (ii = 0; ii < (size_t)0x80; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_InteractiveObjectOtherName_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->InteractiveObjectOtherName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_InteractiveObjectName_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->InteractiveObjectName;
    for (ii = 0; ii < (size_t)0x40; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_InteractiveObjectName_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->InteractiveObjectName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_PhysicsBeforeLastPort_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::CPhysicsInfo *arg2 = (eqlib::CPhysicsInfo *) 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (eqlib::CPhysicsInfo *)jarg2; 
  if (arg1) (arg1)->PhysicsBeforeLastPort = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_PhysicsBeforeLastPort_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::CPhysicsInfo *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (eqlib::CPhysicsInfo *)& ((arg1)->PhysicsBeforeLastPort);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Fellowship_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::SFellowship *arg2 = (eqlib::SFellowship *) 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (eqlib::SFellowship *)jarg2; 
  if (arg1) (arg1)->Fellowship = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_Fellowship_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::SFellowship *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (eqlib::SFellowship *)& ((arg1)->Fellowship);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CampfireY_set(void * jarg1, float jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CampfireY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerClient_CampfireY_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (float) ((arg1)->CampfireY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CampfireX_set(void * jarg1, float jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CampfireX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerClient_CampfireX_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (float) ((arg1)->CampfireX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CampfireZ_set(void * jarg1, float jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CampfireZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_PlayerClient_CampfireZ_get(void * jarg1) {
  float jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  float result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (float) ((arg1)->CampfireZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CampfireZoneID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CampfireZoneID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CampfireZoneID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CampfireZoneID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CampfireTimestamp_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CampfireTimestamp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CampfireTimestamp_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CampfireTimestamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CampfireTimestamp2_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CampfireTimestamp2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CampfireTimestamp2_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CampfireTimestamp2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CampType_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CampType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CampType_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CampType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Campfire_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Campfire = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_Campfire_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->Campfire);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_Equipment_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  EQUIPMENT *arg2 = (EQUIPMENT *) 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (EQUIPMENT *)jarg2; 
  if (arg1) (arg1)->Equipment = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_Equipment_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  EQUIPMENT *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (EQUIPMENT *)& ((arg1)->Equipment);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bIsPlacingItem_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPlacingItem = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bIsPlacingItem_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bIsPlacingItem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bGMCreatedNPC_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bGMCreatedNPC = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bGMCreatedNPC_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bGMCreatedNPC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_ObjectAnimationID_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ObjectAnimationID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_ObjectAnimationID_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->ObjectAnimationID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bInteractiveObjectCollidable_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInteractiveObjectCollidable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bInteractiveObjectCollidable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bInteractiveObjectCollidable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_InteractiveObjectType_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->InteractiveObjectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_InteractiveObjectType_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->InteractiveObjectType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_SoundIDs_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->SoundIDs;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_SoundIDs_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int *)(int *) ((arg1)->SoundIDs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_LastHistorySentTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastHistorySentTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_LastHistorySentTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int) ((arg1)->LastHistorySentTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_BardTwistSpells_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  ArrayClass2< unsigned int > *arg2 = (ArrayClass2< unsigned int > *) 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (ArrayClass2< unsigned int > *)jarg2; 
  if (arg1) (arg1)->BardTwistSpells = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_BardTwistSpells_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  ArrayClass2< unsigned int > *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (ArrayClass2< unsigned int > *)& ((arg1)->BardTwistSpells);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_CurrentBardTwistIndex_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrentBardTwistIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_CurrentBardTwistIndex_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->CurrentBardTwistIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_mPlayerPhysicsClient_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::PlayerPhysicsClient *arg2 = (eqlib::PlayerPhysicsClient *) 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (eqlib::PlayerPhysicsClient *)jarg2; 
  if (arg1) (arg1)->mPlayerPhysicsClient = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_mPlayerPhysicsClient_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::PlayerPhysicsClient *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (eqlib::PlayerPhysicsClient *)& ((arg1)->mPlayerPhysicsClient);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_SpawnStatus_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->SpawnStatus;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_SpawnStatus_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int *)(int *) ((arg1)->SpawnStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_BannerIndex0_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BannerIndex0 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_BannerIndex0_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->BannerIndex0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_BannerIndex1_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BannerIndex1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_BannerIndex1_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->BannerIndex1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_BannerTint0_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  ARGBCOLOR arg2 ;
  ARGBCOLOR *argp2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  argp2 = (ARGBCOLOR *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ARGBCOLOR", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BannerTint0 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_BannerTint0_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  ARGBCOLOR result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result =  ((arg1)->BannerTint0);
  jresult = new ARGBCOLOR(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_BannerTint1_set(void * jarg1, void * jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  ARGBCOLOR arg2 ;
  ARGBCOLOR *argp2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  argp2 = (ARGBCOLOR *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ARGBCOLOR", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->BannerTint1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_BannerTint1_get(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  ARGBCOLOR result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result =  ((arg1)->BannerTint1);
  jresult = new ARGBCOLOR(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_MountAnimationRelated_set(void * jarg1, int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MountAnimationRelated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_MountAnimationRelated_get(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int) ((arg1)->MountAnimationRelated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bGuildShowAnim_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bGuildShowAnim = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bGuildShowAnim_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bGuildShowAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_bWaitingForPort_set(void * jarg1, unsigned int jarg2) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bWaitingForPort = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_bWaitingForPort_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool) ((arg1)->bWaitingForPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetClass(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerClient_GetClassString(void * jarg1) {
  char * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (char *)((eqlib::PlayerClient const *)arg1)->GetClassString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerClient_GetClassThreeLetterCode(void * jarg1) {
  char * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (char *)((eqlib::PlayerClient const *)arg1)->GetClassThreeLetterCode();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetRaceWithOverride(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetRaceWithOverride();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetRace(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetRace();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerClient_GetRaceString(void * jarg1) {
  char * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (char *)((eqlib::PlayerClient const *)arg1)->GetRaceString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetGender(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetGender();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_PlayerClient_GetCharacterType(void * jarg1) {
  unsigned char jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (BYTE)((eqlib::PlayerClient const *)arg1)->GetCharacterType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_GetShowHelm(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool)((eqlib::PlayerClient const *)arg1)->GetShowHelm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_GetId(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int)((eqlib::PlayerClient const *)arg1)->GetId();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_GetCharacter(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  CharacterZoneClient *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (CharacterZoneClient *)((eqlib::PlayerClient const *)arg1)->GetCharacter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetZoneID(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  EQZoneIndex result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (EQZoneIndex)((eqlib::PlayerClient const *)arg1)->GetZoneID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetCurrentMana(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetCurrentMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetMaxMana(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetMaxMana();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetCurrentEndurance(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetCurrentEndurance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetMaxEndurance(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetMaxEndurance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_GetSpellCooldownETA(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (unsigned int)((eqlib::PlayerClient const *)arg1)->GetSpellCooldownETA();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerClient_IsGm(void * jarg1) {
  unsigned int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (bool)((eqlib::PlayerClient const *)arg1)->IsGm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerClient_GetPcClient(void * jarg1) {
  void * jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  eqlib::PcClient *result = 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (eqlib::PcClient *)((eqlib::PlayerClient const *)arg1)->GetPcClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerClient_ChangeBoneStringSprite(void * jarg1, int jarg2, char * jarg3) {
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ChangeBoneStringSprite(arg2,(char const *)arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_GetSeeInvisLevel(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::PlayerClient const *)arg1)->GetSeeInvisLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerClient_get_Zero(void * jarg1) {
  int jresult ;
  eqlib::PlayerClient *arg1 = (eqlib::PlayerClient *) 0 ;
  int result;
  
  arg1 = (eqlib::PlayerClient *)jarg1; 
  result = (int)((eqlib::PlayerClient const *)arg1)->get_Zero();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetNameForContainerInstance(int jarg1) {
  char * jresult ;
  eqlib::ItemContainerInstance arg1 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemContainerInstance)jarg1; 
  result = (char *)eqlib::GetNameForContainerInstance(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemIndex_MAX_INVENTORY_DEPTH_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::ItemIndex::MAX_INVENTORY_DEPTH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemIndex_m_slots_set(void * jarg1, void * jarg2) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  short *arg2 = (short *) (short *)0 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (short *)jarg2; 
  {
    size_t ii;
    short *b = (short *) arg1->m_slots;
    for (ii = 0; ii < (size_t)eqlib::ItemIndex::MAX_INVENTORY_DEPTH; ii++) b[ii] = *((short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemIndex_m_slots_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  short *result = 0 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (short *)(short *) ((arg1)->m_slots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemIndex__SWIG_0() {
  void * jresult ;
  eqlib::ItemIndex *result = 0 ;
  
  result = (eqlib::ItemIndex *)new eqlib::ItemIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemIndex__SWIG_1(void * jarg1) {
  void * jresult ;
  eqlib::ItemIndex *arg1 = 0 ;
  eqlib::ItemIndex *result = 0 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return 0;
  } 
  result = (eqlib::ItemIndex *)new eqlib::ItemIndex((eqlib::ItemIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemIndex__SWIG_2(short jarg1, short jarg2, short jarg3) {
  void * jresult ;
  short arg1 ;
  short arg2 ;
  short arg3 ;
  eqlib::ItemIndex *result = 0 ;
  
  arg1 = (short)jarg1; 
  arg2 = (short)jarg2; 
  arg3 = (short)jarg3; 
  result = (eqlib::ItemIndex *)new eqlib::ItemIndex(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemIndex__SWIG_3(short jarg1, short jarg2) {
  void * jresult ;
  short arg1 ;
  short arg2 ;
  eqlib::ItemIndex *result = 0 ;
  
  arg1 = (short)jarg1; 
  arg2 = (short)jarg2; 
  result = (eqlib::ItemIndex *)new eqlib::ItemIndex(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemIndex__SWIG_4(short jarg1) {
  void * jresult ;
  short arg1 ;
  eqlib::ItemIndex *result = 0 ;
  
  arg1 = (short)jarg1; 
  result = (eqlib::ItemIndex *)new eqlib::ItemIndex(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemIndex_GetTopSlot(void * jarg1) {
  short jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  short result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (short)((eqlib::ItemIndex const *)arg1)->GetTopSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemIndex_SetSlot(void * jarg1, int jarg2, short jarg3) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int arg2 ;
  short arg3 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (short)jarg3; 
  (arg1)->SetSlot(arg2,arg3);
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemIndex_GetSlot(void * jarg1, int jarg2) {
  short jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int arg2 ;
  short result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (int)jarg2; 
  result = (short)((eqlib::ItemIndex const *)arg1)->GetSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemIndex_GetDeepestSlot(void * jarg1) {
  short jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  short result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (short)((eqlib::ItemIndex const *)arg1)->GetDeepestSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemIndex_IsValid(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (bool)((eqlib::ItemIndex const *)arg1)->IsValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemIndex_IsBase(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (bool)((eqlib::ItemIndex const *)arg1)->IsBase();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemIndex_IsInContainer(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (bool)((eqlib::ItemIndex const *)arg1)->IsInContainer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemIndex_GetParentIndex(void * jarg1) {
  void * jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  eqlib::ItemIndex result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = ((eqlib::ItemIndex const *)arg1)->GetParentIndex();
  jresult = new eqlib::ItemIndex(result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemIndex_FormatItemIndex(void * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (char *)((eqlib::ItemIndex const *)arg1)->FormatItemIndex(arg2,SWIG_STD_MOVE(arg3));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemIndex_Slot1_set(void * jarg1, int jarg2) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Slot1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemIndex_Slot1_get(void * jarg1) {
  int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (int) ((arg1)->Slot1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemIndex_Slot2_set(void * jarg1, int jarg2) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Slot2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemIndex_Slot2_get(void * jarg1) {
  int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (int) ((arg1)->Slot2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemIndex_Slot3_set(void * jarg1, int jarg2) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Slot3 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemIndex_Slot3_get(void * jarg1) {
  int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (int) ((arg1)->Slot3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemIndex_getSlot1(void * jarg1) {
  int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (int)((eqlib::ItemIndex const *)arg1)->getSlot1();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemIndex_setSlot1(void * jarg1, int jarg2) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSlot1(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemIndex_getSlot2(void * jarg1) {
  int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (int)((eqlib::ItemIndex const *)arg1)->getSlot2();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemIndex_setSlot2(void * jarg1, int jarg2) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSlot2(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemIndex_getSlot3(void * jarg1) {
  int jresult ;
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  result = (int)((eqlib::ItemIndex const *)arg1)->getSlot3();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemIndex_setSlot3(void * jarg1, int jarg2) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setSlot3(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemIndex(void * jarg1) {
  eqlib::ItemIndex *arg1 = (eqlib::ItemIndex *) 0 ;
  
  arg1 = (eqlib::ItemIndex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemGlobalIndex_Location_set(void * jarg1, int jarg2) {
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemContainerInstance arg2 ;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  if (arg1) (arg1)->Location = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemGlobalIndex_Location_get(void * jarg1) {
  int jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemContainerInstance result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (eqlib::ItemContainerInstance) ((arg1)->Location);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemGlobalIndex_Index_set(void * jarg1, void * jarg2) {
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemIndex *arg2 = (eqlib::ItemIndex *) 0 ;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  arg2 = (eqlib::ItemIndex *)jarg2; 
  if (arg1) (arg1)->Index = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemGlobalIndex_Index_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemIndex *result = 0 ;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (eqlib::ItemIndex *)& ((arg1)->Index);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemGlobalIndex__SWIG_0() {
  void * jresult ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  result = (eqlib::ItemGlobalIndex *)new eqlib::ItemGlobalIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemGlobalIndex__SWIG_1(void * jarg1) {
  void * jresult ;
  eqlib::ItemGlobalIndex *arg1 = 0 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemGlobalIndex const & is null", 0);
    return 0;
  } 
  result = (eqlib::ItemGlobalIndex *)new eqlib::ItemGlobalIndex((eqlib::ItemGlobalIndex const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemGlobalIndex__SWIG_2(int jarg1, void * jarg2) {
  void * jresult ;
  eqlib::ItemContainerInstance arg1 ;
  eqlib::ItemIndex *arg2 = 0 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::ItemContainerInstance)jarg1; 
  arg2 = (eqlib::ItemIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return 0;
  } 
  result = (eqlib::ItemGlobalIndex *)new eqlib::ItemGlobalIndex(arg1,(eqlib::ItemIndex const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemGlobalIndex__SWIG_3(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  eqlib::ItemContainerInstance arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::ItemContainerInstance)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (eqlib::ItemGlobalIndex *)new eqlib::ItemGlobalIndex(arg1,arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemGlobalIndex__SWIG_4(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  eqlib::ItemContainerInstance arg1 ;
  int arg2 ;
  int arg3 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::ItemContainerInstance)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (eqlib::ItemGlobalIndex *)new eqlib::ItemGlobalIndex(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemGlobalIndex__SWIG_5(int jarg1, int jarg2) {
  void * jresult ;
  eqlib::ItemContainerInstance arg1 ;
  int arg2 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::ItemContainerInstance)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::ItemGlobalIndex *)new eqlib::ItemGlobalIndex(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemGlobalIndex_SetLocation(void * jarg1, int jarg2) {
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemContainerInstance arg2 ;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  (arg1)->SetLocation(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemGlobalIndex_GetLocation(void * jarg1) {
  int jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemContainerInstance result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (eqlib::ItemContainerInstance)((eqlib::ItemGlobalIndex const *)arg1)->GetLocation();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemGlobalIndex_SetIndex(void * jarg1, void * jarg2) {
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemIndex *arg2 = 0 ;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  arg2 = (eqlib::ItemIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return ;
  } 
  (arg1)->SetIndex((eqlib::ItemIndex const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemGlobalIndex_GetIndex__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemIndex *result = 0 ;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (eqlib::ItemIndex *) &(arg1)->GetIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemGlobalIndex_GetTopSlot(void * jarg1) {
  short jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  short result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (short)((eqlib::ItemGlobalIndex const *)arg1)->GetTopSlot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT short SWIGSTDCALL CSharp_ItemGlobalIndex_GetSlot(void * jarg1, int jarg2) {
  short jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  int arg2 ;
  short result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  arg2 = (int)jarg2; 
  result = (short)((eqlib::ItemGlobalIndex const *)arg1)->GetSlot(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemGlobalIndex_GetParent(void * jarg1) {
  void * jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  eqlib::ItemGlobalIndex result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = ((eqlib::ItemGlobalIndex const *)arg1)->GetParent();
  jresult = new eqlib::ItemGlobalIndex(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemGlobalIndex_IsKeyRingLocation(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (bool)((eqlib::ItemGlobalIndex const *)arg1)->IsKeyRingLocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemGlobalIndex_IsEquippedLocation(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (bool)((eqlib::ItemGlobalIndex const *)arg1)->IsEquippedLocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemGlobalIndex_IsValidIndex(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (bool)((eqlib::ItemGlobalIndex const *)arg1)->IsValidIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemGlobalIndex_IsValidLocation(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  result = (bool)((eqlib::ItemGlobalIndex const *)arg1)->IsValidLocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemGlobalIndex(void * jarg1) {
  eqlib::ItemGlobalIndex *arg1 = (eqlib::ItemGlobalIndex *) 0 ;
  
  arg1 = (eqlib::ItemGlobalIndex *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemContainer__SWIG_0(int jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  int arg1 ;
  eqlib::ItemContainerInstance arg2 ;
  bool arg3 ;
  eqlib::ItemContainer *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (eqlib::ItemContainer *)new eqlib::ItemContainer(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemContainer__SWIG_1(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  eqlib::ItemContainerInstance arg2 ;
  eqlib::ItemContainer *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  result = (eqlib::ItemContainer *)new eqlib::ItemContainer(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  SwigValueWrapper< VeArray< VePointer< eqlib::ItemClient > >::iterator > result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (arg1)->begin();
  jresult = new eqlib::ItemContainer::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_cbegin(void * jarg1) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  SwigValueWrapper< VeArray< VePointer< eqlib::ItemClient > >::const_iterator > result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = ((eqlib::ItemContainer const *)arg1)->cbegin();
  jresult = new eqlib::ItemContainer::const_iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_end__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  SwigValueWrapper< VeArray< VePointer< eqlib::ItemClient > >::iterator > result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (arg1)->end();
  jresult = new eqlib::ItemContainer::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_cend(void * jarg1) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  SwigValueWrapper< VeArray< VePointer< eqlib::ItemClient > >::const_iterator > result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = ((eqlib::ItemContainer const *)arg1)->cend();
  jresult = new eqlib::ItemContainer::const_iterator(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_IsValidRange(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  SwigValueWrapper< VeArray< VePointer< eqlib::ItemClient > >::const_iterator > arg2 ;
  SwigValueWrapper< VeArray< VePointer< eqlib::ItemClient > >::const_iterator > arg3 ;
  eqlib::ItemContainer::const_iterator *argp2 ;
  eqlib::ItemContainer::const_iterator *argp3 ;
  bool result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  argp2 = (eqlib::ItemContainer::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::ItemContainer::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (eqlib::ItemContainer::const_iterator *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::ItemContainer::const_iterator", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((eqlib::ItemContainer const *)arg1)->IsValidRange(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_IsDynamic(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (bool)((eqlib::ItemContainer const *)arg1)->IsDynamic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_CreateItemIndex__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  eqlib::ItemIndex result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = ((eqlib::ItemContainer const *)arg1)->CreateItemIndex(arg2,arg3,arg4);
  jresult = new eqlib::ItemIndex(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_CreateItemIndex__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  int arg3 ;
  eqlib::ItemIndex result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ((eqlib::ItemContainer const *)arg1)->CreateItemIndex(arg2,arg3);
  jresult = new eqlib::ItemIndex(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_CreateItemIndex__SWIG_2(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  eqlib::ItemIndex result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eqlib::ItemContainer const *)arg1)->CreateItemIndex(arg2);
  jresult = new eqlib::ItemIndex(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_CreateItemGlobalIndex__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  eqlib::ItemContainerInstance arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  eqlib::ItemGlobalIndex result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = ((eqlib::ItemContainer const *)arg1)->CreateItemGlobalIndex(arg2,arg3,arg4,arg5);
  jresult = new eqlib::ItemGlobalIndex(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_CreateItemGlobalIndex__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  eqlib::ItemContainerInstance arg2 ;
  int arg3 ;
  int arg4 ;
  eqlib::ItemGlobalIndex result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = ((eqlib::ItemContainer const *)arg1)->CreateItemGlobalIndex(arg2,arg3,arg4);
  jresult = new eqlib::ItemGlobalIndex(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_CreateItemGlobalIndex__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  eqlib::ItemContainerInstance arg2 ;
  int arg3 ;
  eqlib::ItemGlobalIndex result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  arg3 = (int)jarg3; 
  result = ((eqlib::ItemContainer const *)arg1)->CreateItemGlobalIndex(arg2,arg3);
  jresult = new eqlib::ItemGlobalIndex(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemContainer_GetContainerType(void * jarg1) {
  int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  eqlib::ItemContainerInstance result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (eqlib::ItemContainerInstance)((eqlib::ItemContainer const *)arg1)->GetContainerType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemContainer_GetAtDepth(void * jarg1) {
  int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (int)((eqlib::ItemContainer const *)arg1)->GetAtDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (bool)((eqlib::ItemContainer const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_IsFull(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (bool)((eqlib::ItemContainer const *)arg1)->IsFull();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_IsValidIndex__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  eqlib::ItemIndex *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (eqlib::ItemIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return 0;
  } 
  result = (bool)((eqlib::ItemContainer const *)arg1)->IsValidIndex((eqlib::ItemIndex const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_IsValidIndex__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((eqlib::ItemContainer const *)arg1)->IsValidIndex(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemContainer_SetSize(void * jarg1, int jarg2) {
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSize(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_GetItem__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eqlib::ItemContainer const *)arg1)->GetItem(arg2);
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_GetItem__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  eqlib::ItemIndex *arg2 = 0 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (eqlib::ItemIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return 0;
  } 
  result = ((eqlib::ItemContainer const *)arg1)->GetItem((eqlib::ItemIndex const &)*arg2);
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_ItemCountVisitor_GetCount(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemContainer::ItemCountVisitor *arg1 = (eqlib::ItemContainer::ItemCountVisitor *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemContainer::ItemCountVisitor *)jarg1; 
  result = (uint32_t)((eqlib::ItemContainer::ItemCountVisitor const *)arg1)->GetCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemContainer_ItemCountVisitor() {
  void * jresult ;
  eqlib::ItemContainer::ItemCountVisitor *result = 0 ;
  
  result = (eqlib::ItemContainer::ItemCountVisitor *)new eqlib::ItemContainer::ItemCountVisitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemContainer_ItemCountVisitor(void * jarg1) {
  eqlib::ItemContainer::ItemCountVisitor *arg1 = (eqlib::ItemContainer::ItemCountVisitor *) 0 ;
  
  arg1 = (eqlib::ItemContainer::ItemCountVisitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemContainer_GetSize__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::ItemContainer const *)arg1)->GetSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemContainer_GetSize__SWIG_1(void * jarg1) {
  int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (int)((eqlib::ItemContainer const *)arg1)->GetSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemContainer_GetRecursiveSize(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::ItemContainer const *)arg1)->GetRecursiveSize(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_GetCount__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (uint32_t)((eqlib::ItemContainer const *)arg1)->GetCount(arg2,arg3,arg4);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_GetCount__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int arg2 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint32_t)((eqlib::ItemContainer const *)arg1)->GetCount(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_GetCount__SWIG_2(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (uint32_t)((eqlib::ItemContainer const *)arg1)->GetCount();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_IsItemInBagOrBase(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  eqlib::ItemIndex *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (eqlib::ItemIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return 0;
  } 
  result = (bool)((eqlib::ItemContainer const *)arg1)->IsItemInBagOrBase((eqlib::ItemIndex const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemContainer_IsItemInSocket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  eqlib::ItemIndex *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  arg2 = (eqlib::ItemIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return 0;
  } 
  result = (bool)((eqlib::ItemContainer const *)arg1)->IsItemInSocket((eqlib::ItemIndex const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_getter_ContentSize(void * jarg1) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (uint32_t *) &(arg1)->getter_ContentSize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_getter_ItemLocation(void * jarg1) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (int *) &(arg1)->getter_ItemLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_getter_ItemSlot(void * jarg1) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  short *result = 0 ;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (short *) &(arg1)->getter_ItemSlot();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemContainer_getter_ItemSlot2(void * jarg1) {
  void * jresult ;
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  short *result = 0 ;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  result = (short *) &(arg1)->getter_ItemSlot2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemContainer(void * jarg1) {
  eqlib::ItemContainer *arg1 = (eqlib::ItemContainer *) 0 ;
  
  arg1 = (eqlib::ItemContainer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IChildItemContainer_GetChildItemContainer__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::IChildItemContainer *arg1 = (eqlib::IChildItemContainer *) 0 ;
  eqlib::ItemContainer *result = 0 ;
  
  arg1 = (eqlib::IChildItemContainer *)jarg1; 
  result = (eqlib::ItemContainer *)(arg1)->GetChildItemContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IChildItemContainer_CreateCopy(void * jarg1) {
  void * jresult ;
  eqlib::IChildItemContainer *arg1 = (eqlib::IChildItemContainer *) 0 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  arg1 = (eqlib::IChildItemContainer *)jarg1; 
  result = ((eqlib::IChildItemContainer const *)arg1)->CreateCopy();
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IChildItemContainer_SetItemLocation(void * jarg1, int jarg2, void * jarg3) {
  eqlib::IChildItemContainer *arg1 = (eqlib::IChildItemContainer *) 0 ;
  eqlib::ItemContainerInstance arg2 ;
  eqlib::ItemIndex *arg3 = 0 ;
  
  arg1 = (eqlib::IChildItemContainer *)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  arg3 = (eqlib::ItemIndex *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return ;
  } 
  (arg1)->SetItemLocation(arg2,(eqlib::ItemIndex const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IChildItemContainer(void * jarg1) {
  eqlib::IChildItemContainer *arg1 = (eqlib::IChildItemContainer *) 0 ;
  
  arg1 = (eqlib::IChildItemContainer *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_SpellID_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_SpellID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int) ((arg1)->SpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_RequiredLevel_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->RequiredLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemSpellData_SpellData_RequiredLevel_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (uint8_t) ((arg1)->RequiredLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_EffectType_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  eqlib::eItemEffectType arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (eqlib::eItemEffectType)jarg2; 
  if (arg1) (arg1)->EffectType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_EffectType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  eqlib::eItemEffectType result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (eqlib::eItemEffectType) ((arg1)->EffectType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_EffectiveCasterLevel_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EffectiveCasterLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_EffectiveCasterLevel_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int) ((arg1)->EffectiveCasterLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_MaxCharges_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxCharges = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_MaxCharges_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int) ((arg1)->MaxCharges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_CastTime_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CastTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_CastTime_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int) ((arg1)->CastTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_RecastTime_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RecastTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_RecastTime_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int) ((arg1)->RecastTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_RecastType_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RecastType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_RecastType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int) ((arg1)->RecastType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_ProcRate_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ProcRate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_ProcRate_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int) ((arg1)->ProcRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_OverrideName_set(void * jarg1, char * jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->OverrideName, (const char *)arg2, 64-1);
      arg1->OverrideName[64-1] = 0;
    } else {
      arg1->OverrideName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemSpellData_SpellData_OverrideName_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (char *)(char *) ((arg1)->OverrideName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_OverrideDesc_set(void * jarg1, int jarg2) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OverrideDesc = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_OverrideDesc_get(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int) ((arg1)->OverrideDesc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemSpellData_SpellData() {
  void * jresult ;
  eqlib::ItemSpellData::SpellData *result = 0 ;
  
  result = (eqlib::ItemSpellData::SpellData *)new eqlib::ItemSpellData::SpellData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SpellData_Reset(void * jarg1) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_SpellData_get_TimerID(void * jarg1) {
  int jresult ;
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  result = (int)((eqlib::ItemSpellData::SpellData const *)arg1)->get_TimerID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemSpellData_SpellData(void * jarg1) {
  eqlib::ItemSpellData::SpellData *arg1 = (eqlib::ItemSpellData::SpellData *) 0 ;
  
  arg1 = (eqlib::ItemSpellData::SpellData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_Spells_set(void * jarg1, void * jarg2) {
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellData::SpellData *arg2 = (eqlib::ItemSpellData::SpellData *) (eqlib::ItemSpellData::SpellData *)0 ;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellData::SpellData *)jarg2; 
  {
    size_t ii;
    eqlib::ItemSpellData::SpellData *b = (eqlib::ItemSpellData::SpellData *) arg1->Spells;
    for (ii = 0; ii < (size_t)eqlib::ItemSpellType_Max; ii++) b[ii] = *((eqlib::ItemSpellData::SpellData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSpellData_Spells_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellData::SpellData *result = 0 ;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  result = (eqlib::ItemSpellData::SpellData *)(eqlib::ItemSpellData::SpellData *) ((arg1)->Spells);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_SkillMask_set(void * jarg1, void * jarg2) {
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->SkillMask;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSpellData_SkillMask_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->SkillMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetSpellId(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemSpellData const *)arg1)->GetSpellId(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemSpellData_GetSpelllRequiredLevel(void * jarg1, int jarg2) {
  unsigned char jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (uint8_t)((eqlib::ItemSpellData const *)arg1)->GetSpelllRequiredLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetSpellEffectType(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  eqlib::eItemEffectType result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (eqlib::eItemEffectType)((eqlib::ItemSpellData const *)arg1)->GetSpellEffectType(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetSpellEffectiveCasterLevel(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemSpellData const *)arg1)->GetSpellEffectiveCasterLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetSpellMaxCharges(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemSpellData const *)arg1)->GetSpellMaxCharges(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetSpellCastTime(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemSpellData const *)arg1)->GetSpellCastTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetSpellRecastTime(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemSpellData const *)arg1)->GetSpellRecastTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetSpellRecastType(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemSpellData const *)arg1)->GetSpellRecastType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetSpellChanceProc(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemSpellData const *)arg1)->GetSpellChanceProc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemSpellData_GetOverrideName(void * jarg1, int jarg2) {
  char * jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (char *)((eqlib::ItemSpellData const *)arg1)->GetOverrideName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSpellData_GetOverrideDesc(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemSpellData const *)arg1)->GetOverrideDesc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSpellData_GetSpellData(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  eqlib::ItemSpellData::SpellData *result = 0 ;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (eqlib::ItemSpellData::SpellData *)(arg1)->GetSpellData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemSpellData() {
  void * jresult ;
  eqlib::ItemSpellData *result = 0 ;
  
  result = (eqlib::ItemSpellData *)new eqlib::ItemSpellData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSpellData_Reset(void * jarg1) {
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemSpellData(void * jarg1) {
  eqlib::ItemSpellData *arg1 = (eqlib::ItemSpellData *) 0 ;
  
  arg1 = (eqlib::ItemSpellData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemAugmentationSocket_Type_set(void * jarg1, int jarg2) {
  eqlib::ItemAugmentationSocket *arg1 = (eqlib::ItemAugmentationSocket *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemAugmentationSocket *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemAugmentationSocket_Type_get(void * jarg1) {
  int jresult ;
  eqlib::ItemAugmentationSocket *arg1 = (eqlib::ItemAugmentationSocket *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemAugmentationSocket *)jarg1; 
  result = (int) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemAugmentationSocket_bVisible_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemAugmentationSocket *arg1 = (eqlib::ItemAugmentationSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemAugmentationSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bVisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemAugmentationSocket_bVisible_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemAugmentationSocket *arg1 = (eqlib::ItemAugmentationSocket *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemAugmentationSocket *)jarg1; 
  result = (bool) ((arg1)->bVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemAugmentationSocket_bInfusible_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemAugmentationSocket *arg1 = (eqlib::ItemAugmentationSocket *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemAugmentationSocket *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInfusible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemAugmentationSocket_bInfusible_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemAugmentationSocket *arg1 = (eqlib::ItemAugmentationSocket *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemAugmentationSocket *)jarg1; 
  result = (bool) ((arg1)->bInfusible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemAugmentationSocket() {
  void * jresult ;
  eqlib::ItemAugmentationSocket *result = 0 ;
  
  result = (eqlib::ItemAugmentationSocket *)new eqlib::ItemAugmentationSocket();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemAugmentationSocket(void * jarg1) {
  eqlib::ItemAugmentationSocket *arg1 = (eqlib::ItemAugmentationSocket *) 0 ;
  
  arg1 = (eqlib::ItemAugmentationSocket *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSocketData_Sockets_set(void * jarg1, void * jarg2) {
  eqlib::ItemSocketData *arg1 = (eqlib::ItemSocketData *) 0 ;
  eqlib::ItemAugmentationSocket *arg2 = (eqlib::ItemAugmentationSocket *) (eqlib::ItemAugmentationSocket *)0 ;
  
  arg1 = (eqlib::ItemSocketData *)jarg1; 
  arg2 = (eqlib::ItemAugmentationSocket *)jarg2; 
  {
    size_t ii;
    eqlib::ItemAugmentationSocket *b = (eqlib::ItemAugmentationSocket *) arg1->Sockets;
    for (ii = 0; ii < (size_t)eqlib::MAX_AUG_SOCKETS; ii++) b[ii] = *((eqlib::ItemAugmentationSocket *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemSocketData_Sockets_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemSocketData *arg1 = (eqlib::ItemSocketData *) 0 ;
  eqlib::ItemAugmentationSocket *result = 0 ;
  
  arg1 = (eqlib::ItemSocketData *)jarg1; 
  result = (eqlib::ItemAugmentationSocket *)(eqlib::ItemAugmentationSocket *) ((arg1)->Sockets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemSocketData_IsSocketValid(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::ItemSocketData *arg1 = (eqlib::ItemSocketData *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::ItemSocketData *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((eqlib::ItemSocketData const *)arg1)->IsSocketValid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSocketData_GetSocketType(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSocketData *arg1 = (eqlib::ItemSocketData *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSocketData *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::ItemSocketData const *)arg1)->GetSocketType(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSocketData_IsSocketVisible(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSocketData *arg1 = (eqlib::ItemSocketData *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSocketData *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::ItemSocketData const *)arg1)->IsSocketVisible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemSocketData_IsSocketInfusable(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemSocketData *arg1 = (eqlib::ItemSocketData *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::ItemSocketData *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::ItemSocketData const *)arg1)->IsSocketInfusable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemSocketData_Reset(void * jarg1) {
  eqlib::ItemSocketData *arg1 = (eqlib::ItemSocketData *) 0 ;
  
  arg1 = (eqlib::ItemSocketData *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemSocketData() {
  void * jresult ;
  eqlib::ItemSocketData *result = 0 ;
  
  result = (eqlib::ItemSocketData *)new eqlib::ItemSocketData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemSocketData(void * jarg1) {
  eqlib::ItemSocketData *arg1 = (eqlib::ItemSocketData *) 0 ;
  
  arg1 = (eqlib::ItemSocketData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::ItemDefinition_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Name_set(void * jarg1, char * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, eqlib::ITEM_NAME_LEN-1);
      arg1->Name[eqlib::ITEM_NAME_LEN-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemDefinition_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_LoreName_set(void * jarg1, char * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LoreName, (const char *)arg2, eqlib::LORE_NAME_LEN-1);
      arg1->LoreName[eqlib::LORE_NAME_LEN-1] = 0;
    } else {
      arg1->LoreName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemDefinition_LoreName_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char *)(char *) ((arg1)->LoreName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_AdvancedLoreName_set(void * jarg1, char * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AdvancedLoreName, (const char *)arg2, 32-1);
      arg1->AdvancedLoreName[32-1] = 0;
    } else {
      arg1->AdvancedLoreName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemDefinition_AdvancedLoreName_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char *)(char *) ((arg1)->AdvancedLoreName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_IDFile_set(void * jarg1, char * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->IDFile, (const char *)arg2, 30-1);
      arg1->IDFile[30-1] = 0;
    } else {
      arg1->IDFile[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemDefinition_IDFile_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char *)(char *) ((arg1)->IDFile);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_IDFile2_set(void * jarg1, char * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->IDFile2, (const char *)arg2, 30-1);
      arg1->IDFile2[30-1] = 0;
    } else {
      arg1->IDFile2[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemDefinition_IDFile2_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char *)(char *) ((arg1)->IDFile2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_ItemNumber_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ItemNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_ItemNumber_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->ItemNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_EquipSlots_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EquipSlots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_EquipSlots_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->EquipSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Cost_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Cost = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Cost_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Cost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_IconNumber_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IconNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_IconNumber_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->IconNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_eGMRequirement_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->eGMRequirement = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_eGMRequirement_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->eGMRequirement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bPoofOnDeath_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bPoofOnDeath = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bPoofOnDeath_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bPoofOnDeath);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Unknown0x0100_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0x0100 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Unknown0x0100_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Unknown0x0100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Unknown0x0104_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0x0104 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Unknown0x0104_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Unknown0x0104);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Weight_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Weight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Weight_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_NoRent_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoRent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_NoRent_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->NoRent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_IsDroppable_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsDroppable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_IsDroppable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->IsDroppable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Attuneable_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Attuneable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_Attuneable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->Attuneable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Heirloom_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Heirloom = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_Heirloom_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->Heirloom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Collectible_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Collectible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_Collectible_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->Collectible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_NoDestroy_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoDestroy = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_NoDestroy_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->NoDestroy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_MarketPlace_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MarketPlace = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_MarketPlace_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->MarketPlace);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_NoZone_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoZone = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_NoZone_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->NoZone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_MakerID_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MakerID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_MakerID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->MakerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_NoGround_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoGround = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_NoGround_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->NoGround);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Size_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Size = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_Size_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->Size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Type_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_Type_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_TradeSkills_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->TradeSkills = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_TradeSkills_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->TradeSkills);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Lore_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Lore = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Lore_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Lore);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Artifact_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Artifact = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_Artifact_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->Artifact);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Summoned_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Summoned = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_Summoned_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->Summoned);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SvCold_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->SvCold = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_SvCold_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->SvCold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SvFire_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->SvFire = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_SvFire_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->SvFire);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SvMagic_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->SvMagic = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_SvMagic_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->SvMagic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SvDisease_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->SvDisease = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_SvDisease_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->SvDisease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SvPoison_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->SvPoison = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_SvPoison_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->SvPoison);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SvCorruption_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->SvCorruption = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_SvCorruption_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->SvCorruption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_STR_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->STR = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_STR_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->STR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_STA_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->STA = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_STA_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->STA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_AGI_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->AGI = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_AGI_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->AGI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_DEX_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->DEX = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_DEX_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->DEX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_CHA_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->CHA = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_CHA_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->CHA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_INT_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->INT = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_INT_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->INT);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_WIS_set(void * jarg1, char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->WIS = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_ItemDefinition_WIS_get(void * jarg1) {
  char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char) ((arg1)->WIS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HP_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HP = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HP_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Mana_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Mana = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Mana_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Mana);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_AC_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_AC_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->AC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_RequiredLevel_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RequiredLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_RequiredLevel_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->RequiredLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_RecommendedLevel_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RecommendedLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_RecommendedLevel_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->RecommendedLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_RecommendedSkill_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RecommendedSkill = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_RecommendedSkill_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->RecommendedSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SkillModType_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillModType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SkillModType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SkillModType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SkillModValue_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillModValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SkillModValue_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SkillModValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SkillModMax_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillModMax = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SkillModMax_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SkillModMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SkillModBonus_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillModBonus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SkillModBonus_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SkillModBonus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_BaneDMGRace_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaneDMGRace = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_BaneDMGRace_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->BaneDMGRace);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_BaneDMGBodyType_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaneDMGBodyType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_BaneDMGBodyType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->BaneDMGBodyType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_BaneDMGBodyTypeValue_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaneDMGBodyTypeValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_BaneDMGBodyTypeValue_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->BaneDMGBodyTypeValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_BaneDMGRaceValue_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaneDMGRaceValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_BaneDMGRaceValue_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->BaneDMGRaceValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_InstrumentType_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->InstrumentType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_InstrumentType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->InstrumentType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_InstrumentMod_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->InstrumentMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_InstrumentMod_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->InstrumentMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Classes_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Classes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Classes_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Classes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Races_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Races = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Races_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Races);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Deity_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Deity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Deity_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Deity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_MaterialTintIndex_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MaterialTintIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_MaterialTintIndex_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint32_t) ((arg1)->MaterialTintIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Magic_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Magic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_Magic_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->Magic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Light_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Light = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_Light_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->Light);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Delay_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Delay = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_Delay_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->Delay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_ElementalFlag_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ElementalFlag = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_ElementalFlag_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->ElementalFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_ElementalDamage_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ElementalDamage = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_ElementalDamage_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->ElementalDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Range_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Range = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_Range_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->Range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Damage_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Damage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Damage_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Damage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_BackstabDamage_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BackstabDamage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_BackstabDamage_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->BackstabDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_DamageShieldMitigation_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DamageShieldMitigation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_DamageShieldMitigation_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->DamageShieldMitigation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicSTR_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSTR = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicSTR_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicSTR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicINT_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicINT = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicINT_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicINT);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicWIS_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicWIS = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicWIS_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicWIS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicAGI_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicAGI = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicAGI_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicAGI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicDEX_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicDEX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicDEX_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicDEX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicSTA_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSTA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicSTA_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicSTA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicCHA_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicCHA = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicCHA_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicCHA);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicSvMagic_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSvMagic = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicSvMagic_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicSvMagic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicSvFire_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSvFire = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicSvFire_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicSvFire);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicSvCold_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSvCold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicSvCold_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicSvCold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicSvDisease_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSvDisease = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicSvDisease_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicSvDisease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicSvPoison_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSvPoison = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicSvPoison_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicSvPoison);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HeroicSvCorruption_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSvCorruption = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HeroicSvCorruption_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HeroicSvCorruption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HealAmount_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HealAmount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HealAmount_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HealAmount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SpellDamage_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellDamage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SpellDamage_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SpellDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Prestige_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Prestige = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Prestige_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Prestige);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_ItemClass_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ItemClass = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_ItemClass_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->ItemClass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_ArmorProps_set(void * jarg1, void * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ArmorProperties *arg2 = (ArmorProperties *) 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (ArmorProperties *)jarg2; 
  if (arg1) (arg1)->ArmorProps = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_ArmorProps_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ArmorProperties *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ArmorProperties *)& ((arg1)->ArmorProps);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_AugData_set(void * jarg1, void * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  eqlib::ItemSocketData *arg2 = (eqlib::ItemSocketData *) 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (eqlib::ItemSocketData *)jarg2; 
  if (arg1) (arg1)->AugData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_AugData_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  eqlib::ItemSocketData *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (eqlib::ItemSocketData *)& ((arg1)->AugData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_AugType_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AugType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_AugType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->AugType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_AugSkinTypeMask_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AugSkinTypeMask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_AugSkinTypeMask_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint32_t) ((arg1)->AugSkinTypeMask);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_AugRestrictions_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AugRestrictions = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_AugRestrictions_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->AugRestrictions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SolventItemID_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SolventItemID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SolventItemID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SolventItemID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_LDTheme_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LDTheme = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_LDTheme_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint32_t) ((arg1)->LDTheme);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_LDCost_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LDCost = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_LDCost_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->LDCost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_LDType_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LDType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_LDType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->LDType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Unknown0x0238_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0x0238 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Unknown0x0238_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Unknown0x0238);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Unknown0x023c_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0x023c = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Unknown0x023c_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Unknown0x023c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_FactionModType_set(void * jarg1, void * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->FactionModType;
    for (ii = 0; ii < (size_t)0x4; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_FactionModType_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int *)(int *) ((arg1)->FactionModType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_FactionModValue_set(void * jarg1, void * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->FactionModValue;
    for (ii = 0; ii < (size_t)0x4; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_FactionModValue_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int *)(int *) ((arg1)->FactionModValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_CharmFile_set(void * jarg1, char * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CharmFile, (const char *)arg2, 32-1);
      arg1->CharmFile[32-1] = 0;
    } else {
      arg1->CharmFile[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemDefinition_CharmFile_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char *)(char *) ((arg1)->CharmFile);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_MerchantGreedMod_set(void * jarg1, float jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MerchantGreedMod = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemDefinition_MerchantGreedMod_get(void * jarg1) {
  float jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (float) ((arg1)->MerchantGreedMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SpellData_set(void * jarg1, void * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  eqlib::ItemSpellData *arg2 = (eqlib::ItemSpellData *) 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (eqlib::ItemSpellData *)jarg2; 
  if (arg1) (arg1)->SpellData = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_SpellData_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  eqlib::ItemSpellData *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (eqlib::ItemSpellData *)& ((arg1)->SpellData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_CombatEffects_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CombatEffects = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_CombatEffects_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->CombatEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Shielding_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Shielding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Shielding_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Shielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_StunResist_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StunResist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_StunResist_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->StunResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_DoTShielding_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DoTShielding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_DoTShielding_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->DoTShielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_StrikeThrough_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StrikeThrough = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_StrikeThrough_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->StrikeThrough);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_DmgBonusSkill_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DmgBonusSkill = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_DmgBonusSkill_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->DmgBonusSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_DmgBonusValue_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DmgBonusValue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_DmgBonusValue_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->DmgBonusValue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SpellShield_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellShield = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SpellShield_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SpellShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Avoidance_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Avoidance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Avoidance_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Avoidance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Accuracy_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Accuracy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Accuracy_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Accuracy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_CharmFileID_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CharmFileID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_CharmFileID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->CharmFileID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_FoodDuration_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FoodDuration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_FoodDuration_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->FoodDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_ContainerType_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ContainerType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_ContainerType_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->ContainerType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Slots_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Slots = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_Slots_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->Slots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SizeCapacity_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->SizeCapacity = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_SizeCapacity_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->SizeCapacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_WeightReduction_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->WeightReduction = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_WeightReduction_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->WeightReduction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_BookType_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->BookType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_BookType_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->BookType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_BookLang_set(void * jarg1, signed char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->BookLang = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_ItemDefinition_BookLang_get(void * jarg1) {
  signed char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int8_t) ((arg1)->BookLang);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_BookFile_set(void * jarg1, char * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->BookFile, (const char *)arg2, 30-1);
      arg1->BookFile[30-1] = 0;
    } else {
      arg1->BookFile[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemDefinition_BookFile_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char *)(char *) ((arg1)->BookFile);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Favor_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Favor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Favor_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Favor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_GuildFavor_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GuildFavor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_GuildFavor_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->GuildFavor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bIsFVNoDrop_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsFVNoDrop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bIsFVNoDrop_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bIsFVNoDrop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Endurance_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Endurance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Endurance_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Endurance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Attack_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Attack = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Attack_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Attack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HPRegen_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HPRegen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_HPRegen_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->HPRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_ManaRegen_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ManaRegen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_ManaRegen_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->ManaRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_EnduranceRegen_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnduranceRegen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_EnduranceRegen_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->EnduranceRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Haste_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Haste = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Haste_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Haste);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_DamShield_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DamShield = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_DamShield_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->DamShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_AnimationOverride_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AnimationOverride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_AnimationOverride_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->AnimationOverride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_PaletteTintIndex_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PaletteTintIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_PaletteTintIndex_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->PaletteTintIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bNoPetGive_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoPetGive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bNoPetGive_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bNoPetGive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bSomeProfile_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSomeProfile = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bSomeProfile_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bSomeProfile);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bPotionBeltAllowed_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bPotionBeltAllowed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bPotionBeltAllowed_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bPotionBeltAllowed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_NumPotionSlots_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NumPotionSlots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_NumPotionSlots_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->NumPotionSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SomeIDFlag_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SomeIDFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SomeIDFlag_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SomeIDFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_StackSize_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StackSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_StackSize_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->StackSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bNoStorage_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoStorage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bNoStorage_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bNoStorage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_MaxPower_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxPower = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_MaxPower_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->MaxPower);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Purity_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Purity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Purity_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Purity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bIsEpic_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsEpic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bIsEpic_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bIsEpic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_RightClickScriptID_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RightClickScriptID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_RightClickScriptID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->RightClickScriptID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_ItemLaunchScriptID_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ItemLaunchScriptID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_ItemLaunchScriptID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->ItemLaunchScriptID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_QuestItem_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->QuestItem = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_QuestItem_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->QuestItem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Expendable_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Expendable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_Expendable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->Expendable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Clairvoyance_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Clairvoyance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Clairvoyance_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Clairvoyance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SubClass_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SubClass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_SubClass_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->SubClass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bLoginRegReqItem_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bLoginRegReqItem = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bLoginRegReqItem_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bLoginRegReqItem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_Placeable_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Placeable = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_Placeable_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->Placeable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bPlaceableIgnoreCollisions_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bPlaceableIgnoreCollisions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bPlaceableIgnoreCollisions_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bPlaceableIgnoreCollisions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_PlacementType_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PlacementType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_PlacementType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->PlacementType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_RealEstateDefID_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RealEstateDefID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_RealEstateDefID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->RealEstateDefID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_PlaceableScaleRangeMin_set(void * jarg1, float jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PlaceableScaleRangeMin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemDefinition_PlaceableScaleRangeMin_get(void * jarg1) {
  float jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (float) ((arg1)->PlaceableScaleRangeMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_PlaceableScaleRangeMax_set(void * jarg1, float jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PlaceableScaleRangeMax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemDefinition_PlaceableScaleRangeMax_get(void * jarg1) {
  float jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (float) ((arg1)->PlaceableScaleRangeMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_RealEstateUpkeepID_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RealEstateUpkeepID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_RealEstateUpkeepID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->RealEstateUpkeepID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_MaxPerRealEstate_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxPerRealEstate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_MaxPerRealEstate_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->MaxPerRealEstate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_HousepetFileName_set(void * jarg1, char * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->HousepetFileName, (const char *)arg2, 32-1);
      arg1->HousepetFileName[32-1] = 0;
    } else {
      arg1->HousepetFileName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemDefinition_HousepetFileName_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (char *)(char *) ((arg1)->HousepetFileName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_TrophyBenefitID_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TrophyBenefitID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_TrophyBenefitID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->TrophyBenefitID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bDisablePlacementRotation_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisablePlacementRotation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bDisablePlacementRotation_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bDisablePlacementRotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bDisableFreePlacement_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisableFreePlacement = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bDisableFreePlacement_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bDisableFreePlacement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_NpcRespawnInterval_set(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NpcRespawnInterval = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_NpcRespawnInterval_get(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int) ((arg1)->NpcRespawnInterval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_PlaceableDefScale_set(void * jarg1, float jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PlaceableDefScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemDefinition_PlaceableDefScale_get(void * jarg1) {
  float jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (float) ((arg1)->PlaceableDefScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_PlaceableDefHeading_set(void * jarg1, float jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PlaceableDefHeading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemDefinition_PlaceableDefHeading_get(void * jarg1) {
  float jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (float) ((arg1)->PlaceableDefHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_PlaceableDefPitch_set(void * jarg1, float jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PlaceableDefPitch = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemDefinition_PlaceableDefPitch_get(void * jarg1) {
  float jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (float) ((arg1)->PlaceableDefPitch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_PlaceableDefRoll_set(void * jarg1, float jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PlaceableDefRoll = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ItemDefinition_PlaceableDefRoll_get(void * jarg1) {
  float jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  float result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (float) ((arg1)->PlaceableDefRoll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_bInteractiveObject_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInteractiveObject = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_bInteractiveObject_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool) ((arg1)->bInteractiveObject);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SocketSubClassCount_set(void * jarg1, unsigned char jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->SocketSubClassCount = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_SocketSubClassCount_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t) ((arg1)->SocketSubClassCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_SocketSubClass_set(void * jarg1, void * jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->SocketSubClass;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_SocketSubClass_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int *)(int *) ((arg1)->SocketSubClass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemDefinition() {
  void * jresult ;
  eqlib::ItemDefinition *result = 0 ;
  
  result = (eqlib::ItemDefinition *)new eqlib::ItemDefinition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemDefinition_get_ItemType(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (uint8_t)(arg1)->get_ItemType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_GetMinLuck(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int)((eqlib::ItemDefinition const *)arg1)->GetMinLuck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemDefinition_GetMaxLuck(void * jarg1) {
  int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int)((eqlib::ItemDefinition const *)arg1)->GetMaxLuck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_GetSpellData(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  eqlib::ItemSpellData::SpellData *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (eqlib::ItemSpellData::SpellData *)(arg1)->GetSpellData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Clicky(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Clicky();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Proc(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Proc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Worn(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Worn();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Focus(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Focus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Scroll(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Scroll();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Focus2(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Focus2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Blessing(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Blessing();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Mount(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Mount();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Illusion(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Illusion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Familiar(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Familiar();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_get_Keyring(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  ITEMSPELLS *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (ITEMSPELLS *) &(arg1)->get_Keyring();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_get_SkillMask(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int arg2 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  result = (uint32_t)(arg1)->get_SkillMask(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemDefinition_IsMagic(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool)((eqlib::ItemDefinition const *)arg1)->IsMagic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_getter_NoDrop(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (bool *) &(arg1)->getter_NoDrop();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemDefinition_getter_Diety(void * jarg1) {
  void * jresult ;
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  result = (int *) &(arg1)->getter_Diety();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemDefinition_setter_Diety(void * jarg1, int jarg2) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->setter_Diety((int const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemDefinition(void * jarg1) {
  eqlib::ItemDefinition *arg1 = (eqlib::ItemDefinition *) 0 ;
  
  arg1 = (eqlib::ItemDefinition *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EqItemGuid_GUID_LENGTH_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EqItemGuid::GUID_LENGTH;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EqItemGuid() {
  void * jresult ;
  eqlib::EqItemGuid *result = 0 ;
  
  result = (eqlib::EqItemGuid *)new eqlib::EqItemGuid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqItemGuid_guid_set(void * jarg1, char * jarg2) {
  eqlib::EqItemGuid *arg1 = (eqlib::EqItemGuid *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EqItemGuid *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->guid, (const char *)arg2, eqlib::EqItemGuid::GUID_LENGTH-1);
      arg1->guid[eqlib::EqItemGuid::GUID_LENGTH-1] = 0;
    } else {
      arg1->guid[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EqItemGuid_guid_get(void * jarg1) {
  char * jresult ;
  eqlib::EqItemGuid *arg1 = (eqlib::EqItemGuid *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EqItemGuid *)jarg1; 
  result = (char *)(char *) ((arg1)->guid);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqItemGuid_UnSerialize(void * jarg1, void * jarg2) {
  eqlib::EqItemGuid *arg1 = (eqlib::EqItemGuid *) 0 ;
  eqlib::CUnSerializeBuffer *arg2 = 0 ;
  
  arg1 = (eqlib::EqItemGuid *)jarg1; 
  arg2 = (eqlib::CUnSerializeBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CUnSerializeBuffer & is null", 0);
    return ;
  } 
  (arg1)->UnSerialize(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EqItemGuid(void * jarg1) {
  eqlib::EqItemGuid *arg1 = (eqlib::EqItemGuid *) 0 ;
  
  arg1 = (eqlib::EqItemGuid *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_AugFlag_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AugFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_AugFlag_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->AugFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_SaveString_set(void * jarg1, void * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::CXStr *arg2 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2; 
  if (arg1) (arg1)->SaveString = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_SaveString_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::CXStr *)& ((arg1)->SaveString);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_Open_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Open = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_Open_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->Open);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ItemHash_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ItemHash = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_ItemHash_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (unsigned int) ((arg1)->ItemHash);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_bCopied_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCopied = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_bCopied_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool) ((arg1)->bCopied);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_EvolvingExpPct_set(void * jarg1, double jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  double arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->EvolvingExpPct = arg2;
}


SWIGEXPORT double SWIGSTDCALL CSharp_ItemBase_EvolvingExpPct_get(void * jarg1) {
  double jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  double result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (double) ((arg1)->EvolvingExpPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_Price_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Price = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_Price_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->Price);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_EvolvingMaxLevel_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EvolvingMaxLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_EvolvingMaxLevel_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->EvolvingMaxLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_bItemNeedsUpdate_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bItemNeedsUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_bItemNeedsUpdate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool) ((arg1)->bItemNeedsUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_LastCastTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->LastCastTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_LastCastTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (unsigned int) ((arg1)->LastCastTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_GlobalIndex_set(void * jarg1, void * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemGlobalIndex *arg2 = (eqlib::ItemGlobalIndex *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemGlobalIndex *)jarg2; 
  if (arg1) (arg1)->GlobalIndex = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GlobalIndex_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemGlobalIndex *)& ((arg1)->GlobalIndex);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_Charges_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Charges = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_Charges_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->Charges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_NewArmorID_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->NewArmorID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_NewArmorID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (unsigned int) ((arg1)->NewArmorID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ActorTag1_set(void * jarg1, char * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ActorTag1, (const char *)arg2, 30-1);
      arg1->ActorTag1[30-1] = 0;
    } else {
      arg1->ActorTag1[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemBase_ActorTag1_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (char *)(char *) ((arg1)->ActorTag1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_NoteStatus_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NoteStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_NoteStatus_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->NoteStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ScriptIndex_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_ScriptIndex_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->ScriptIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_bRealEstateItemPlaceable_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRealEstateItemPlaceable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_bRealEstateItemPlaceable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool) ((arg1)->bRealEstateItemPlaceable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_RespawnTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->RespawnTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_RespawnTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (uint32_t) ((arg1)->RespawnTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_RealEstateID_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RealEstateID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_RealEstateID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->RealEstateID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_NoDropFlag_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NoDropFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_NoDropFlag_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->NoDropFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_OrnamentationIcon_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OrnamentationIcon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_OrnamentationIcon_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->OrnamentationIcon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_RealEstateArray_set(void * jarg1, void * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  ArrayClass< uint32_t > *arg2 = (ArrayClass< uint32_t > *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (ArrayClass< uint32_t > *)jarg2; 
  if (arg1) (arg1)->RealEstateArray = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_RealEstateArray_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  ArrayClass< uint32_t > *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (ArrayClass< uint32_t > *)& ((arg1)->RealEstateArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_StackCount_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StackCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_StackCount_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->StackCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_Item1_set(void * jarg1, void * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemDefinition *arg2 = (eqlib::ItemDefinition *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemDefinition *)jarg2; 
  if (arg1) (arg1)->Item1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_Item1_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemDefinition *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemDefinition *) ((arg1)->Item1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_Contents_set(void * jarg1, void * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemContainer *arg2 = (eqlib::ItemContainer *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemContainer *)jarg2; 
  if (arg1) (arg1)->Contents = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_Contents_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemContainer *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemContainer *)& ((arg1)->Contents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ItemGUID_set(void * jarg1, void * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::EqItemGuid *arg2 = (eqlib::EqItemGuid *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::EqItemGuid *)jarg2; 
  if (arg1) (arg1)->ItemGUID = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_ItemGUID_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::EqItemGuid *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::EqItemGuid *)& ((arg1)->ItemGUID);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_GroupID_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GroupID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GroupID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->GroupID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ArmorType_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ArmorType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_ArmorType_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->ArmorType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_LastEquipped_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LastEquipped = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_LastEquipped_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->LastEquipped);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_MerchantSlot_set(void * jarg1, long long jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->MerchantSlot = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_ItemBase_MerchantSlot_get(void * jarg1) {
  long long jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int64_t) ((arg1)->MerchantSlot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_bDisableAugTexture_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisableAugTexture = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_bDisableAugTexture_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool) ((arg1)->bDisableAugTexture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_bRankDisabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRankDisabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_bRankDisabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool) ((arg1)->bRankDisabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_MerchantQuantity_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MerchantQuantity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_MerchantQuantity_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->MerchantQuantity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_EvolvingCurrentLevel_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EvolvingCurrentLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_EvolvingCurrentLevel_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->EvolvingCurrentLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_IsEvolvingItem_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsEvolvingItem = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsEvolvingItem_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool) ((arg1)->IsEvolvingItem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_Power_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Power = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_Power_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->Power);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ActorTag2_set(void * jarg1, char * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ActorTag2, (const char *)arg2, 30-1);
      arg1->ActorTag2[30-1] = 0;
    } else {
      arg1->ActorTag2[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemBase_ActorTag2_get(void * jarg1) {
  char * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (char *)(char *) ((arg1)->ActorTag2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_EvolvingExpOn_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->EvolvingExpOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_EvolvingExpOn_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool) ((arg1)->EvolvingExpOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ItemColor_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ItemColor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_ItemColor_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->ItemColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_Tint_set(void * jarg1, unsigned int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Tint = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_Tint_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (unsigned int) ((arg1)->Tint);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ID_set(void * jarg1, int jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_ID_get(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemBase() {
  void * jresult ;
  eqlib::ItemBase *result = 0 ;
  
  result = (eqlib::ItemBase *)new eqlib::ItemBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemBase(void * jarg1) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetItemDefinition(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemDefinition *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemDefinition *)((eqlib::ItemBase const *)arg1)->GetItemDefinition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_SetItemDefinition(void * jarg1, void * jarg2) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemDefinition *arg2 = (eqlib::ItemDefinition *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemDefinition *)jarg2; 
  (arg1)->SetItemDefinition(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetChildItemContainer__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemContainer *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemContainer *)(arg1)->GetChildItemContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_CreateCopy(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = ((eqlib::ItemBase const *)arg1)->CreateCopy();
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_SetItemLocation(void * jarg1, int jarg2, void * jarg3) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemContainerInstance arg2 ;
  eqlib::ItemIndex *arg3 = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemContainerInstance)jarg2; 
  arg3 = (eqlib::ItemIndex *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return ;
  } 
  (arg1)->SetItemLocation(arg2,(eqlib::ItemIndex const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetID(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemBase_GetType(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (uint8_t)((eqlib::ItemBase const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_ItemBase_GetItemClass(void * jarg1) {
  unsigned char jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (uint8_t)((eqlib::ItemBase const *)arg1)->GetItemClass();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemBase_GetName(void * jarg1) {
  char * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (char *)((eqlib::ItemBase const *)arg1)->GetName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsContainer(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsContainer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetIconID(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetIconID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetMaxItemCount(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetMaxItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetItemCount(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetItemCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsStackable(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsStackable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetHeldItem__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eqlib::ItemBase const *)arg1)->GetHeldItem(arg2);
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetHeldItem__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemIndex *arg2 = 0 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemIndex *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemIndex const & is null", 0);
    return 0;
  } 
  result = ((eqlib::ItemBase const *)arg1)->GetHeldItem((eqlib::ItemIndex const &)*arg2);
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetHeldItems__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemContainer *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemContainer *) &(arg1)->GetHeldItems();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetItemLocation(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemGlobalIndex *) &((eqlib::ItemBase const *)arg1)->GetItemLocation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetContent(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  eqlib::ItemClient *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::ItemClient *)(arg1)->GetContent(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsLore__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsLore(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsLore__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsLore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsLoreEquipped__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsLoreEquipped(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsLoreEquipped__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsLoreEquipped();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetLoreGroup(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetLoreGroup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetMoneyValue(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetMoneyValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetTributeValue(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetTributeValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetGuildTributeValue(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetGuildTributeValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetPointTheme(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetPointTheme();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetPointCost(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetPointCost();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetPointType(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetPointType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetDelay(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetDelay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetDamage(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetDamage();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanWear(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanWear(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsWearable(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsWearable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemBase_CreateItemTagString__SWIG_0(void * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  char * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool arg4 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (char *)(arg1)->CreateItemTagString(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ItemBase_CreateItemTagString__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (char *)(arg1)->CreateItemTagString(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_CreateItemClient(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::CUnSerializeBuffer *arg2 = 0 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::CUnSerializeBuffer *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CUnSerializeBuffer & is null", 0);
    return 0;
  } 
  result = (arg1)->CreateItemClient(*arg2);
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanDrop__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanDrop(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanDrop__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanDrop(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanDrop__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanDrop(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanDrop__SWIG_3(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanDrop(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanDrop__SWIG_4(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanDrop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetImageNum(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetImageNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetItemValue(void * jarg1, unsigned int jarg2) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool arg2 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetItemValue(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanGoInBag__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemPtr *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemPtr const & is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanGoInBag((eqlib::ItemPtr const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanGoInBag__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemPtr *arg2 = 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemPtr const & is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanGoInBag((eqlib::ItemPtr const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_CanGoInBag__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemPtr const & is null", 0);
    return 0;
  } 
  result = (bool)((eqlib::ItemBase const *)arg1)->CanGoInBag((eqlib::ItemPtr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_CanGemFitInSlot__SWIG_0(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemPtr *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemPtr const & is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  result = (int)((eqlib::ItemBase const *)arg1)->CanGemFitInSlot((eqlib::ItemPtr const &)*arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_CanGemFitInSlot__SWIG_1(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemPtr *arg2 = 0 ;
  int arg3 ;
  bool arg4 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemPtr const & is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (int)((eqlib::ItemBase const *)arg1)->CanGemFitInSlot((eqlib::ItemPtr const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_CanGemFitInSlot__SWIG_2(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemPtr *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemPtr const & is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)((eqlib::ItemBase const *)arg1)->CanGemFitInSlot((eqlib::ItemPtr const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_ValueSellMerchant(void * jarg1, float jarg2, int jarg3) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  float arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((eqlib::ItemBase const *)arg1)->ValueSellMerchant(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsSocketValid(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsSocketValid(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetAccuracy(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetAccuracy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetAvoidance(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetAvoidance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetCombatEffects(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetCombatEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetDamageShieldMitigation(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetDamageShieldMitigation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetDamShield(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetDamShield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetDoTShielding(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetDoTShielding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetShielding(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetShielding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetSpellShield(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetSpellShield();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetStrikeThrough(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetStrikeThrough();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetStunResist(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetStunResist();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetHeroicSvMagic(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetHeroicSvMagic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetHeroicSvFire(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetHeroicSvFire();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetHeroicSvCold(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetHeroicSvCold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetHeroicSvDisease(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetHeroicSvDisease();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetHeroicSvPoison(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetHeroicSvPoison();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetHeroicSvCorruption(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetHeroicSvCorruption();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsCollected(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsCollected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemBase_IsConvertible(void * jarg1) {
  unsigned int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (bool)((eqlib::ItemBase const *)arg1)->IsConvertible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetConvertItemID(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetConvertItemID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetConvertItemName(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::CXStr result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = ((eqlib::ItemBase const *)arg1)->GetConvertItemName();
  jresult = new eqlib::CXStr(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetLuck(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetLuck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetMinLuck(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetMinLuck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetMaxLuck(void * jarg1) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetMaxLuck();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetSpellData(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  eqlib::ItemSpellData::SpellData *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (eqlib::ItemSpellData::SpellData *)(arg1)->GetSpellData(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetSpellID(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetSpellID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemBase_GetSpellRecastTime(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  int result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  result = (int)((eqlib::ItemBase const *)arg1)->GetSpellRecastTime(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetEvolvingItemData(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  SwigValueWrapper< eqlib::ItemEvolutionData > result;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = ((eqlib::ItemBase const *)arg1)->GetEvolvingItemData();
  jresult = new eqlib::ItemEvolutionData(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_PopulateItemEvolutionData(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, double jarg6) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  double arg6 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (double)jarg6; 
  (arg1)->PopulateItemEvolutionData(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemBase_ResetItemEvolutionData(void * jarg1) {
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  (arg1)->ResetItemEvolutionData();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_GetGlobalIndex(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemGlobalIndex *) &((eqlib::ItemBase const *)arg1)->GetGlobalIndex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemBase_get_Item2(void * jarg1) {
  void * jresult ;
  eqlib::ItemBase *arg1 = (eqlib::ItemBase *) 0 ;
  eqlib::ItemDefinition *result = 0 ;
  
  arg1 = (eqlib::ItemBase *)jarg1; 
  result = (eqlib::ItemDefinition *)(arg1)->get_Item2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ItemClient_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::ItemClient_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ItemClient() {
  void * jresult ;
  eqlib::ItemClient *result = 0 ;
  
  result = (eqlib::ItemClient *)new eqlib::ItemClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ItemClient(void * jarg1) {
  eqlib::ItemClient *arg1 = (eqlib::ItemClient *) 0 ;
  
  arg1 = (eqlib::ItemClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemClient_GetItemDefinition(void * jarg1) {
  void * jresult ;
  eqlib::ItemClient *arg1 = (eqlib::ItemClient *) 0 ;
  eqlib::ItemDefinition *result = 0 ;
  
  arg1 = (eqlib::ItemClient *)jarg1; 
  result = (eqlib::ItemDefinition *)((eqlib::ItemClient const *)arg1)->GetItemDefinition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemClient_Create() {
  void * jresult ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  result = eqlib::ItemClient::Create();
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemClient_Padding0x140_set(void * jarg1, int jarg2) {
  eqlib::ItemClient *arg1 = (eqlib::ItemClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ItemClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Padding0x140 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ItemClient_Padding0x140_get(void * jarg1) {
  int jresult ;
  eqlib::ItemClient *arg1 = (eqlib::ItemClient *) 0 ;
  int result;
  
  arg1 = (eqlib::ItemClient *)jarg1; 
  result = (int) ((arg1)->Padding0x140);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemClient_SharedItemDef_set(void * jarg1, void * jarg2) {
  eqlib::ItemClient *arg1 = (eqlib::ItemClient *) 0 ;
  eqlib::ItemDefinitionPtr *arg2 = (eqlib::ItemDefinitionPtr *) 0 ;
  
  arg1 = (eqlib::ItemClient *)jarg1; 
  arg2 = (eqlib::ItemDefinitionPtr *)jarg2; 
  if (arg1) (arg1)->SharedItemDef = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemClient_SharedItemDef_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemClient *arg1 = (eqlib::ItemClient *) 0 ;
  eqlib::ItemDefinitionPtr *result = 0 ;
  
  arg1 = (eqlib::ItemClient *)jarg1; 
  result = (eqlib::ItemDefinitionPtr *)& ((arg1)->SharedItemDef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ItemClient_ClientString_set(void * jarg1, void * jarg2) {
  eqlib::ItemClient *arg1 = (eqlib::ItemClient *) 0 ;
  eqlib::CXStr *arg2 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::ItemClient *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2; 
  if (arg1) (arg1)->ClientString = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ItemClient_ClientString_get(void * jarg1) {
  void * jresult ;
  eqlib::ItemClient *arg1 = (eqlib::ItemClient *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::ItemClient *)jarg1; 
  result = (eqlib::CXStr *)& ((arg1)->ClientString);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FindItemByNamePred__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  std::string_view arg1 ;
  bool arg2 ;
  std::string_view *argp1 ;
  eqlib::FindItemByNamePred *result = 0 ;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  arg2 = jarg2 ? true : false; 
  result = (eqlib::FindItemByNamePred *)new eqlib::FindItemByNamePred(SWIG_STD_MOVE(arg1),arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FindItemByNamePred__SWIG_1(void * jarg1) {
  void * jresult ;
  std::string_view arg1 ;
  std::string_view *argp1 ;
  eqlib::FindItemByNamePred *result = 0 ;
  
  argp1 = (std::string_view *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (eqlib::FindItemByNamePred *)new eqlib::FindItemByNamePred(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FindItemByNamePred(void * jarg1) {
  eqlib::FindItemByNamePred *arg1 = (eqlib::FindItemByNamePred *) 0 ;
  
  arg1 = (eqlib::FindItemByNamePred *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FindItemByIdPred(int jarg1) {
  void * jresult ;
  int arg1 ;
  eqlib::FindItemByIdPred *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (eqlib::FindItemByIdPred *)new eqlib::FindItemByIdPred(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FindItemByIdPred(void * jarg1) {
  eqlib::FindItemByIdPred *arg1 = (eqlib::FindItemByIdPred *) 0 ;
  
  arg1 = (eqlib::FindItemByIdPred *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FindItemByGuidPred(void * jarg1) {
  void * jresult ;
  eqlib::EqItemGuid *arg1 = 0 ;
  eqlib::FindItemByGuidPred *result = 0 ;
  
  arg1 = (eqlib::EqItemGuid *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::EqItemGuid const & is null", 0);
    return 0;
  } 
  result = (eqlib::FindItemByGuidPred *)new eqlib::FindItemByGuidPred((eqlib::EqItemGuid const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FindItemByGuidPred(void * jarg1) {
  eqlib::FindItemByGuidPred *arg1 = (eqlib::FindItemByGuidPred *) 0 ;
  
  arg1 = (eqlib::FindItemByGuidPred *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_from_set(void * jarg1, void * jarg2) {
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  eqlib::ItemGlobalIndex *arg2 = (eqlib::ItemGlobalIndex *) 0 ;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  arg2 = (eqlib::ItemGlobalIndex *)jarg2; 
  if (arg1) (arg1)->from = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_from_get(void * jarg1) {
  void * jresult ;
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  result = (eqlib::ItemGlobalIndex *)& ((arg1)->from);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_to_set(void * jarg1, void * jarg2) {
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  eqlib::ItemGlobalIndex *arg2 = (eqlib::ItemGlobalIndex *) 0 ;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  arg2 = (eqlib::ItemGlobalIndex *)jarg2; 
  if (arg1) (arg1)->to = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_to_get(void * jarg1) {
  void * jresult ;
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  result = (eqlib::ItemGlobalIndex *)& ((arg1)->to);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_count_set(void * jarg1, int jarg2) {
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_count_get(void * jarg1) {
  int jresult ;
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  int result;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  result = (int) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_flags_set(void * jarg1, int jarg2) {
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_flags_get(void * jarg1) {
  int jresult ;
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  int result;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  result = (int) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_searchOptions_set(void * jarg1, int jarg2) {
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  eqlib::MultipleItemMoveManager::MoveSearchOptions arg2 ;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  arg2 = (eqlib::MultipleItemMoveManager::MoveSearchOptions)jarg2; 
  if (arg1) (arg1)->searchOptions = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipleItemMoveManager_MoveItem_searchOptions_get(void * jarg1) {
  int jresult ;
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  eqlib::MultipleItemMoveManager::MoveSearchOptions result;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  result = (eqlib::MultipleItemMoveManager::MoveSearchOptions) ((arg1)->searchOptions);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MultipleItemMoveManager_MoveItem() {
  void * jresult ;
  eqlib::MultipleItemMoveManager::MoveItem *result = 0 ;
  
  result = (eqlib::MultipleItemMoveManager::MoveItem *)new eqlib::MultipleItemMoveManager::MoveItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MultipleItemMoveManager_MoveItem(void * jarg1) {
  eqlib::MultipleItemMoveManager::MoveItem *arg1 = (eqlib::MultipleItemMoveManager::MoveItem *) 0 ;
  
  arg1 = (eqlib::MultipleItemMoveManager::MoveItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipleItemMoveManager_ProcessMove__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  int jresult ;
  eqlib::PcZoneClient *arg1 = (eqlib::PcZoneClient *) 0 ;
  eqlib::MultipleItemMoveManager::MoveItemArray *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  eqlib::MultipleItemMoveManager::ErrorCodes result;
  
  arg1 = (eqlib::PcZoneClient *)jarg1; 
  arg2 = (eqlib::MultipleItemMoveManager::MoveItemArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::MultipleItemMoveManager::MoveItemArray const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (eqlib::MultipleItemMoveManager::ErrorCodes)eqlib::MultipleItemMoveManager::ProcessMove(arg1,(ArrayClass2< eqlib::MultipleItemMoveManager::MoveItem > const &)*arg2,arg3,arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipleItemMoveManager_ProcessMove__SWIG_1(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  eqlib::PcZoneClient *arg1 = (eqlib::PcZoneClient *) 0 ;
  eqlib::MultipleItemMoveManager::MoveItemArray *arg2 = 0 ;
  bool arg3 ;
  eqlib::MultipleItemMoveManager::ErrorCodes result;
  
  arg1 = (eqlib::PcZoneClient *)jarg1; 
  arg2 = (eqlib::MultipleItemMoveManager::MoveItemArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::MultipleItemMoveManager::MoveItemArray const & is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (eqlib::MultipleItemMoveManager::ErrorCodes)eqlib::MultipleItemMoveManager::ProcessMove(arg1,(ArrayClass2< eqlib::MultipleItemMoveManager::MoveItem > const &)*arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MultipleItemMoveManager_ProcessMove__SWIG_2(void * jarg1, void * jarg2) {
  int jresult ;
  eqlib::PcZoneClient *arg1 = (eqlib::PcZoneClient *) 0 ;
  eqlib::MultipleItemMoveManager::MoveItemArray *arg2 = 0 ;
  eqlib::MultipleItemMoveManager::ErrorCodes result;
  
  arg1 = (eqlib::PcZoneClient *)jarg1; 
  arg2 = (eqlib::MultipleItemMoveManager::MoveItemArray *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::MultipleItemMoveManager::MoveItemArray const & is null", 0);
    return 0;
  } 
  result = (eqlib::MultipleItemMoveManager::ErrorCodes)eqlib::MultipleItemMoveManager::ProcessMove(arg1,(ArrayClass2< eqlib::MultipleItemMoveManager::MoveItem > const &)*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MultipleItemMoveManager() {
  void * jresult ;
  eqlib::MultipleItemMoveManager *result = 0 ;
  
  result = (eqlib::MultipleItemMoveManager *)new eqlib::MultipleItemMoveManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MultipleItemMoveManager(void * jarg1) {
  eqlib::MultipleItemMoveManager *arg1 = (eqlib::MultipleItemMoveManager *) 0 ;
  
  arg1 = (eqlib::MultipleItemMoveManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsSpellCountersSPA(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)eqlib::IsSpellCountersSPA(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsDamageAbsorbSPA(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)eqlib::IsDamageAbsorbSPA(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SPELL_REAGENTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_SPELL_REAGENTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_EFFECT_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_EFFECT_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellAffectData_Slot_set(void * jarg1, int jarg2) {
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Slot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellAffectData_Slot_get(void * jarg1) {
  int jresult ;
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  result = (int) ((arg1)->Slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellAffectData_Base_set(void * jarg1, long long jarg2) {
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->Base = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SpellAffectData_Base_get(void * jarg1) {
  long long jresult ;
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  result = (int64_t) ((arg1)->Base);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellAffectData_Base2_set(void * jarg1, long long jarg2) {
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->Base2 = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SpellAffectData_Base2_get(void * jarg1) {
  long long jresult ;
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  result = (int64_t) ((arg1)->Base2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellAffectData_Max_set(void * jarg1, long long jarg2) {
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->Max = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_SpellAffectData_Max_get(void * jarg1) {
  long long jresult ;
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  result = (int64_t) ((arg1)->Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellAffectData_Calc_set(void * jarg1, int jarg2) {
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Calc = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellAffectData_Calc_get(void * jarg1) {
  int jresult ;
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  result = (int) ((arg1)->Calc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellAffectData_Attrib_set(void * jarg1, int jarg2) {
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Attrib = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellAffectData_Attrib_get(void * jarg1) {
  int jresult ;
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  result = (int) ((arg1)->Attrib);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellAffectData() {
  void * jresult ;
  eqlib::SpellAffectData *result = 0 ;
  
  result = (eqlib::SpellAffectData *)new eqlib::SpellAffectData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellAffectData(void * jarg1) {
  eqlib::SpellAffectData *arg1 = (eqlib::SpellAffectData *) 0 ;
  
  arg1 = (eqlib::SpellAffectData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::EQ_Spell_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_SpellAffects(void * jarg1, int jarg2) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  unsigned char result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)((eqlib::EQ_Spell const *)arg1)->SpellAffects(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_GetSpellLevelNeeded(void * jarg1, void * jarg2) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  EQClass arg2 ;
  EQClass *argp2 ;
  unsigned char result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  argp2 = (EQClass *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQClass", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (unsigned char)((eqlib::EQ_Spell const *)arg1)->GetSpellLevelNeeded(SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellAffectBase(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::EQ_Spell const *)arg1)->SpellAffectBase(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_GetSpellAffectByIndex(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  eqlib::SpellAffectData *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::SpellAffectData *)((eqlib::EQ_Spell const *)arg1)->GetSpellAffectByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsSPAStacking(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)eqlib::EQ_Spell::IsSPAStacking(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsSPAIgnoredByStacking(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)eqlib::EQ_Spell::IsSPAIgnoredByStacking(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsNoDispell(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsNoDispell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsStackableOnAnyone(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsStackableOnAnyone();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_GetNoOverwrite(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int)((eqlib::EQ_Spell const *)arg1)->GetNoOverwrite();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsShortEffectDuration(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsShortEffectDuration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_GetIsSkillSpell(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->GetIsSkillSpell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsLullSpell(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsLullSpell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsDoTSpell(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsDoTSpell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsStackable(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsStackable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsBeneficialSpell(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsBeneficialSpell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsBeneficialSpellUsedDetrimentally(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsBeneficialSpellUsedDetrimentally();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsDetrimentalSpell(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsDetrimentalSpell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsNoRemove(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->IsNoRemove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Range_set(void * jarg1, float jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Range = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Spell_Range_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (float) ((arg1)->Range);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_AERange_set(void * jarg1, float jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AERange = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Spell_AERange_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (float) ((arg1)->AERange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_PushBack_set(void * jarg1, float jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PushBack = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Spell_PushBack_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (float) ((arg1)->PushBack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_PushUp_set(void * jarg1, float jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->PushUp = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Spell_PushUp_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (float) ((arg1)->PushUp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CastTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->CastTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_CastTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->CastTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_RecoveryTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->RecoveryTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_RecoveryTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->RecoveryTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_RecastTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->RecastTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_RecastTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->RecastTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_DurationType_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DurationType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_DurationType_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->DurationType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_DurationCap_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DurationCap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_DurationCap_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->DurationCap);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_AEDuration_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AEDuration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_AEDuration_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->AEDuration);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ManaCost_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ManaCost = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_ManaCost_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->ManaCost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Base_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Base;
    for (ii = 0; ii < (size_t)eqlib::MAX_EFFECT_SLOTS; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_Base_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *)(int *) ((arg1)->Base);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Base2_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Base2;
    for (ii = 0; ii < (size_t)eqlib::MAX_EFFECT_SLOTS; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_Base2_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *)(int *) ((arg1)->Base2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Max_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Max;
    for (ii = 0; ii < (size_t)eqlib::MAX_EFFECT_SLOTS; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_Max_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *)(int *) ((arg1)->Max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ReagentID_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->ReagentID;
    for (ii = 0; ii < (size_t)eqlib::MAX_SPELL_REAGENTS; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_ReagentID_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *)(int *) ((arg1)->ReagentID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ReagentCount_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->ReagentCount;
    for (ii = 0; ii < (size_t)eqlib::MAX_SPELL_REAGENTS; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_ReagentCount_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *)(int *) ((arg1)->ReagentCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoExpendReagent_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->NoExpendReagent;
    for (ii = 0; ii < (size_t)eqlib::MAX_SPELL_REAGENTS; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_NoExpendReagent_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *)(int *) ((arg1)->NoExpendReagent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Calc_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Calc;
    for (ii = 0; ii < (size_t)eqlib::MAX_EFFECT_SLOTS; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_Calc_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *)(int *) ((arg1)->Calc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Attrib_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Attrib;
    for (ii = 0; ii < (size_t)eqlib::MAX_EFFECT_SLOTS; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_Attrib_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *)(int *) ((arg1)->Attrib);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_BookIcon_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BookIcon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_BookIcon_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->BookIcon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_GemIcon_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GemIcon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_GemIcon_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->GemIcon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_DescriptionIndex_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DescriptionIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_DescriptionIndex_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->DescriptionIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ResistAdj_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistAdj = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_ResistAdj_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->ResistAdj);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Deity_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Deity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_Deity_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->Deity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_spaindex_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->spaindex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_spaindex_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->spaindex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellAnim_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellAnim = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellAnim_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpellAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellIcon_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellIcon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellIcon_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpellIcon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_DurationParticleEffect_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DurationParticleEffect = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_DurationParticleEffect_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->DurationParticleEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NPCUsefulness_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NPCUsefulness = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_NPCUsefulness_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->NPCUsefulness);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ID_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_ID_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Autocast_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Autocast = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_Autocast_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->Autocast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Category_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Category = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_Category_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->Category);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Subcategory_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Subcategory = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_Subcategory_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->Subcategory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Subcategory2_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Subcategory2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_Subcategory2_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->Subcategory2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_HateMod_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HateMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_HateMod_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->HateMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ResistPerLevel_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistPerLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_ResistPerLevel_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->ResistPerLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ResistCap_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistCap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_ResistCap_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->ResistCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_EnduranceCost_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnduranceCost = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_EnduranceCost_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->EnduranceCost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ReuseTimerIndex_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ReuseTimerIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_ReuseTimerIndex_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->ReuseTimerIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_EnduranceUpkeep_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnduranceUpkeep = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_EnduranceUpkeep_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->EnduranceUpkeep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_HateGenerated_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HateGenerated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_HateGenerated_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->HateGenerated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_HitCountType_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HitCountType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_HitCountType_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->HitCountType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_HitCount_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HitCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_HitCount_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->HitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ConeStartAngle_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ConeStartAngle = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_ConeStartAngle_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->ConeStartAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ConeEndAngle_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ConeEndAngle = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_ConeEndAngle_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->ConeEndAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_PvPResistBase_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PvPResistBase = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_PvPResistBase_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->PvPResistBase);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_PvPCalc_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PvPCalc = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_PvPCalc_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->PvPCalc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_PvPResistCap_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PvPResistCap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_PvPResistCap_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->PvPResistCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_PvPDuration_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->PvPDuration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_PvPDuration_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->PvPDuration);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_PvPDurationCap_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->PvPDurationCap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_PvPDurationCap_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->PvPDurationCap);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_GlobalGroup_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GlobalGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_GlobalGroup_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->GlobalGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_PCNPCOnlyFlag_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PCNPCOnlyFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_PCNPCOnlyFlag_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->PCNPCOnlyFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NPCMemCategory_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NPCMemCategory = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_NPCMemCategory_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->NPCMemCategory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellGroup_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellGroup_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpellGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellSubGroup_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellSubGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellSubGroup_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpellSubGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellRank_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellRank = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellRank_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpellRank);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellClass_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellClass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellClass_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpellClass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellSubClass_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellSubClass = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellSubClass_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpellSubClass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellReqAssociationID_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellReqAssociationID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellReqAssociationID_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpellReqAssociationID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CasterRequirementID_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CasterRequirementID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_CasterRequirementID_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->CasterRequirementID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_MaxResist_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxResist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_MaxResist_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->MaxResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_MinResist_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MinResist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_MinResist_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->MinResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_MinSpreadTime_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MinSpreadTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_MinSpreadTime_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->MinSpreadTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_MaxSpreadTime_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxSpreadTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_MaxSpreadTime_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->MaxSpreadTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpreadRadius_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpreadRadius = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpreadRadius_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->SpreadRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_BaseEffectsFocusCap_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseEffectsFocusCap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_BaseEffectsFocusCap_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->BaseEffectsFocusCap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CritChanceOverride_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CritChanceOverride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_CritChanceOverride_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->CritChanceOverride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_MaxTargets_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxTargets = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_MaxTargets_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->MaxTargets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_AIValidTargets_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AIValidTargets = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_AIValidTargets_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t) ((arg1)->AIValidTargets);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_BaseEffectsFocusOffset_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseEffectsFocusOffset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_BaseEffectsFocusOffset_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int) ((arg1)->BaseEffectsFocusOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_BaseEffectsFocusSlope_set(void * jarg1, float jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->BaseEffectsFocusSlope = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Spell_BaseEffectsFocusSlope_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (float) ((arg1)->BaseEffectsFocusSlope);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_DistanceModStart_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  CVector2 arg2 ;
  CVector2 *argp2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  argp2 = (CVector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector2", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DistanceModStart = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_DistanceModStart_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  CVector2 result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result =  ((arg1)->DistanceModStart);
  jresult = new CVector2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_DistanceModEnd_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  CVector2 arg2 ;
  CVector2 *argp2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  argp2 = (CVector2 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null CVector2", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DistanceModEnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_DistanceModEnd_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  CVector2 result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result =  ((arg1)->DistanceModEnd);
  jresult = new CVector2(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_MinRange_set(void * jarg1, float jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinRange = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Spell_MinRange_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (float) ((arg1)->MinRange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoNPCLOS_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoNPCLOS = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoNPCLOS_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoNPCLOS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Feedbackable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Feedbackable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_Feedbackable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->Feedbackable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Reflectable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Reflectable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_Reflectable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->Reflectable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoPartialSave_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoPartialSave = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoPartialSave_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoPartialSave);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoResist_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoResist = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoResist_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_UsesPersistentParticles_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UsesPersistentParticles = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_UsesPersistentParticles_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->UsesPersistentParticles);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SmallTargetsOnly_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SmallTargetsOnly = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_SmallTargetsOnly_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->SmallTargetsOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_DurationWindow_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DurationWindow = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_DurationWindow_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->DurationWindow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Uninterruptable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Uninterruptable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_Uninterruptable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->Uninterruptable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NotStackableDot_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NotStackableDot = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NotStackableDot_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NotStackableDot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Deletable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Deletable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_Deletable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->Deletable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_BypassRegenCheck_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->BypassRegenCheck = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_BypassRegenCheck_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->BypassRegenCheck);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CanCastInCombat_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CanCastInCombat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_CanCastInCombat_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->CanCastInCombat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CanCastOutOfCombat_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CanCastOutOfCombat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_CanCastOutOfCombat_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->CanCastOutOfCombat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoHealDamageItemMod_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoHealDamageItemMod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoHealDamageItemMod_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoHealDamageItemMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_OnlyDuringFastRegen_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->OnlyDuringFastRegen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_OnlyDuringFastRegen_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->OnlyDuringFastRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CastNotStanding_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CastNotStanding = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_CastNotStanding_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->CastNotStanding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CanMGB_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CanMGB = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_CanMGB_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->CanMGB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoDispell_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoDispell = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoDispell_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoDispell);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_AffectInanimate_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->AffectInanimate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_AffectInanimate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->AffectInanimate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_IsSkill_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IsSkill = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_IsSkill_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->IsSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ShowDoTMessage_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ShowDoTMessage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_ShowDoTMessage_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->ShowDoTMessage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ClassLevel_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->ClassLevel;
    for (ii = 0; ii < (size_t)eqlib::MAX_CLASSES+1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_ClassLevel_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->ClassLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_LightType_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LightType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_LightType_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->LightType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellType_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  eqlib::eSpellType arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (eqlib::eSpellType)jarg2; 
  if (arg1) (arg1)->SpellType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellType_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  eqlib::eSpellType result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (eqlib::eSpellType) ((arg1)->SpellType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Activated_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Activated = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_Activated_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->Activated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Resist_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Resist = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_Resist_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->Resist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_TargetType_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->TargetType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_TargetType_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->TargetType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CastDifficulty_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->CastDifficulty = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_CastDifficulty_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->CastDifficulty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Skill_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Skill = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_Skill_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->Skill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ZoneType_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ZoneType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_ZoneType_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->ZoneType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Environment_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Environment = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_Environment_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->Environment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_TimeOfDay_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->TimeOfDay = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_TimeOfDay_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->TimeOfDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CastingAnim_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->CastingAnim = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_CastingAnim_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->CastingAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_AnimVariation_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AnimVariation = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_AnimVariation_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->AnimVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_TargetAnim_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->TargetAnim = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_TargetAnim_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->TargetAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_TravelType_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->TravelType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_TravelType_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->TravelType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CancelOnSit_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->CancelOnSit = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_CancelOnSit_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->CancelOnSit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CountdownHeld_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CountdownHeld = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_CountdownHeld_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->CountdownHeld);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Name_set(void * jarg1, char * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 64-1);
      arg1->Name[64-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQ_Spell_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Target_set(void * jarg1, char * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Target, (const char *)arg2, 32-1);
      arg1->Target[32-1] = 0;
    } else {
      arg1->Target[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQ_Spell_Target_get(void * jarg1) {
  char * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (char *)(char *) ((arg1)->Target);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Extra_set(void * jarg1, char * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Extra, (const char *)arg2, 32-1);
      arg1->Extra[32-1] = 0;
    } else {
      arg1->Extra[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQ_Spell_Extra_get(void * jarg1) {
  char * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (char *)(char *) ((arg1)->Extra);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CastByMe_set(void * jarg1, char * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CastByMe, (const char *)arg2, 96-1);
      arg1->CastByMe[96-1] = 0;
    } else {
      arg1->CastByMe[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQ_Spell_CastByMe_get(void * jarg1) {
  char * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (char *)(char *) ((arg1)->CastByMe);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CastByOther_set(void * jarg1, char * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CastByOther, (const char *)arg2, 96-1);
      arg1->CastByOther[96-1] = 0;
    } else {
      arg1->CastByOther[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQ_Spell_CastByOther_get(void * jarg1) {
  char * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (char *)(char *) ((arg1)->CastByOther);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CastOnYou_set(void * jarg1, char * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CastOnYou, (const char *)arg2, 96-1);
      arg1->CastOnYou[96-1] = 0;
    } else {
      arg1->CastOnYou[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQ_Spell_CastOnYou_get(void * jarg1) {
  char * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (char *)(char *) ((arg1)->CastOnYou);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CastOnAnother_set(void * jarg1, char * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CastOnAnother, (const char *)arg2, 96-1);
      arg1->CastOnAnother[96-1] = 0;
    } else {
      arg1->CastOnAnother[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQ_Spell_CastOnAnother_get(void * jarg1) {
  char * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (char *)(char *) ((arg1)->CastOnAnother);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_WearOff_set(void * jarg1, char * jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->WearOff, (const char *)arg2, 96-1);
      arg1->WearOff[96-1] = 0;
    } else {
      arg1->WearOff[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQ_Spell_WearOff_get(void * jarg1) {
  char * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (char *)(char *) ((arg1)->WearOff);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_ShowWearOffMessage_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ShowWearOffMessage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_ShowWearOffMessage_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->ShowWearOffMessage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NPCChanceofKnowingSpell_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->NPCChanceofKnowingSpell = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_NPCChanceofKnowingSpell_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->NPCChanceofKnowingSpell);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SneakAttack_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SneakAttack = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_SneakAttack_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->SneakAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NotFocusable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NotFocusable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NotFocusable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NotFocusable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoHate_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoHate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoHate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoHate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_StacksWithSelf_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->StacksWithSelf = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_StacksWithSelf_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->StacksWithSelf);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoBuffBlock_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoBuffBlock = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoBuffBlock_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoBuffBlock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_Scribable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Scribable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_Scribable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->Scribable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoStripOnDeath_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoStripOnDeath = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoStripOnDeath_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoStripOnDeath);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoRemove_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NoRemove = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_NoRemove_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool) ((arg1)->NoRemove);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_NoOverwrite_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  eqlib::eSpellNoOverwrite arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (eqlib::eSpellNoOverwrite)jarg2; 
  if (arg1) (arg1)->NoOverwrite = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_NoOverwrite_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  eqlib::eSpellNoOverwrite result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (eqlib::eSpellNoOverwrite) ((arg1)->NoOverwrite);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_CRC32Marker_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->CRC32Marker = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Spell_CRC32Marker_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint8_t) ((arg1)->CRC32Marker);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_SpellRecourseType_set(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  eqlib::eSpellRecourseType arg2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (eqlib::eSpellRecourseType)jarg2; 
  if (arg1) (arg1)->SpellRecourseType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_SpellRecourseType_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  eqlib::eSpellRecourseType result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (eqlib::eSpellRecourseType) ((arg1)->SpellRecourseType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_getter_Diety(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *) &(arg1)->getter_Diety();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_setter_Diety(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->setter_Diety((int const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_getter_EndurUpkeep(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int *) &(arg1)->getter_EndurUpkeep();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_setter_EndurUpkeep(void * jarg1, int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->setter_EndurUpkeep((int const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_getter_PvPDurationValue1(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (uint32_t *) &(arg1)->getter_PvPDurationValue1();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_setter_PvPDurationValue1(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  uint32_t *arg2 = 0 ;
  uint32_t temp2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  temp2 = (uint32_t)jarg2; 
  arg2 = &temp2; 
  (arg1)->setter_PvPDurationValue1((uint32_t const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_getter_NoDisspell(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool *) &(arg1)->getter_NoDisspell();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Spell_setter_NoDisspell(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  temp2 = jarg2 ? true : false; 
  arg2 = &temp2; 
  (arg1)->setter_NoDisspell((bool const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_get_NumEffects(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int)((eqlib::EQ_Spell const *)arg1)->get_NumEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_get_CannotBeScribed(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->get_CannotBeScribed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_get_ActorTagId(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int)((eqlib::EQ_Spell const *)arg1)->get_ActorTagId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Spell_get_DistanceMod(void * jarg1) {
  float jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (float)((eqlib::EQ_Spell const *)arg1)->get_DistanceMod();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Spell_get_StacksWithDiscs(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (bool)((eqlib::EQ_Spell const *)arg1)->get_StacksWithDiscs();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_get_CalcIndex(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int)((eqlib::EQ_Spell const *)arg1)->get_CalcIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQ_Spell(void * jarg1) {
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Spell_get_Data(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  eqlib::EQ_Spell *result = 0 ;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (eqlib::EQ_Spell *) &(arg1)->get_Data();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_GetNumEffects(void * jarg1) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  result = (int)((eqlib::EQ_Spell const *)arg1)->GetNumEffects();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_GetEffectAttrib(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::EQ_Spell const *)arg1)->GetEffectAttrib(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EQ_Spell_GetEffectBase(void * jarg1, int jarg2) {
  long long jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  int64_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)((eqlib::EQ_Spell const *)arg1)->GetEffectBase(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EQ_Spell_GetEffectBase2(void * jarg1, int jarg2) {
  long long jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  int64_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)((eqlib::EQ_Spell const *)arg1)->GetEffectBase2(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EQ_Spell_GetEffectMax(void * jarg1, int jarg2) {
  long long jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  int64_t result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)((eqlib::EQ_Spell const *)arg1)->GetEffectMax(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Spell_GetEffectCalc(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::EQ_Spell *arg1 = (eqlib::EQ_Spell *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::EQ_Spell *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((eqlib::EQ_Spell const *)arg1)->GetEffectCalc(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellEffectEmitter_DefIndex_set(void * jarg1, int jarg2) {
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DefIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellEffectEmitter_DefIndex_get(void * jarg1) {
  int jresult ;
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  result = (int) ((arg1)->DefIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellEffectEmitter_RequiredLevel_set(void * jarg1, int jarg2) {
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RequiredLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellEffectEmitter_RequiredLevel_get(void * jarg1) {
  int jresult ;
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  result = (int) ((arg1)->RequiredLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellEffectEmitter_EffectActor_set(void * jarg1, int jarg2) {
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  eqlib::EEffectActor arg2 ;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  arg2 = (eqlib::EEffectActor)jarg2; 
  if (arg1) (arg1)->EffectActor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellEffectEmitter_EffectActor_get(void * jarg1) {
  int jresult ;
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  eqlib::EEffectActor result;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  result = (eqlib::EEffectActor) ((arg1)->EffectActor);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellEffectEmitter_AttachPoint_set(void * jarg1, int jarg2) {
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  eqlib::EAttachPoint arg2 ;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  arg2 = (eqlib::EAttachPoint)jarg2; 
  if (arg1) (arg1)->AttachPoint = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellEffectEmitter_AttachPoint_get(void * jarg1) {
  int jresult ;
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  eqlib::EAttachPoint result;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  result = (eqlib::EAttachPoint) ((arg1)->AttachPoint);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellEffectEmitter() {
  void * jresult ;
  eqlib::SpellEffectEmitter *result = 0 ;
  
  result = (eqlib::SpellEffectEmitter *)new eqlib::SpellEffectEmitter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellEffectEmitter(void * jarg1) {
  eqlib::SpellEffectEmitter *arg1 = (eqlib::SpellEffectEmitter *) 0 ;
  
  arg1 = (eqlib::SpellEffectEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellEffectStage_SoundNum_set(void * jarg1, int jarg2) {
  eqlib::SpellEffectStage *arg1 = (eqlib::SpellEffectStage *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellEffectStage *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SoundNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellEffectStage_SoundNum_get(void * jarg1) {
  int jresult ;
  eqlib::SpellEffectStage *arg1 = (eqlib::SpellEffectStage *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellEffectStage *)jarg1; 
  result = (int) ((arg1)->SoundNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellEffectStage_Emitters_set(void * jarg1, void * jarg2) {
  eqlib::SpellEffectStage *arg1 = (eqlib::SpellEffectStage *) 0 ;
  eqlib::SpellEffectEmitter *arg2 = (eqlib::SpellEffectEmitter *) (eqlib::SpellEffectEmitter *)0 ;
  
  arg1 = (eqlib::SpellEffectStage *)jarg1; 
  arg2 = (eqlib::SpellEffectEmitter *)jarg2; 
  {
    size_t ii;
    eqlib::SpellEffectEmitter *b = (eqlib::SpellEffectEmitter *) arg1->Emitters;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((eqlib::SpellEffectEmitter *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellEffectStage_Emitters_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellEffectStage *arg1 = (eqlib::SpellEffectStage *) 0 ;
  eqlib::SpellEffectEmitter *result = 0 ;
  
  arg1 = (eqlib::SpellEffectStage *)jarg1; 
  result = (eqlib::SpellEffectEmitter *)(eqlib::SpellEffectEmitter *) ((arg1)->Emitters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellEffectStage() {
  void * jresult ;
  eqlib::SpellEffectStage *result = 0 ;
  
  result = (eqlib::SpellEffectStage *)new eqlib::SpellEffectStage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellEffectStage(void * jarg1) {
  eqlib::SpellEffectStage *arg1 = (eqlib::SpellEffectStage *) 0 ;
  
  arg1 = (eqlib::SpellEffectStage *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewSpellEffect_szSpellEffectName_set(void * jarg1, char * jarg2) {
  eqlib::NewSpellEffect *arg1 = (eqlib::NewSpellEffect *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::NewSpellEffect *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->szSpellEffectName, (const char *)arg2, 0x40-1);
      arg1->szSpellEffectName[0x40-1] = 0;
    } else {
      arg1->szSpellEffectName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_NewSpellEffect_szSpellEffectName_get(void * jarg1) {
  char * jresult ;
  eqlib::NewSpellEffect *arg1 = (eqlib::NewSpellEffect *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::NewSpellEffect *)jarg1; 
  result = (char *)(char *) ((arg1)->szSpellEffectName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_NewSpellEffect_Stages_set(void * jarg1, void * jarg2) {
  eqlib::NewSpellEffect *arg1 = (eqlib::NewSpellEffect *) 0 ;
  eqlib::SpellEffectStage *arg2 = (eqlib::SpellEffectStage *) (eqlib::SpellEffectStage *)0 ;
  
  arg1 = (eqlib::NewSpellEffect *)jarg1; 
  arg2 = (eqlib::SpellEffectStage *)jarg2; 
  {
    size_t ii;
    eqlib::SpellEffectStage *b = (eqlib::SpellEffectStage *) arg1->Stages;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((eqlib::SpellEffectStage *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NewSpellEffect_Stages_get(void * jarg1) {
  void * jresult ;
  eqlib::NewSpellEffect *arg1 = (eqlib::NewSpellEffect *) 0 ;
  eqlib::SpellEffectStage *result = 0 ;
  
  arg1 = (eqlib::NewSpellEffect *)jarg1; 
  result = (eqlib::SpellEffectStage *)(eqlib::SpellEffectStage *) ((arg1)->Stages);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_NewSpellEffect() {
  void * jresult ;
  eqlib::NewSpellEffect *result = 0 ;
  
  result = (eqlib::NewSpellEffect *)new eqlib::NewSpellEffect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_NewSpellEffect(void * jarg1) {
  eqlib::NewSpellEffect *arg1 = (eqlib::NewSpellEffect *) 0 ;
  
  arg1 = (eqlib::NewSpellEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_BlitSprite_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  char (*arg2)[0x20] = (char (*)[0x20]) (char (*)[0x20])0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (char (*)[0x20])jarg2; 
  {
    char (*inp)[0x20] = (char (*)[0x20])(arg2);
    char (*dest)[0x20] = (char (*)[0x20])(arg1->BlitSprite);
    size_t ii = 0;
    for (; ii < 3; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 0x20; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_BlitSprite_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  char (*result)[0x20] = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (char (*)[0x20])(char (*)[0x20]) ((arg1)->BlitSprite);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_AttachTag_set(void * jarg1, char * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AttachTag, (const char *)arg2, 0x20-1);
      arg1->AttachTag[0x20-1] = 0;
    } else {
      arg1->AttachTag[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StageType_AttachTag_get(void * jarg1) {
  char * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (char *)(char *) ((arg1)->AttachTag);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_DAGnum_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->DAGnum;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_DAGnum_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (int *)(int *) ((arg1)->DAGnum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_pcloud_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->pcloud;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_pcloud_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (int *)(int *) ((arg1)->pcloud);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_SpriteTAG_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  char (*arg2)[0x20] = (char (*)[0x20]) (char (*)[0x20])0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (char (*)[0x20])jarg2; 
  {
    char (*inp)[0x20] = (char (*)[0x20])(arg2);
    char (*dest)[0x20] = (char (*)[0x20])(arg1->SpriteTAG);
    size_t ii = 0;
    for (; ii < 0xc; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 0x20; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_SpriteTAG_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  char (*result)[0x20] = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (char (*)[0x20])(char (*)[0x20]) ((arg1)->SpriteTAG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_SpritEffect_set(void * jarg1, int jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpritEffect = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StageType_SpritEffect_get(void * jarg1) {
  int jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  int result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (int) ((arg1)->SpritEffect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_SoundNum_set(void * jarg1, int jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SoundNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StageType_SoundNum_get(void * jarg1) {
  int jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  int result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (int) ((arg1)->SoundNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Tint_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  ARGBCOLOR *arg2 = (ARGBCOLOR *) (ARGBCOLOR *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (ARGBCOLOR *)jarg2; 
  {
    size_t ii;
    ARGBCOLOR *b = (ARGBCOLOR *) arg1->Tint;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((ARGBCOLOR *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Tint_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  ARGBCOLOR *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (ARGBCOLOR *)(ARGBCOLOR *) ((arg1)->Tint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Gravity_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->Gravity;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Gravity_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float *)(float *) ((arg1)->Gravity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalX1_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalX1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalX1_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalX1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalY1_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalY1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalY1_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalY1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalZ1_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalZ1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalZ1_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalZ1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalX2_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalX2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalX2_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalX2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalY2_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalY2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalY2_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalY2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalZ2_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalZ2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalZ2_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalZ2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalX3_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalX3 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalX3_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalX3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalY3_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalY3 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalY3_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalY3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_NormalZ3_set(void * jarg1, float jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NormalZ3 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_StageType_NormalZ3_get(void * jarg1) {
  float jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float result;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float) ((arg1)->NormalZ3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Radius_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->Radius;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Radius_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float *)(float *) ((arg1)->Radius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Angle_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->Angle;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Angle_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float *)(float *) ((arg1)->Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Lifespan_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  ULONG *arg2 = (ULONG *) (ULONG *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (ULONG *)jarg2; 
  {
    size_t ii;
    ULONG *b = (ULONG *) arg1->Lifespan;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((ULONG *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Lifespan_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  ULONG *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (ULONG *)(ULONG *) ((arg1)->Lifespan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Velocity_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->Velocity;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Velocity_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float *)(float *) ((arg1)->Velocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Rate_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  ULONG *arg2 = (ULONG *) (ULONG *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (ULONG *)jarg2; 
  {
    size_t ii;
    ULONG *b = (ULONG *) arg1->Rate;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((ULONG *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Rate_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  ULONG *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (ULONG *)(ULONG *) ((arg1)->Rate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Scale_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->Scale;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Scale_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float *)(float *) ((arg1)->Scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_SpriteRGB_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  EQRGB *arg2 = (EQRGB *) (EQRGB *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (EQRGB *)jarg2; 
  {
    size_t ii;
    EQRGB *b = (EQRGB *) arg1->SpriteRGB;
    for (ii = 0; ii < (size_t)0xc; ii++) b[ii] = *((EQRGB *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_SpriteRGB_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  EQRGB *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (EQRGB *)(EQRGB *) ((arg1)->SpriteRGB);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_RollRate_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->RollRate;
    for (ii = 0; ii < (size_t)0xc; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_RollRate_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float *)(float *) ((arg1)->RollRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_HdgOffset_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  short *arg2 = (short *) (short *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (short *)jarg2; 
  {
    size_t ii;
    short *b = (short *) arg1->HdgOffset;
    for (ii = 0; ii < (size_t)0xc; ii++) b[ii] = *((short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_HdgOffset_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  short *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (short *)(short *) ((arg1)->HdgOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_PitchOffset_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  short *arg2 = (short *) (short *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (short *)jarg2; 
  {
    size_t ii;
    short *b = (short *) arg1->PitchOffset;
    for (ii = 0; ii < (size_t)0xc; ii++) b[ii] = *((short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_PitchOffset_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  short *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (short *)(short *) ((arg1)->PitchOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_Distance_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->Distance;
    for (ii = 0; ii < (size_t)0xc; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_Distance_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float *)(float *) ((arg1)->Distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_EffectType_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  short *arg2 = (short *) (short *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (short *)jarg2; 
  {
    size_t ii;
    short *b = (short *) arg1->EffectType;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((short *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_EffectType_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  short *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (short *)(short *) ((arg1)->EffectType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StageType_ScaleFactor_set(void * jarg1, void * jarg2) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->ScaleFactor;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StageType_ScaleFactor_get(void * jarg1) {
  void * jresult ;
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  result = (float *)(float *) ((arg1)->ScaleFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StageType() {
  void * jresult ;
  eqlib::StageType *result = 0 ;
  
  result = (eqlib::StageType *)new eqlib::StageType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StageType(void * jarg1) {
  eqlib::StageType *arg1 = (eqlib::StageType *) 0 ;
  
  arg1 = (eqlib::StageType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OldSpellEffect_Tgts_set(void * jarg1, int jarg2) {
  eqlib::OldSpellEffect *arg1 = (eqlib::OldSpellEffect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::OldSpellEffect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Tgts = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OldSpellEffect_Tgts_get(void * jarg1) {
  int jresult ;
  eqlib::OldSpellEffect *arg1 = (eqlib::OldSpellEffect *) 0 ;
  int result;
  
  arg1 = (eqlib::OldSpellEffect *)jarg1; 
  result = (int) ((arg1)->Tgts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OldSpellEffect_Perm_set(void * jarg1, int jarg2) {
  eqlib::OldSpellEffect *arg1 = (eqlib::OldSpellEffect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::OldSpellEffect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Perm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OldSpellEffect_Perm_get(void * jarg1) {
  int jresult ;
  eqlib::OldSpellEffect *arg1 = (eqlib::OldSpellEffect *) 0 ;
  int result;
  
  arg1 = (eqlib::OldSpellEffect *)jarg1; 
  result = (int) ((arg1)->Perm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OldSpellEffect_stages_set(void * jarg1, void * jarg2) {
  eqlib::OldSpellEffect *arg1 = (eqlib::OldSpellEffect *) 0 ;
  eqlib::StageType *arg2 = (eqlib::StageType *) (eqlib::StageType *)0 ;
  
  arg1 = (eqlib::OldSpellEffect *)jarg1; 
  arg2 = (eqlib::StageType *)jarg2; 
  {
    size_t ii;
    eqlib::StageType *b = (eqlib::StageType *) arg1->stages;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((eqlib::StageType *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OldSpellEffect_stages_get(void * jarg1) {
  void * jresult ;
  eqlib::OldSpellEffect *arg1 = (eqlib::OldSpellEffect *) 0 ;
  eqlib::StageType *result = 0 ;
  
  arg1 = (eqlib::OldSpellEffect *)jarg1; 
  result = (eqlib::StageType *)(eqlib::StageType *) ((arg1)->stages);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OldSpellEffect() {
  void * jresult ;
  eqlib::OldSpellEffect *result = 0 ;
  
  result = (eqlib::OldSpellEffect *)new eqlib::OldSpellEffect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OldSpellEffect(void * jarg1) {
  eqlib::OldSpellEffect *arg1 = (eqlib::OldSpellEffect *) 0 ;
  
  arg1 = (eqlib::OldSpellEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSpellExtra_OldSpellEff_set(void * jarg1, void * jarg2) {
  eqlib::EQSpellExtra *arg1 = (eqlib::EQSpellExtra *) 0 ;
  eqlib::OldSpellEffect *arg2 = (eqlib::OldSpellEffect *) 0 ;
  
  arg1 = (eqlib::EQSpellExtra *)jarg1; 
  arg2 = (eqlib::OldSpellEffect *)jarg2; 
  if (arg1) (arg1)->OldSpellEff = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSpellExtra_OldSpellEff_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSpellExtra *arg1 = (eqlib::EQSpellExtra *) 0 ;
  eqlib::OldSpellEffect *result = 0 ;
  
  arg1 = (eqlib::EQSpellExtra *)jarg1; 
  result = (eqlib::OldSpellEffect *) ((arg1)->OldSpellEff);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSpellExtra_NewSpellEff_set(void * jarg1, void * jarg2) {
  eqlib::EQSpellExtra *arg1 = (eqlib::EQSpellExtra *) 0 ;
  eqlib::NewSpellEffect *arg2 = (eqlib::NewSpellEffect *) 0 ;
  
  arg1 = (eqlib::EQSpellExtra *)jarg1; 
  arg2 = (eqlib::NewSpellEffect *)jarg2; 
  if (arg1) (arg1)->NewSpellEff = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSpellExtra_NewSpellEff_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSpellExtra *arg1 = (eqlib::EQSpellExtra *) 0 ;
  eqlib::NewSpellEffect *result = 0 ;
  
  arg1 = (eqlib::EQSpellExtra *)jarg1; 
  result = (eqlib::NewSpellEffect *) ((arg1)->NewSpellEff);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQSpellExtra() {
  void * jresult ;
  eqlib::EQSpellExtra *result = 0 ;
  
  result = (eqlib::EQSpellExtra *)new eqlib::EQSpellExtra();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQSpellExtra(void * jarg1) {
  eqlib::EQSpellExtra *arg1 = (eqlib::EQSpellExtra *) 0 ;
  
  arg1 = (eqlib::EQSpellExtra *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StackingGroupData_StackingGroupID_set(void * jarg1, int jarg2) {
  eqlib::StackingGroupData *arg1 = (eqlib::StackingGroupData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::StackingGroupData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StackingGroupID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StackingGroupData_StackingGroupID_get(void * jarg1) {
  int jresult ;
  eqlib::StackingGroupData *arg1 = (eqlib::StackingGroupData *) 0 ;
  int result;
  
  arg1 = (eqlib::StackingGroupData *)jarg1; 
  result = (int) ((arg1)->StackingGroupID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StackingGroupData_StackingGroupRank_set(void * jarg1, int jarg2) {
  eqlib::StackingGroupData *arg1 = (eqlib::StackingGroupData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::StackingGroupData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StackingGroupRank = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StackingGroupData_StackingGroupRank_get(void * jarg1) {
  int jresult ;
  eqlib::StackingGroupData *arg1 = (eqlib::StackingGroupData *) 0 ;
  int result;
  
  arg1 = (eqlib::StackingGroupData *)jarg1; 
  result = (int) ((arg1)->StackingGroupRank);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StackingGroupData_StackingGroupRuleType_set(void * jarg1, int jarg2) {
  eqlib::StackingGroupData *arg1 = (eqlib::StackingGroupData *) 0 ;
  eqlib::ESpellStackingRules arg2 ;
  
  arg1 = (eqlib::StackingGroupData *)jarg1; 
  arg2 = (eqlib::ESpellStackingRules)jarg2; 
  if (arg1) (arg1)->StackingGroupRuleType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StackingGroupData_StackingGroupRuleType_get(void * jarg1) {
  int jresult ;
  eqlib::StackingGroupData *arg1 = (eqlib::StackingGroupData *) 0 ;
  eqlib::ESpellStackingRules result;
  
  arg1 = (eqlib::StackingGroupData *)jarg1; 
  result = (eqlib::ESpellStackingRules) ((arg1)->StackingGroupRuleType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StackingGroupData() {
  void * jresult ;
  eqlib::StackingGroupData *result = 0 ;
  
  result = (eqlib::StackingGroupData *)new eqlib::StackingGroupData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StackingGroupData(void * jarg1) {
  eqlib::StackingGroupData *arg1 = (eqlib::StackingGroupData *) 0 ;
  
  arg1 = (eqlib::StackingGroupData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOTAL_SPELL_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::TOTAL_SPELL_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TOTAL_SPELL_AFFECT_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::TOTAL_SPELL_AFFECT_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellManager_SpellsCrc32_set(void * jarg1, void * jarg2) {
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->SpellsCrc32;
    for (ii = 0; ii < (size_t)eqlib::TOTAL_SPELL_COUNT; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellManager_SpellsCrc32_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  result = (int *)(int *) ((arg1)->SpellsCrc32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellManager_MissingSpell_set(void * jarg1, void * jarg2) {
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  eqlib::EQ_Spell *arg2 = (eqlib::EQ_Spell *) 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (eqlib::EQ_Spell *)jarg2; 
  if (arg1) (arg1)->MissingSpell = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellManager_MissingSpell_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  eqlib::EQ_Spell *result = 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  result = (eqlib::EQ_Spell *) ((arg1)->MissingSpell);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellManager_MissingSpellCrc32_set(void * jarg1, int jarg2) {
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MissingSpellCrc32 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellManager_MissingSpellCrc32_get(void * jarg1) {
  int jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  result = (int) ((arg1)->MissingSpellCrc32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellManager_SpellFileCRC_set(void * jarg1, int jarg2) {
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellFileCRC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellManager_SpellFileCRC_get(void * jarg1) {
  int jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  result = (int) ((arg1)->SpellFileCRC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellManager_SpellAssocFileCRC_set(void * jarg1, int jarg2) {
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellAssocFileCRC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellManager_SpellAssocFileCRC_get(void * jarg1) {
  int jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  result = (int) ((arg1)->SpellAssocFileCRC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellManager_SpellGroups_set(void * jarg1, void * jarg2) {
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  HashTable< int,int > *arg2 = (HashTable< int,int > *) 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (HashTable< int,int > *)jarg2; 
  if (arg1) (arg1)->SpellGroups = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellManager_SpellGroups_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  HashTable< int,int > *result = 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  result = (HashTable< int,int > *)& ((arg1)->SpellGroups);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellManager(void * jarg1) {
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellManager_GetSpellByGroupAndRank__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, unsigned int jarg5) {
  void * jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  bool arg5 ;
  eqlib::EQ_Spell *result = 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (eqlib::EQ_Spell *)(arg1)->GetSpellByGroupAndRank(arg2,arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellManager_GetSpellByGroupAndRank__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  eqlib::EQ_Spell *result = 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (eqlib::EQ_Spell *)(arg1)->GetSpellByGroupAndRank(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellManager_GetSpellByGroupAndRank__SWIG_2(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  eqlib::SpellManager *arg1 = (eqlib::SpellManager *) 0 ;
  int arg2 ;
  int arg3 ;
  eqlib::EQ_Spell *result = 0 ;
  
  arg1 = (eqlib::SpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (eqlib::EQ_Spell *)(arg1)->GetSpellByGroupAndRank(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientSpellManager_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::ClientSpellManager_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ClientSpellManager(void * jarg1) {
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientSpellManager_LoadSpells(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (bool)(arg1)->LoadSpells((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientSpellManager_DoesMeetRequirement(void * jarg1, void * jarg2, int jarg3) {
  unsigned int jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  eqlib::PlayerZoneClient *arg2 = (eqlib::PlayerZoneClient *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (eqlib::PlayerZoneClient *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->DoesMeetRequirement(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientSpellManager_GetSpellByID(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  int arg2 ;
  eqlib::EQ_Spell *result = 0 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::EQ_Spell *)(arg1)->GetSpellByID(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientSpellManager_LoadSpellStackingData(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->LoadSpellStackingData((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientSpellManager_PrintFailedRequirementString(void * jarg1, int jarg2, int jarg3) {
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->PrintFailedRequirementString(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientSpellManager_GetSpellStackingGroupID(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSpellStackingGroupID(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientSpellManager_GetSpellStackingGroupRank(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetSpellStackingGroupRank(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientSpellManager_GetSpellStackingGroupRule(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  int arg2 ;
  eqlib::ESpellStackingRules result;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::ESpellStackingRules)(arg1)->GetSpellStackingGroupRule(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientSpellManager_GetSpellAffect(void * jarg1, void * jarg2, int jarg3) {
  void * jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  eqlib::EQ_Spell *arg2 = (eqlib::EQ_Spell *) 0 ;
  int arg3 ;
  eqlib::SpellAffectData *result = 0 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (eqlib::EQ_Spell *)jarg2; 
  arg3 = (int)jarg3; 
  result = (eqlib::SpellAffectData *)(arg1)->GetSpellAffect((eqlib::EQ_Spell const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientSpellManager_GetSpellAffectEmpty(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  bool arg2 ;
  eqlib::SpellAffectData *result = 0 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (eqlib::SpellAffectData *)(arg1)->GetSpellAffectEmpty(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClientSpellManager_GetSpellAttrib(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  eqlib::EQ_Spell *arg2 = (eqlib::EQ_Spell *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (eqlib::EQ_Spell *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((eqlib::ClientSpellManager const *)arg1)->GetSpellAttrib(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ClientSpellManager_AllSpellsLoaded(void * jarg1) {
  unsigned int jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  bool result;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  result = (bool)((eqlib::ClientSpellManager const *)arg1)->AllSpellsLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientSpellManager_Spells_set(void * jarg1, void * jarg2) {
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  eqlib::EQ_Spell **arg2 = (eqlib::EQ_Spell **) (eqlib::EQ_Spell **)0 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (eqlib::EQ_Spell **)jarg2; 
  {
    size_t ii;
    eqlib::EQ_Spell * *b = (eqlib::EQ_Spell * *) arg1->Spells;
    for (ii = 0; ii < (size_t)eqlib::TOTAL_SPELL_COUNT; ii++) b[ii] = *((eqlib::EQ_Spell * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientSpellManager_Spells_get(void * jarg1) {
  void * jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  eqlib::EQ_Spell **result = 0 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  result = (eqlib::EQ_Spell **)(eqlib::EQ_Spell **) ((arg1)->Spells);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ClientSpellManager_SpellExtraData_set(void * jarg1, void * jarg2) {
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  eqlib::EQSpellExtra *arg2 = (eqlib::EQSpellExtra *) (eqlib::EQSpellExtra *)0 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  arg2 = (eqlib::EQSpellExtra *)jarg2; 
  {
    size_t ii;
    eqlib::EQSpellExtra *b = (eqlib::EQSpellExtra *) arg1->SpellExtraData;
    for (ii = 0; ii < (size_t)eqlib::TOTAL_SPELL_COUNT; ii++) b[ii] = *((eqlib::EQSpellExtra *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClientSpellManager_SpellExtraData_get(void * jarg1) {
  void * jresult ;
  eqlib::ClientSpellManager *arg1 = (eqlib::ClientSpellManager *) 0 ;
  eqlib::EQSpellExtra *result = 0 ;
  
  arg1 = (eqlib::ClientSpellManager *)jarg1; 
  result = (eqlib::EQSpellExtra *)(eqlib::EQSpellExtra *) ((arg1)->SpellExtraData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_vfTable_set(void * jarg1, void * jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->vfTable = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_vfTable_get(void * jarg1) {
  void * jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (void *) ((arg1)->vfTable);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_ID_set(void * jarg1, int jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_ID_get(void * jarg1) {
  int jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_AbilityID_set(void * jarg1, int jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AbilityID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_AbilityID_get(void * jarg1) {
  int jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (int) ((arg1)->AbilityID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_FromID_set(void * jarg1, int jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FromID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_FromID_get(void * jarg1) {
  int jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (int) ((arg1)->FromID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_Base_set(void * jarg1, int jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Base = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_Base_get(void * jarg1) {
  int jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (int) ((arg1)->Base);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_Base2_set(void * jarg1, int jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Base2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_Base2_get(void * jarg1) {
  int jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (int) ((arg1)->Base2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_LevelMod_set(void * jarg1, int jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LevelMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_LevelMod_get(void * jarg1) {
  int jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (int) ((arg1)->LevelMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_Cap_set(void * jarg1, int jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Cap = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_Cap_get(void * jarg1) {
  int jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (int) ((arg1)->Cap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_Slot_set(void * jarg1, int jarg2) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Slot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MercenaryAbilityEffectsDefinition_Slot_get(void * jarg1) {
  int jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  int result;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  result = (int) ((arg1)->Slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MercenaryAbilityEffectsDefinition() {
  void * jresult ;
  eqlib::MercenaryAbilityEffectsDefinition *result = 0 ;
  
  result = (eqlib::MercenaryAbilityEffectsDefinition *)new eqlib::MercenaryAbilityEffectsDefinition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MercenaryAbilityEffectsDefinition(void * jarg1) {
  eqlib::MercenaryAbilityEffectsDefinition *arg1 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  
  arg1 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FocusEffectData_Type_set(void * jarg1, int jarg2) {
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FocusEffectData_Type_get(void * jarg1) {
  int jresult ;
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  int result;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  result = (int) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FocusEffectData_Base_set(void * jarg1, int jarg2) {
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Base = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FocusEffectData_Base_get(void * jarg1) {
  int jresult ;
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  int result;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  result = (int) ((arg1)->Base);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FocusEffectData_Base2_set(void * jarg1, int jarg2) {
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Base2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FocusEffectData_Base2_get(void * jarg1) {
  int jresult ;
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  int result;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  result = (int) ((arg1)->Base2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FocusEffectData_Slot_set(void * jarg1, int jarg2) {
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Slot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FocusEffectData_Slot_get(void * jarg1) {
  int jresult ;
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  int result;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  result = (int) ((arg1)->Slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FocusEffectData() {
  void * jresult ;
  eqlib::FocusEffectData *result = 0 ;
  
  result = (eqlib::FocusEffectData *)new eqlib::FocusEffectData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FocusEffectData(void * jarg1) {
  eqlib::FocusEffectData *arg1 = (eqlib::FocusEffectData *) 0 ;
  
  arg1 = (eqlib::FocusEffectData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedFocusAbility_pEffectData_set(void * jarg1, void * jarg2) {
  eqlib::CachedFocusAbility *arg1 = (eqlib::CachedFocusAbility *) 0 ;
  eqlib::FocusEffectData *arg2 = (eqlib::FocusEffectData *) 0 ;
  
  arg1 = (eqlib::CachedFocusAbility *)jarg1; 
  arg2 = (eqlib::FocusEffectData *)jarg2; 
  if (arg1) (arg1)->pEffectData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CachedFocusAbility_pEffectData_get(void * jarg1) {
  void * jresult ;
  eqlib::CachedFocusAbility *arg1 = (eqlib::CachedFocusAbility *) 0 ;
  eqlib::FocusEffectData *result = 0 ;
  
  arg1 = (eqlib::CachedFocusAbility *)jarg1; 
  result = (eqlib::FocusEffectData *) ((arg1)->pEffectData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CachedFocusAbility_Percent_set(void * jarg1, int jarg2) {
  eqlib::CachedFocusAbility *arg1 = (eqlib::CachedFocusAbility *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CachedFocusAbility *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CachedFocusAbility_Percent_get(void * jarg1) {
  int jresult ;
  eqlib::CachedFocusAbility *arg1 = (eqlib::CachedFocusAbility *) 0 ;
  int result;
  
  arg1 = (eqlib::CachedFocusAbility *)jarg1; 
  result = (int) ((arg1)->Percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CachedFocusAbility() {
  void * jresult ;
  eqlib::CachedFocusAbility *result = 0 ;
  
  result = (eqlib::CachedFocusAbility *)new eqlib::CachedFocusAbility();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CachedFocusAbility(void * jarg1) {
  eqlib::CachedFocusAbility *arg1 = (eqlib::CachedFocusAbility *) 0 ;
  
  arg1 = (eqlib::CachedFocusAbility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_EffectCache_SubIndex_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SubIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_EffectCache_SubIndex_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  result = (int) ((arg1)->SubIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_EffectCache_TotalPlayerEffects_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalPlayerEffects = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_EffectCache_TotalPlayerEffects_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  result = (int) ((arg1)->TotalPlayerEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_EffectCache_TotalItemEffects_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalItemEffects = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_EffectCache_TotalItemEffects_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  result = (int) ((arg1)->TotalItemEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_EffectCache_bDegenerating_set(void * jarg1, unsigned int jarg2) {
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDegenerating = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpellCache_EffectCache_bDegenerating_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  bool result;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  result = (bool) ((arg1)->bDegenerating);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_EffectCache_TotalContrib_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalContrib = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_EffectCache_TotalContrib_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  result = (int) ((arg1)->TotalContrib);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellCache_EffectCache() {
  void * jresult ;
  eqlib::SpellCache::EffectCache *result = 0 ;
  
  result = (eqlib::SpellCache::EffectCache *)new eqlib::SpellCache::EffectCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellCache_EffectCache(void * jarg1) {
  eqlib::SpellCache::EffectCache *arg1 = (eqlib::SpellCache::EffectCache *) 0 ;
  
  arg1 = (eqlib::SpellCache::EffectCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_AltEffectCache_SubIndex_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::AltEffectCache *arg1 = (eqlib::SpellCache::AltEffectCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::AltEffectCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SubIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_AltEffectCache_SubIndex_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::AltEffectCache *arg1 = (eqlib::SpellCache::AltEffectCache *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::AltEffectCache *)jarg1; 
  result = (int) ((arg1)->SubIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_AltEffectCache_AltTotal_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::AltEffectCache *arg1 = (eqlib::SpellCache::AltEffectCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::AltEffectCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AltTotal = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_AltEffectCache_AltTotal_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::AltEffectCache *arg1 = (eqlib::SpellCache::AltEffectCache *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::AltEffectCache *)jarg1; 
  result = (int) ((arg1)->AltTotal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellCache_AltEffectCache() {
  void * jresult ;
  eqlib::SpellCache::AltEffectCache *result = 0 ;
  
  result = (eqlib::SpellCache::AltEffectCache *)new eqlib::SpellCache::AltEffectCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellCache_AltEffectCache(void * jarg1) {
  eqlib::SpellCache::AltEffectCache *arg1 = (eqlib::SpellCache::AltEffectCache *) 0 ;
  
  arg1 = (eqlib::SpellCache::AltEffectCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusItem_pContents_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache::CachedFocusItem *arg1 = (eqlib::SpellCache::CachedFocusItem *) 0 ;
  eqlib::ItemClient *arg2 = (eqlib::ItemClient *) 0 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusItem *)jarg1; 
  arg2 = (eqlib::ItemClient *)jarg2; 
  if (arg1) (arg1)->pContents = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_CachedFocusItem_pContents_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache::CachedFocusItem *arg1 = (eqlib::SpellCache::CachedFocusItem *) 0 ;
  eqlib::ItemClient *result = 0 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusItem *)jarg1; 
  result = (eqlib::ItemClient *) ((arg1)->pContents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusItem_Percent_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::CachedFocusItem *arg1 = (eqlib::SpellCache::CachedFocusItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_CachedFocusItem_Percent_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::CachedFocusItem *arg1 = (eqlib::SpellCache::CachedFocusItem *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::CachedFocusItem *)jarg1; 
  result = (int) ((arg1)->Percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusItem_SpellType_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::CachedFocusItem *arg1 = (eqlib::SpellCache::CachedFocusItem *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusItem *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  if (arg1) (arg1)->SpellType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_CachedFocusItem_SpellType_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::CachedFocusItem *arg1 = (eqlib::SpellCache::CachedFocusItem *) 0 ;
  eqlib::ItemSpellTypes result;
  
  arg1 = (eqlib::SpellCache::CachedFocusItem *)jarg1; 
  result = (eqlib::ItemSpellTypes) ((arg1)->SpellType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellCache_CachedFocusItem() {
  void * jresult ;
  eqlib::SpellCache::CachedFocusItem *result = 0 ;
  
  result = (eqlib::SpellCache::CachedFocusItem *)new eqlib::SpellCache::CachedFocusItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellCache_CachedFocusItem(void * jarg1) {
  eqlib::SpellCache::CachedFocusItem *arg1 = (eqlib::SpellCache::CachedFocusItem *) 0 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusEffect_pSpell_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache::CachedFocusEffect *arg1 = (eqlib::SpellCache::CachedFocusEffect *) 0 ;
  eqlib::PSPELL arg2 = (eqlib::PSPELL) 0 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusEffect *)jarg1; 
  arg2 = (eqlib::PSPELL)jarg2; 
  if (arg1) (arg1)->pSpell = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_CachedFocusEffect_pSpell_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache::CachedFocusEffect *arg1 = (eqlib::SpellCache::CachedFocusEffect *) 0 ;
  eqlib::PSPELL result;
  
  arg1 = (eqlib::SpellCache::CachedFocusEffect *)jarg1; 
  result = (eqlib::PSPELL) ((arg1)->pSpell);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusEffect_Percent_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::CachedFocusEffect *arg1 = (eqlib::SpellCache::CachedFocusEffect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusEffect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_CachedFocusEffect_Percent_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::CachedFocusEffect *arg1 = (eqlib::SpellCache::CachedFocusEffect *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::CachedFocusEffect *)jarg1; 
  result = (int) ((arg1)->Percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusEffect_AffectIndex_set(void * jarg1, short jarg2) {
  eqlib::SpellCache::CachedFocusEffect *arg1 = (eqlib::SpellCache::CachedFocusEffect *) 0 ;
  short arg2 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusEffect *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->AffectIndex = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_SpellCache_CachedFocusEffect_AffectIndex_get(void * jarg1) {
  short jresult ;
  eqlib::SpellCache::CachedFocusEffect *arg1 = (eqlib::SpellCache::CachedFocusEffect *) 0 ;
  short result;
  
  arg1 = (eqlib::SpellCache::CachedFocusEffect *)jarg1; 
  result = (short) ((arg1)->AffectIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellCache_CachedFocusEffect() {
  void * jresult ;
  eqlib::SpellCache::CachedFocusEffect *result = 0 ;
  
  result = (eqlib::SpellCache::CachedFocusEffect *)new eqlib::SpellCache::CachedFocusEffect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellCache_CachedFocusEffect(void * jarg1) {
  eqlib::SpellCache::CachedFocusEffect *arg1 = (eqlib::SpellCache::CachedFocusEffect *) 0 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusEffect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusMercAbility_pAbilityEffectDef_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache::CachedFocusMercAbility *arg1 = (eqlib::SpellCache::CachedFocusMercAbility *) 0 ;
  eqlib::MercenaryAbilityEffectsDefinition *arg2 = (eqlib::MercenaryAbilityEffectsDefinition *) 0 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusMercAbility *)jarg1; 
  arg2 = (eqlib::MercenaryAbilityEffectsDefinition *)jarg2; 
  if (arg1) (arg1)->pAbilityEffectDef = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_CachedFocusMercAbility_pAbilityEffectDef_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache::CachedFocusMercAbility *arg1 = (eqlib::SpellCache::CachedFocusMercAbility *) 0 ;
  eqlib::MercenaryAbilityEffectsDefinition *result = 0 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusMercAbility *)jarg1; 
  result = (eqlib::MercenaryAbilityEffectsDefinition *) ((arg1)->pAbilityEffectDef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusMercAbility_Percent_set(void * jarg1, int jarg2) {
  eqlib::SpellCache::CachedFocusMercAbility *arg1 = (eqlib::SpellCache::CachedFocusMercAbility *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusMercAbility *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Percent = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SpellCache_CachedFocusMercAbility_Percent_get(void * jarg1) {
  int jresult ;
  eqlib::SpellCache::CachedFocusMercAbility *arg1 = (eqlib::SpellCache::CachedFocusMercAbility *) 0 ;
  int result;
  
  arg1 = (eqlib::SpellCache::CachedFocusMercAbility *)jarg1; 
  result = (int) ((arg1)->Percent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellCache_CachedFocusMercAbility() {
  void * jresult ;
  eqlib::SpellCache::CachedFocusMercAbility *result = 0 ;
  
  result = (eqlib::SpellCache::CachedFocusMercAbility *)new eqlib::SpellCache::CachedFocusMercAbility();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellCache_CachedFocusMercAbility(void * jarg1) {
  eqlib::SpellCache::CachedFocusMercAbility *arg1 = (eqlib::SpellCache::CachedFocusMercAbility *) 0 ;
  
  arg1 = (eqlib::SpellCache::CachedFocusMercAbility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_pCachedEffects_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::EffectCache > *arg2 = (HashTable< eqlib::SpellCache::EffectCache > *) 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = (HashTable< eqlib::SpellCache::EffectCache > *)jarg2; 
  if (arg1) (arg1)->pCachedEffects = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_pCachedEffects_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::EffectCache > *result = 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (HashTable< eqlib::SpellCache::EffectCache > *) ((arg1)->pCachedEffects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_bCachedSpellEffects_set(void * jarg1, unsigned int jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCachedSpellEffects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpellCache_bCachedSpellEffects_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  bool result;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (bool) ((arg1)->bCachedSpellEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_pCachedAltAbilityEffects_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::AltEffectCache > *arg2 = (HashTable< eqlib::SpellCache::AltEffectCache > *) 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = (HashTable< eqlib::SpellCache::AltEffectCache > *)jarg2; 
  if (arg1) (arg1)->pCachedAltAbilityEffects = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_pCachedAltAbilityEffects_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::AltEffectCache > *result = 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (HashTable< eqlib::SpellCache::AltEffectCache > *) ((arg1)->pCachedAltAbilityEffects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_bCachedAltEffects_set(void * jarg1, unsigned int jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCachedAltEffects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpellCache_bCachedAltEffects_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  bool result;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (bool) ((arg1)->bCachedAltEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_pCachedLimitedEffects_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::EffectCache > *arg2 = (HashTable< eqlib::SpellCache::EffectCache > *) 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = (HashTable< eqlib::SpellCache::EffectCache > *)jarg2; 
  if (arg1) (arg1)->pCachedLimitedEffects = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_pCachedLimitedEffects_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::EffectCache > *result = 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (HashTable< eqlib::SpellCache::EffectCache > *) ((arg1)->pCachedLimitedEffects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_bCachedLimitedEffects_set(void * jarg1, unsigned int jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCachedLimitedEffects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SpellCache_bCachedLimitedEffects_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  bool result;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (bool) ((arg1)->bCachedLimitedEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusItems_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::CachedFocusItem,int64_t > *arg2 = (HashTable< eqlib::SpellCache::CachedFocusItem,int64_t > *) 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = (HashTable< eqlib::SpellCache::CachedFocusItem,int64_t > *)jarg2; 
  if (arg1) (arg1)->CachedFocusItems = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_CachedFocusItems_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::CachedFocusItem,int64_t > *result = 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (HashTable< eqlib::SpellCache::CachedFocusItem,int64_t > *)& ((arg1)->CachedFocusItems);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusEffects_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::CachedFocusEffect,int64_t > *arg2 = (HashTable< eqlib::SpellCache::CachedFocusEffect,int64_t > *) 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = (HashTable< eqlib::SpellCache::CachedFocusEffect,int64_t > *)jarg2; 
  if (arg1) (arg1)->CachedFocusEffects = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_CachedFocusEffects_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::CachedFocusEffect,int64_t > *result = 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (HashTable< eqlib::SpellCache::CachedFocusEffect,int64_t > *)& ((arg1)->CachedFocusEffects);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusAbilities_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::CachedFocusAbility,int64_t > *arg2 = (HashTable< eqlib::CachedFocusAbility,int64_t > *) 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = (HashTable< eqlib::CachedFocusAbility,int64_t > *)jarg2; 
  if (arg1) (arg1)->CachedFocusAbilities = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_CachedFocusAbilities_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::CachedFocusAbility,int64_t > *result = 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (HashTable< eqlib::CachedFocusAbility,int64_t > *)& ((arg1)->CachedFocusAbilities);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SpellCache_CachedFocusMercAbilities_set(void * jarg1, void * jarg2) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::CachedFocusMercAbility,int64_t > *arg2 = (HashTable< eqlib::SpellCache::CachedFocusMercAbility,int64_t > *) 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  arg2 = (HashTable< eqlib::SpellCache::CachedFocusMercAbility,int64_t > *)jarg2; 
  if (arg1) (arg1)->CachedFocusMercAbilities = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpellCache_CachedFocusMercAbilities_get(void * jarg1) {
  void * jresult ;
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  HashTable< eqlib::SpellCache::CachedFocusMercAbility,int64_t > *result = 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  result = (HashTable< eqlib::SpellCache::CachedFocusMercAbility,int64_t > *)& ((arg1)->CachedFocusMercAbilities);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SpellCache() {
  void * jresult ;
  eqlib::SpellCache *result = 0 ;
  
  result = (eqlib::SpellCache *)new eqlib::SpellCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SpellCache(void * jarg1) {
  eqlib::SpellCache *arg1 = (eqlib::SpellCache *) 0 ;
  
  arg1 = (eqlib::SpellCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SLOTDATA_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_SLOTDATA;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SlotData_Slot_set(void * jarg1, int jarg2) {
  eqlib::SlotData *arg1 = (eqlib::SlotData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SlotData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Slot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SlotData_Slot_get(void * jarg1) {
  int jresult ;
  eqlib::SlotData *arg1 = (eqlib::SlotData *) 0 ;
  int result;
  
  arg1 = (eqlib::SlotData *)jarg1; 
  result = (int) ((arg1)->Slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SlotData_Value_set(void * jarg1, int jarg2) {
  eqlib::SlotData *arg1 = (eqlib::SlotData *) 0 ;
  int32_t arg2 ;
  
  arg1 = (eqlib::SlotData *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->Value = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SlotData_Value_get(void * jarg1) {
  int jresult ;
  eqlib::SlotData *arg1 = (eqlib::SlotData *) 0 ;
  int32_t result;
  
  arg1 = (eqlib::SlotData *)jarg1; 
  result = (int32_t) ((arg1)->Value);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SlotData() {
  void * jresult ;
  eqlib::SlotData *result = 0 ;
  
  result = (eqlib::SlotData *)new eqlib::SlotData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SlotData(void * jarg1) {
  eqlib::SlotData *arg1 = (eqlib::SlotData *) 0 ;
  
  arg1 = (eqlib::SlotData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Affect_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::EQ_Affect_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Reset(void * jarg1) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT long long SWIGSTDCALL CSharp_EQ_Affect_GetAffectData(void * jarg1, int jarg2) {
  long long jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int arg2 ;
  int64_t result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int64_t)((eqlib::EQ_Affect const *)arg1)->GetAffectData(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_SetAffectData(void * jarg1, int jarg2, long long jarg3) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int arg2 ;
  int64_t arg3 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->SetAffectData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_PopulateFromSpell(void * jarg1, void * jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  eqlib::EQ_Spell *arg2 = (eqlib::EQ_Spell *) 0 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (eqlib::EQ_Spell *)jarg2; 
  (arg1)->PopulateFromSpell((eqlib::EQ_Spell const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Type_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Affect_Type_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (uint8_t) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Level_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Affect_Level_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (uint8_t) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_ChargesRemaining_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ChargesRemaining = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Affect_ChargesRemaining_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (uint8_t) ((arg1)->ChargesRemaining);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Activatable_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Activatable = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQ_Affect_Activatable_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (uint8_t) ((arg1)->Activatable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Modifier_set(void * jarg1, float jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Modifier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Affect_Modifier_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (float) ((arg1)->Modifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_SpellID_set(void * jarg1, int jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Affect_SpellID_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (int) ((arg1)->SpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Duration_set(void * jarg1, int jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Duration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Affect_Duration_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (int) ((arg1)->Duration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_CasterID_set(void * jarg1, int jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CasterID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Affect_CasterID_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (int) ((arg1)->CasterID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_HitCount_set(void * jarg1, int jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HitCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Affect_HitCount_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (int) ((arg1)->HitCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Y_set(void * jarg1, float jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Affect_Y_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_X_set(void * jarg1, float jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Affect_X_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Z_set(void * jarg1, float jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Affect_Z_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_Flags_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Affect_Flags_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (uint32_t) ((arg1)->Flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_SlotData_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  eqlib::SlotData *arg2 = (eqlib::SlotData *) (eqlib::SlotData *)0 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (eqlib::SlotData *)jarg2; 
  {
    size_t ii;
    eqlib::SlotData *b = (eqlib::SlotData *) arg1->SlotData;
    for (ii = 0; ii < (size_t)eqlib::NUM_SLOTDATA; ii++) b[ii] = *((eqlib::SlotData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Affect_SlotData_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  eqlib::SlotData *result = 0 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (eqlib::SlotData *)(eqlib::SlotData *) ((arg1)->SlotData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQ_Affect() {
  void * jresult ;
  eqlib::EQ_Affect *result = 0 ;
  
  result = (eqlib::EQ_Affect *)new eqlib::EQ_Affect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Affect_get_EmptyValue(void * jarg1) {
  int jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = (int)((eqlib::EQ_Affect const *)arg1)->get_EmptyValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Affect_get_CasterGuid(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  EqGuid result;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  result = ((eqlib::EQ_Affect const *)arg1)->get_CasterGuid();
  jresult = new EqGuid(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Affect_put_CasterGuid(void * jarg1, void * jarg2) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  EqGuid *arg2 = 0 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  arg2 = (EqGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "EqGuid const & is null", 0);
    return ;
  } 
  (arg1)->put_CasterGuid((EqGuid const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQ_Affect(void * jarg1) {
  eqlib::EQ_Affect *arg1 = (eqlib::EQ_Affect *) 0 ;
  
  arg1 = (eqlib::EQ_Affect *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQSpellStrings() {
  void * jresult ;
  eqlib::EQSpellStrings *result = 0 ;
  
  result = (eqlib::EQSpellStrings *)new eqlib::EQSpellStrings();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQSpellStrings(void * jarg1) {
  eqlib::EQSpellStrings *arg1 = (eqlib::EQSpellStrings *) 0 ;
  
  arg1 = (eqlib::EQSpellStrings *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsResEffectSpell(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)eqlib::IsResEffectSpell(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXFreeList_blockSize_set(void * jarg1, unsigned int jarg2) {
  eqlib::CXFreeList *arg1 = (eqlib::CXFreeList *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CXFreeList *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->blockSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXFreeList_blockSize_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CXFreeList *arg1 = (eqlib::CXFreeList *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CXFreeList *)jarg1; 
  result = (uint32_t) ((arg1)->blockSize);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXFreeList_repList_set(void * jarg1, void * jarg2) {
  eqlib::CXFreeList *arg1 = (eqlib::CXFreeList *) 0 ;
  eqlib::CStrRep *arg2 = (eqlib::CStrRep *) 0 ;
  
  arg1 = (eqlib::CXFreeList *)jarg1; 
  arg2 = (eqlib::CStrRep *)jarg2; 
  if (arg1) (arg1)->repList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXFreeList_repList_get(void * jarg1) {
  void * jresult ;
  eqlib::CXFreeList *arg1 = (eqlib::CXFreeList *) 0 ;
  eqlib::CStrRep *result = 0 ;
  
  arg1 = (eqlib::CXFreeList *)jarg1; 
  result = (eqlib::CStrRep *) ((arg1)->repList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXFreeList() {
  void * jresult ;
  eqlib::CXFreeList *result = 0 ;
  
  result = (eqlib::CXFreeList *)new eqlib::CXFreeList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CXFreeList(void * jarg1) {
  eqlib::CXFreeList *arg1 = (eqlib::CXFreeList *) 0 ;
  
  arg1 = (eqlib::CXFreeList *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GetCXFreeList() {
  void * jresult ;
  eqlib::CXFreeList *result = 0 ;
  
  result = (eqlib::CXFreeList *)eqlib::internal::GetCXFreeList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr_ConstIterator__SWIG_0() {
  void * jresult ;
  eqlib::CXStr::ConstIterator *result = 0 ;
  
  result = (eqlib::CXStr::ConstIterator *)new eqlib::CXStr::ConstIterator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr_ConstIterator__SWIG_1(void * jarg1) {
  void * jresult ;
  eqlib::CXStr::ConstIterator::pointer arg1 ;
  eqlib::CXStr::ConstIterator::pointer *argp1 ;
  eqlib::CXStr::ConstIterator *result = 0 ;
  
  argp1 = (eqlib::CXStr::ConstIterator::pointer *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::ConstIterator::pointer", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (eqlib::CXStr::ConstIterator *)new eqlib::CXStr::ConstIterator(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CXStr_ConstIterator___ref__(void * jarg1) {
  char jresult ;
  eqlib::CXStr::ConstIterator *arg1 = (eqlib::CXStr::ConstIterator *) 0 ;
  eqlib::CXStr::ConstIterator::value_type *result = 0 ;
  
  arg1 = (eqlib::CXStr::ConstIterator *)jarg1; 
  result = (eqlib::CXStr::ConstIterator::value_type *) &((eqlib::CXStr::ConstIterator const *)arg1)->operator *();
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_ConstIterator___deref__(void * jarg1) {
  void * jresult ;
  eqlib::CXStr::ConstIterator *arg1 = (eqlib::CXStr::ConstIterator *) 0 ;
  eqlib::CXStr::ConstIterator::pointer result;
  
  arg1 = (eqlib::CXStr::ConstIterator *)jarg1; 
  result = ((eqlib::CXStr::ConstIterator const *)arg1)->operator ->();
  jresult = new eqlib::CXStr::ConstIterator::pointer(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CXStr_ConstIterator(void * jarg1) {
  eqlib::CXStr::ConstIterator *arg1 = (eqlib::CXStr::ConstIterator *) 0 ;
  
  arg1 = (eqlib::CXStr::ConstIterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr_Iterator__SWIG_0() {
  void * jresult ;
  eqlib::CXStr::Iterator *result = 0 ;
  
  result = (eqlib::CXStr::Iterator *)new eqlib::CXStr::Iterator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr_Iterator__SWIG_1(void * jarg1) {
  void * jresult ;
  eqlib::CXStr::Iterator::pointer arg1 ;
  eqlib::CXStr::Iterator::pointer *argp1 ;
  eqlib::CXStr::Iterator *result = 0 ;
  
  argp1 = (eqlib::CXStr::Iterator::pointer *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::Iterator::pointer", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (eqlib::CXStr::Iterator *)new eqlib::CXStr::Iterator(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_Iterator___ref__(void * jarg1) {
  void * jresult ;
  eqlib::CXStr::Iterator *arg1 = (eqlib::CXStr::Iterator *) 0 ;
  eqlib::CXStr::Iterator::value_type *result = 0 ;
  
  arg1 = (eqlib::CXStr::Iterator *)jarg1; 
  result = (eqlib::CXStr::Iterator::value_type *) &((eqlib::CXStr::Iterator const *)arg1)->operator *();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_Iterator___deref__(void * jarg1) {
  void * jresult ;
  eqlib::CXStr::Iterator *arg1 = (eqlib::CXStr::Iterator *) 0 ;
  eqlib::CXStr::Iterator::pointer result;
  
  arg1 = (eqlib::CXStr::Iterator *)jarg1; 
  result = ((eqlib::CXStr::Iterator const *)arg1)->operator ->();
  jresult = new eqlib::CXStr::Iterator::pointer(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CXStr_Iterator(void * jarg1) {
  eqlib::CXStr::Iterator *arg1 = (eqlib::CXStr::Iterator *) 0 ;
  
  arg1 = (eqlib::CXStr::Iterator *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_npos_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::CXStr::npos;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CXStr_s_defaultEmptyString_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)eqlib::CXStr::s_defaultEmptyString;
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_0() {
  void * jresult ;
  eqlib::CXStr *result = 0 ;
  
  result = (eqlib::CXStr *)new eqlib::CXStr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_1(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (eqlib::CXStr *)new eqlib::CXStr((eqlib::CXStr const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_2(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  result = (eqlib::CXStr *)new eqlib::CXStr((eqlib::CXStr const &)*arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = (eqlib::CXStr *)new eqlib::CXStr((eqlib::CXStr const &)*arg1,SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_4(void * jarg1) {
  void * jresult ;
  nullptr_t arg1 ;
  nullptr_t *argp1 ;
  eqlib::CXStr *result = 0 ;
  
  argp1 = (nullptr_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null nullptr_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (eqlib::CXStr *)new eqlib::CXStr(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_5(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (eqlib::CXStr *)new eqlib::CXStr((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_6(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  result = (eqlib::CXStr *)new eqlib::CXStr((char const *)arg1,SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_7(unsigned int jarg1, char jarg2) {
  void * jresult ;
  eqlib::CXStr::size_type arg1 ;
  char arg2 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr::size_type)jarg1; 
  arg2 = (char)jarg2; 
  result = (eqlib::CXStr *)new eqlib::CXStr(SWIG_STD_MOVE(arg1),arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_8(char jarg1) {
  void * jresult ;
  char arg1 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (char)jarg1; 
  result = (eqlib::CXStr *)new eqlib::CXStr(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CXStr__SWIG_10(void * jarg1) {
  void * jresult ;
  SwigValueWrapper< std::initializer_list< char > > arg1 ;
  eqlib::CXStr *result = 0 ;
  
  
  result = (eqlib::CXStr *)new eqlib::CXStr(SWIG_STD_MOVE(arg1));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CXStr(void * jarg1) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_assign__SWIG_0(void * jarg1, unsigned int jarg2, char jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  char arg3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (char)jarg3; 
  result = (eqlib::CXStr *) &(arg1)->assign(SWIG_STD_MOVE(arg2),arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_assign__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (eqlib::CXStr *) &(arg1)->assign((eqlib::CXStr const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_assign__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr::size_type arg4 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr::size_type)jarg4; 
  result = (eqlib::CXStr *) &(arg1)->assign((eqlib::CXStr const &)*arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_assign__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = (eqlib::CXStr *) &(arg1)->assign((eqlib::CXStr const &)*arg2,SWIG_STD_MOVE(arg3));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_assign__SWIG_5(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = (eqlib::CXStr *) &(arg1)->assign((char const *)arg2,SWIG_STD_MOVE(arg3));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_assign__SWIG_6(void * jarg1, char * jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (eqlib::CXStr *) &(arg1)->assign((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_assign__SWIG_7(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  SwigValueWrapper< std::initializer_list< char > > arg2 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  
  result = (eqlib::CXStr *) &(arg1)->assign(SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_at__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::value_type *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  result = (eqlib::CXStr::value_type *) &(arg1)->at(SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_front__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::value_type *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (eqlib::CXStr::value_type *) &(arg1)->front();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_back__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::value_type *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (eqlib::CXStr::value_type *) &(arg1)->back();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_mutable_data(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::pointer result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (arg1)->mutable_data();
  jresult = new eqlib::CXStr::pointer(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_data(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_pointer result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->data();
  jresult = new eqlib::CXStr::const_pointer(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_c_str(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_pointer result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->c_str();
  jresult = new eqlib::CXStr::const_pointer(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_begin__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (arg1)->begin();
  jresult = new eqlib::CXStr::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_cbegin(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->cbegin();
  jresult = new eqlib::CXStr::const_iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_end__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (arg1)->end();
  jresult = new eqlib::CXStr::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_cend(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->cend();
  jresult = new eqlib::CXStr::const_iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_rbegin__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  SwigValueWrapper< std::reverse_iterator< eqlib::CXStr::Iterator > > result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (arg1)->rbegin();
  jresult = new eqlib::CXStr::reverse_iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_crbegin(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  SwigValueWrapper< std::reverse_iterator< eqlib::CXStr::ConstIterator > > result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->crbegin();
  jresult = new eqlib::CXStr::const_reverse_iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_rend__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  SwigValueWrapper< std::reverse_iterator< eqlib::CXStr::Iterator > > result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (arg1)->rend();
  jresult = new eqlib::CXStr::reverse_iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_crend(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  SwigValueWrapper< std::reverse_iterator< eqlib::CXStr::ConstIterator > > result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->crend();
  jresult = new eqlib::CXStr::const_reverse_iterator(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_empty(void * jarg1) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  bool result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (bool)((eqlib::CXStr const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_size(void * jarg1) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_length(void * jarg1) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->length();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_reserve__SWIG_0(void * jarg1, unsigned int jarg2) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  (arg1)->reserve(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_reserve__SWIG_1(void * jarg1) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  (arg1)->reserve();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_capacity(void * jarg1) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->capacity();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_clear(void * jarg1) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, char jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  char arg4 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (char)jarg4; 
  result = (eqlib::CXStr *) &(arg1)->insert(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_1(void * jarg1, unsigned int jarg2, char * jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  char *arg3 = (char *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (char *)jarg3; 
  result = (eqlib::CXStr *) &(arg1)->insert(SWIG_STD_MOVE(arg2),(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_2(void * jarg1, unsigned int jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  char *arg3 = (char *) 0 ;
  eqlib::CXStr::size_type arg4 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (eqlib::CXStr::size_type)jarg4; 
  result = (eqlib::CXStr *) &(arg1)->insert(SWIG_STD_MOVE(arg2),(char const *)arg3,SWIG_STD_MOVE(arg4));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_3(void * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr *arg3 = 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (eqlib::CXStr *) &(arg1)->insert(SWIG_STD_MOVE(arg2),(eqlib::CXStr const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_4(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr *arg3 = 0 ;
  eqlib::CXStr::size_type arg4 ;
  eqlib::CXStr::size_type arg5 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg4 = (eqlib::CXStr::size_type)jarg4; 
  arg5 = (eqlib::CXStr::size_type)jarg5; 
  result = (eqlib::CXStr *) &(arg1)->insert(SWIG_STD_MOVE(arg2),(eqlib::CXStr const &)*arg3,SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_5(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr *arg3 = 0 ;
  eqlib::CXStr::size_type arg4 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg4 = (eqlib::CXStr::size_type)jarg4; 
  result = (eqlib::CXStr *) &(arg1)->insert(SWIG_STD_MOVE(arg2),(eqlib::CXStr const &)*arg3,SWIG_STD_MOVE(arg4));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_6(void * jarg1, void * jarg2, char jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  char arg3 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (char)jarg3; 
  result = (arg1)->insert(SWIG_STD_MOVE(arg2),arg3);
  jresult = new eqlib::CXStr::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_7(void * jarg1, void * jarg2, unsigned int jarg3, char jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  eqlib::CXStr::size_type arg3 ;
  char arg4 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (char)jarg4; 
  result = (arg1)->insert(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),arg4);
  jresult = new eqlib::CXStr::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_insert__SWIG_8(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  SwigValueWrapper< std::initializer_list< char > > arg3 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  
  result = (arg1)->insert(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = new eqlib::CXStr::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_erase__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  result = (eqlib::CXStr *) &(arg1)->erase(SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_erase__SWIG_1(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (eqlib::CXStr *) &(arg1)->erase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_erase__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = (eqlib::CXStr *) &(arg1)->erase(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_erase__SWIG_3(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(SWIG_STD_MOVE(arg2));
  jresult = new eqlib::CXStr::iterator(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_erase__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  eqlib::CXStr::const_iterator arg3 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::const_iterator *argp3 ;
  eqlib::CXStr::iterator result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (eqlib::CXStr::const_iterator *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (arg1)->erase(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = new eqlib::CXStr::iterator(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_push_back(void * jarg1, char jarg2) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->push_back(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_pop_back(void * jarg1) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_append__SWIG_0(void * jarg1, unsigned int jarg2, char jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  char arg3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (char)jarg3; 
  result = (eqlib::CXStr *) &(arg1)->append(SWIG_STD_MOVE(arg2),arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_append__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (eqlib::CXStr *) &(arg1)->append((eqlib::CXStr const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_append__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3, unsigned int jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr::size_type arg4 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr::size_type)jarg4; 
  result = (eqlib::CXStr *) &(arg1)->append((eqlib::CXStr const &)*arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_append__SWIG_3(void * jarg1, void * jarg2, unsigned int jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = (eqlib::CXStr *) &(arg1)->append((eqlib::CXStr const &)*arg2,SWIG_STD_MOVE(arg3));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_append__SWIG_4(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = (eqlib::CXStr *) &(arg1)->append((char const *)arg2,SWIG_STD_MOVE(arg3));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_append__SWIG_5(void * jarg1, char * jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (eqlib::CXStr *) &(arg1)->append((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_append__SWIG_6(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  SwigValueWrapper< std::initializer_list< char > > arg2 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  
  result = (eqlib::CXStr *) &(arg1)->append(SWIG_STD_MOVE(arg2));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_compare__SWIG_0(void * jarg1, void * jarg2) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (int)((eqlib::CXStr const *)arg1)->compare((eqlib::CXStr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_compare__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *arg4 = 0 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (int)((eqlib::CXStr const *)arg1)->compare(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(eqlib::CXStr const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_compare__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *arg4 = 0 ;
  eqlib::CXStr::size_type arg5 ;
  eqlib::CXStr::size_type arg6 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg5 = (eqlib::CXStr::size_type)jarg5; 
  arg6 = (eqlib::CXStr::size_type)jarg6; 
  result = (int)((eqlib::CXStr const *)arg1)->compare(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(eqlib::CXStr const &)*arg4,SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_compare__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *arg4 = 0 ;
  eqlib::CXStr::size_type arg5 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg5 = (eqlib::CXStr::size_type)jarg5; 
  result = (int)((eqlib::CXStr const *)arg1)->compare(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(eqlib::CXStr const &)*arg4,SWIG_STD_MOVE(arg5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_compare__SWIG_4(void * jarg1, char * jarg2) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((eqlib::CXStr const *)arg1)->compare((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_compare__SWIG_5(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  char *arg4 = (char *) 0 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (char *)jarg4; 
  result = (int)((eqlib::CXStr const *)arg1)->compare(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(char const *)arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_compare__SWIG_6(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, unsigned int jarg5) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  char *arg4 = (char *) 0 ;
  eqlib::CXStr::size_type arg5 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (eqlib::CXStr::size_type)jarg5; 
  result = (int)((eqlib::CXStr const *)arg1)->compare(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(char const *)arg4,SWIG_STD_MOVE(arg5));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_starts_with__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  std::string_view arg2 ;
  std::string_view *argp2 ;
  bool result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (std::string_view *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((eqlib::CXStr const *)arg1)->starts_with(SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_starts_with__SWIG_1(void * jarg1, char jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char arg2 ;
  bool result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char)jarg2; 
  result = (bool)((eqlib::CXStr const *)arg1)->starts_with(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_starts_with__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((eqlib::CXStr const *)arg1)->starts_with((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_ends_with__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  std::string_view arg2 ;
  std::string_view *argp2 ;
  bool result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (std::string_view *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((eqlib::CXStr const *)arg1)->ends_with(SWIG_STD_MOVE(arg2));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_ends_with__SWIG_1(void * jarg1, char jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char arg2 ;
  bool result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char)jarg2; 
  result = (bool)((eqlib::CXStr const *)arg1)->ends_with(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_ends_with__SWIG_2(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((eqlib::CXStr const *)arg1)->ends_with((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *arg4 = 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(eqlib::CXStr const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  eqlib::CXStr::const_iterator arg3 ;
  eqlib::CXStr *arg4 = 0 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::const_iterator *argp3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (eqlib::CXStr::const_iterator *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (eqlib::CXStr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(eqlib::CXStr const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_2(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *arg4 = 0 ;
  eqlib::CXStr::size_type arg5 ;
  eqlib::CXStr::size_type arg6 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg5 = (eqlib::CXStr::size_type)jarg5; 
  arg6 = (eqlib::CXStr::size_type)jarg6; 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(eqlib::CXStr const &)*arg4,SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_3(void * jarg1, unsigned int jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr *arg4 = 0 ;
  eqlib::CXStr::size_type arg5 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg5 = (eqlib::CXStr::size_type)jarg5; 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(eqlib::CXStr const &)*arg4,SWIG_STD_MOVE(arg5));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_4(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  char *arg4 = (char *) 0 ;
  eqlib::CXStr::size_type arg5 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (eqlib::CXStr::size_type)jarg5; 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(char const *)arg4,SWIG_STD_MOVE(arg5));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_5(void * jarg1, void * jarg2, void * jarg3, char * jarg4, unsigned int jarg5) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  eqlib::CXStr::const_iterator arg3 ;
  char *arg4 = (char *) 0 ;
  eqlib::CXStr::size_type arg5 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::const_iterator *argp3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (eqlib::CXStr::const_iterator *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (char *)jarg4; 
  arg5 = (eqlib::CXStr::size_type)jarg5; 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(char const *)arg4,SWIG_STD_MOVE(arg5));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_6(void * jarg1, unsigned int jarg2, unsigned int jarg3, char * jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  char *arg4 = (char *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (char *)jarg4; 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_7(void * jarg1, void * jarg2, void * jarg3, char * jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  eqlib::CXStr::const_iterator arg3 ;
  char *arg4 = (char *) 0 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::const_iterator *argp3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (eqlib::CXStr::const_iterator *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (char *)jarg4; 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_8(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, char jarg5) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr::size_type arg4 ;
  char arg5 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr::size_type)jarg4; 
  arg5 = (char)jarg5; 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_9(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, char jarg5) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  eqlib::CXStr::const_iterator arg3 ;
  eqlib::CXStr::size_type arg4 ;
  char arg5 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::const_iterator *argp3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (eqlib::CXStr::const_iterator *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = (eqlib::CXStr::size_type)jarg4; 
  arg5 = (char)jarg5; 
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_replace__SWIG_10(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::const_iterator arg2 ;
  eqlib::CXStr::const_iterator arg3 ;
  SwigValueWrapper< std::initializer_list< char > > arg4 ;
  eqlib::CXStr::const_iterator *argp2 ;
  eqlib::CXStr::const_iterator *argp3 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  argp2 = (eqlib::CXStr::const_iterator *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (eqlib::CXStr::const_iterator *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CXStr::const_iterator", 0);
    return 0;
  }
  arg3 = *argp3; 
  
  result = (eqlib::CXStr *) &(arg1)->replace(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_substr__SWIG_0(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = ((eqlib::CXStr const *)arg1)->substr(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
  jresult = new eqlib::CXStr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_substr__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  eqlib::CXStr result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  result = ((eqlib::CXStr const *)arg1)->substr(SWIG_STD_MOVE(arg2));
  jresult = new eqlib::CXStr(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_substr__SWIG_2(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = ((eqlib::CXStr const *)arg1)->substr();
  jresult = new eqlib::CXStr(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_copy__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr::size_type arg4 ;
  eqlib::CXStr::size_type result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  arg4 = (eqlib::CXStr::size_type)jarg4; 
  result = ((eqlib::CXStr const *)arg1)->copy(arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_copy__SWIG_1(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CXStr::size_type arg3 ;
  eqlib::CXStr::size_type result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = ((eqlib::CXStr const *)arg1)->copy(arg2,SWIG_STD_MOVE(arg3));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_resize__SWIG_0(void * jarg1, unsigned int jarg2) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  (arg1)->resize(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_resize__SWIG_1(void * jarg1, unsigned int jarg2, char jarg3) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr::size_type arg2 ;
  char arg3 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr::size_type)jarg2; 
  arg3 = (char)jarg3; 
  (arg1)->resize(SWIG_STD_MOVE(arg2),arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_swap(void * jarg1, void * jarg2) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr & is null", 0);
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_GetEncoding(void * jarg1) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::EStringEncoding result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (eqlib::EStringEncoding)((eqlib::CXStr const *)arg1)->GetEncoding();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_SetEncoding__SWIG_0(void * jarg1, int jarg2) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::EStringEncoding arg2 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::EStringEncoding)jarg2; 
  (arg1)->SetEncoding(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_Compare__SWIG_0(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::ECompareMode arg3 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg3 = (eqlib::ECompareMode)jarg3; 
  result = (int)((eqlib::CXStr const *)arg1)->Compare((eqlib::CXStr const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_Compare__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (int)((eqlib::CXStr const *)arg1)->Compare((eqlib::CXStr const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_CompareN__SWIG_0(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  int arg3 ;
  eqlib::ECompareMode arg4 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  arg4 = (eqlib::ECompareMode)jarg4; 
  result = (int)((eqlib::CXStr const *)arg1)->CompareN((eqlib::CXStr const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_CompareN__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  int arg3 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg3 = (int)jarg3; 
  result = (int)((eqlib::CXStr const *)arg1)->CompareN((eqlib::CXStr const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_find__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::CXStr::size_type arg3 ;
  size_t result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = ((eqlib::CXStr const *)arg1)->find((eqlib::CXStr const &)*arg2,SWIG_STD_MOVE(arg3));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_find__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  size_t result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = ((eqlib::CXStr const *)arg1)->find((eqlib::CXStr const &)*arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_find__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  size_t arg4 ;
  size_t result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  arg4 = (size_t)jarg4; 
  result = ((eqlib::CXStr const *)arg1)->find((char const *)arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_find__SWIG_3(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CXStr::size_type arg3 ;
  size_t result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = ((eqlib::CXStr const *)arg1)->find((char const *)arg2,SWIG_STD_MOVE(arg3));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_find__SWIG_4(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((eqlib::CXStr const *)arg1)->find((char const *)arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_find__SWIG_5(void * jarg1, char jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char arg2 ;
  eqlib::CXStr::size_type arg3 ;
  size_t result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (eqlib::CXStr::size_type)jarg3; 
  result = ((eqlib::CXStr const *)arg1)->find(arg2,SWIG_STD_MOVE(arg3));
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_find__SWIG_6(void * jarg1, char jarg2) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char arg2 ;
  size_t result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char)jarg2; 
  result = ((eqlib::CXStr const *)arg1)->find(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CXStr_GetLength(void * jarg1) {
  int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  int result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (int)((eqlib::CXStr const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CXStr_GetChar(void * jarg1, int jarg2) {
  char jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  int arg2 ;
  char result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char)((eqlib::CXStr const *)arg1)->GetChar(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_GetUnicode(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  int arg2 ;
  char16_t result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (int)jarg2; 
  result = ((eqlib::CXStr const *)arg1)->GetUnicode(arg2);
  jresult = new char16_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr_Mid(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  int arg2 ;
  int arg3 ;
  eqlib::CXStr result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = ((eqlib::CXStr const *)arg1)->Mid(arg2,arg3);
  jresult = new eqlib::CXStr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_Delete(void * jarg1, int jarg2, int jarg3) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->Delete(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CXStr_Insert(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  int arg2 ;
  std::string_view arg3 ;
  std::string_view *argp3 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (std::string_view *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null std::string_view", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->Insert(arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CXStr_FindNext(void * jarg1, char jarg2, void * jarg3) {
  unsigned int jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  char arg2 ;
  int *arg3 = 0 ;
  bool result;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  arg2 = (char)jarg2; 
  arg3 = (int *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return 0;
  } 
  result = (bool)((eqlib::CXStr const *)arg1)->FindNext(arg2,*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CXStr__get_ptr(void * jarg1) {
  void * jresult ;
  eqlib::CXStr *arg1 = (eqlib::CXStr *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1; 
  result = (eqlib::CXStr *)(arg1)->_get_ptr();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_swap(void * jarg1, void * jarg2) {
  eqlib::CXStr *arg1 = 0 ;
  eqlib::CXStr *arg2 = 0 ;
  
  arg1 = (eqlib::CXStr *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr & is null", 0);
    return ;
  } 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr & is null", 0);
    return ;
  } 
  eqlib::swap(*arg1,*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_LockCXStrMutex() {
  eqlib::internal::LockCXStrMutex();
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnlockCXStrMutex() {
  eqlib::internal::UnlockCXStrMutex();
}


SWIGEXPORT void SWIGSTDCALL CSharp_gStrRepAllocations_set(unsigned int jarg1) {
  size_t arg1 ;
  
  arg1 = (size_t)jarg1; 
  eqlib::internal::gStrRepAllocations = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gStrRepAllocations_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::internal::gStrRepAllocations;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_gStrRepLiveObjects_set(unsigned int jarg1) {
  size_t arg1 ;
  
  arg1 = (size_t)jarg1; 
  eqlib::internal::gStrRepLiveObjects = arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_gStrRepLiveObjects_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::internal::gStrRepLiveObjects;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_PLAYER_CLASSES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_PLAYER_CLASSES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_CLASSES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_CLASSES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AllClassesMASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0xffff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WarriorMASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0001);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ClericMASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0002);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RogueMASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0100);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WizardMASK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0400);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BI_TARGETABLE_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BI_TRIGGER_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BI_TRAP_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BI_TIMER_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_LANGUAGES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_LANGUAGES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQP_PC_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQP_PC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQP_NPC_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQP_NPC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQP_CORPSE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQP_CORPSE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_HUMAN_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_HUMAN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_BARBARIAN_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_BARBARIAN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_ERUDITE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_ERUDITE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_ELF_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_ELF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_HIGH_ELF_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_HIGH_ELF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_DARK_ELF_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_DARK_ELF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_HALF_ELF_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_HALF_ELF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_DWARF_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_DWARF;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_TROLL_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_TROLL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_OGRE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_OGRE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_HALFLING_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_HALFLING;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_GNOME_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_GNOME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_SKELETON_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_SKELETON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_INVISIBLE_MAN_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_INVISIBLE_MAN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_IKSAR_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_IKSAR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_VAHSHIR_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_VAHSHIR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_FROGLOCK_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_FROGLOCK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_SKELETON_NEW_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_SKELETON_NEW;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_BANNER_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_BANNER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_SPIKE_TRAP_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_SPIKE_TRAP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_TOTEM_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_TOTEM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_DRAKKIN_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_DRAKKIN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_BANNER0_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_BANNER0;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_BANNER1_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_BANNER1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_BANNER2_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_BANNER2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_BANNER3_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_BANNER3;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_BANNER4_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_BANNER4;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_CAMPSITE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_CAMPSITE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_TCGBANNER_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_TCGBANNER;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_OEQ_SKELETON_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_OEQ_SKELETON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQR_SOL_SKELETON_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQR_SOL_SKELETON;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_STANDARD_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_STANDARD_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_STANDARD_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_STANDARD_CLOCKWISE_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_STANDARD_CLOCKWISE_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_STANDARD_CLOCKWISE_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_STANDARD_STONE_COLLIDING_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_SMALL_SLIDING_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_SMALL_SLIDING_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_SMALL_SLIDING_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_MEDIUM_SLIDING_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_MEDIUM_SLIDING_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_MEDIUM_SLIDING_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(17);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_LARGE_SLIDING_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_LARGE_SLIDING_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_LARGE_SLIDING_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_SLIDING_get() {
  int jresult ;
  int result;
  
  result = (int)(25);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_SLIDING_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(26);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_SLIDING_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(27);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_DRAWBRIDGE_get() {
  int jresult ;
  int result;
  
  result = (int)(30);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_TRAP_get() {
  int jresult ;
  int result;
  
  result = (int)(35);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_PULLTRAP_get() {
  int jresult ;
  int result;
  
  result = (int)(36);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_LEVER_get() {
  int jresult ;
  int result;
  
  result = (int)(40);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_TOGGLE_BUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)(45);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_PRESSURE_PLATE_get() {
  int jresult ;
  int result;
  
  result = (int)(50);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_DAMAGE_PLATE_get() {
  int jresult ;
  int result;
  
  result = (int)(51);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GUILD_CHEST_get() {
  int jresult ;
  int result;
  
  result = (int)(56);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_TELEPORTER_get() {
  int jresult ;
  int result;
  
  result = (int)(57);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_KEY_TELEPORTER_get() {
  int jresult ;
  int result;
  
  result = (int)(58);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_ELEVATOR_get() {
  int jresult ;
  int result;
  
  result = (int)(59);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_SMALL_SLIDE_UPWARDS_get() {
  int jresult ;
  int result;
  
  result = (int)(60);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_SMALL_SLIDE_UPWARDS_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(61);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_SMALL_SLIDE_UPWARDS_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(62);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_MEDIUM_SLIDE_UPWARDS_get() {
  int jresult ;
  int result;
  
  result = (int)(65);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_MEDIUM_SLIDE_UPWARDS_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(66);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_MEDIUM_SLIDE_UPWARDS_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(67);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_LARGE_SLIDE_UPWARDS_get() {
  int jresult ;
  int result;
  
  result = (int)(70);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_LARGE_SLIDE_UPWARDS_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(71);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_LARGE_SLIDE_UPWARDS_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(72);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_SLIDE_UPWARDS_get() {
  int jresult ;
  int result;
  
  result = (int)(75);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_SLIDE_UPWARDS_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(76);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_SLIDE_UPWARDS_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(77);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_DIAGONAL_UP_RIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(78);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_DIAGONAL_UP_LEFT_get() {
  int jresult ;
  int result;
  
  result = (int)(79);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_DIAGONAL_DOWN_RIGHT_get() {
  int jresult ;
  int result;
  
  result = (int)(80);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_DIAGONAL_DOWN_LEFT_get() {
  int jresult ;
  int result;
  
  result = (int)(81);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_UP_OR_DOWN_get() {
  int jresult ;
  int result;
  
  result = (int)(82);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_UP_OR_DOWN_METAL_get() {
  int jresult ;
  int result;
  
  result = (int)(83);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_GIANT_UP_OR_DOWN_STONE_get() {
  int jresult ;
  int result;
  
  result = (int)(84);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_BUTTON_get() {
  int jresult ;
  int result;
  
  result = (int)(109);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_TRADER_PLATFORM_get() {
  int jresult ;
  int result;
  
  result = (int)(153);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_BARTER_PLATFORM_get() {
  int jresult ;
  int result;
  
  result = (int)(154);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_BARTER_TRADER_PLATFORM_get() {
  int jresult ;
  int result;
  
  result = (int)(155);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_BOOK_get() {
  int jresult ;
  int result;
  
  result = (int)(158);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_REALESTATE_NEIGHBORHOOD_get() {
  int jresult ;
  int result;
  
  result = (int)(159);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_REALESTATE_PLOT_get() {
  int jresult ;
  int result;
  
  result = (int)(160);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSWITCH_REALESTATE_EXIT_get() {
  int jresult ;
  int result;
  
  result = (int)(161);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPAWN_PLAYER_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPAWN_NPC_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SPAWN_CORPSE_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILL_PICKLOCK_get() {
  int jresult ;
  int result;
  
  result = (int)(35);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NAME_LEN_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::ITEM_NAME_LEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LORE_NAME_LEN_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::LORE_NAME_LEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NORMAL1_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0031);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NORMAL2_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0036);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NORMAL3_get() {
  int jresult ;
  int result;
  
  result = (int)(0x315f);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NORMAL4_get() {
  int jresult ;
  int result;
  
  result = (int)(0x3336);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NORMAL5_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0032);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NORMAL6_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0033);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NORMAL7_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0034);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_NORMAL8_get() {
  int jresult ;
  int result;
  
  result = (int)(0x0039);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_CONTAINER_get() {
  int jresult ;
  int result;
  
  result = (int)(0x7900);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_CONTAINER_PLAIN_get() {
  int jresult ;
  int result;
  
  result = (int)(0x7953);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEM_BOOK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x7379);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMEFFECTTYPE_COMBAT_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMEFFECTTYPE_INVENTORY1_get() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMEFFECTTYPE_WORN_get() {
  int jresult ;
  int result;
  
  result = (int)(0x02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMEFFECTTYPE_INVENTORY2_get() {
  int jresult ;
  int result;
  
  result = (int)(0x03);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMEFFECTTYPE_MUSTEQUIP_get() {
  int jresult ;
  int result;
  
  result = (int)(0x04);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMEFFECTTYPE_INVENTORY3_get() {
  int jresult ;
  int result;
  
  result = (int)(0x05);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_BASH_get() {
  int jresult ;
  int result;
  
  result = (int)(0x00);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_BACKSTAB_get() {
  int jresult ;
  int result;
  
  result = (int)(0x01);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_DRAGONPUNCH_get() {
  int jresult ;
  int result;
  
  result = (int)(0x02);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_EAGLESTRIKE_get() {
  int jresult ;
  int result;
  
  result = (int)(0x03);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_FLYINGKICK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x04);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_KICK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x05);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_ROUNDKICK_get() {
  int jresult ;
  int result;
  
  result = (int)(0x06);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_TIGERCLAW_get() {
  int jresult ;
  int result;
  
  result = (int)(0x07);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SKILLMINDAMAGEMOD_FRENZY_get() {
  int jresult ;
  int result;
  
  result = (int)(0x08);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_SPELL_SHIELDING_get() {
  int jresult ;
  int result;
  
  result = (int)(0x4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_COMBAT_EFFECTS_get() {
  int jresult ;
  int result;
  
  result = (int)(0x5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_MELEE_SHIELDING_get() {
  int jresult ;
  int result;
  
  result = (int)(0x6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_DAMAGE_SHIELDING_get() {
  int jresult ;
  int result;
  
  result = (int)(0x7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_DOT_SHIELDING_get() {
  int jresult ;
  int result;
  
  result = (int)(0x8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_DAMAGE_SHIELD_MITIG_get() {
  int jresult ;
  int result;
  
  result = (int)(0x9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_AVOIDANCE_get() {
  int jresult ;
  int result;
  
  result = (int)(0xa);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_ACCURACY_get() {
  int jresult ;
  int result;
  
  result = (int)(0xb);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_STUN_RESIST_get() {
  int jresult ;
  int result;
  
  result = (int)(0xc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HEROIC_MOD_STRIKETHROUGH_get() {
  int jresult ;
  int result;
  
  result = (int)(0xd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_Bertoxxulous_get() {
  int jresult ;
  int result;
  
  result = (int)(201);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_BrellSerilis_get() {
  int jresult ;
  int result;
  
  result = (int)(202);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_CazicThule_get() {
  int jresult ;
  int result;
  
  result = (int)(203);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_ErollisiMarr_get() {
  int jresult ;
  int result;
  
  result = (int)(204);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_Bristlebane_get() {
  int jresult ;
  int result;
  
  result = (int)(205);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_Innoruuk_get() {
  int jresult ;
  int result;
  
  result = (int)(206);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_Karana_get() {
  int jresult ;
  int result;
  
  result = (int)(207);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_MithanielMarr_get() {
  int jresult ;
  int result;
  
  result = (int)(208);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_Prexus_get() {
  int jresult ;
  int result;
  
  result = (int)(209);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_Quellious_get() {
  int jresult ;
  int result;
  
  result = (int)(210);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_RallosZek_get() {
  int jresult ;
  int result;
  
  result = (int)(211);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_RodcetNife_get() {
  int jresult ;
  int result;
  
  result = (int)(212);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_SolusekRo_get() {
  int jresult ;
  int result;
  
  result = (int)(213);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_TheTribunal_get() {
  int jresult ;
  int result;
  
  result = (int)(214);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_Tunare_get() {
  int jresult ;
  int result;
  
  result = (int)(215);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DEITY_Veeshan_get() {
  int jresult ;
  int result;
  
  result = (int)(216);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_DEITIES_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CMD_MQ_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CMD_MQ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CMD_EQ_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CMD_EQ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_SAY_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_SAY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_TELL_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_TELL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_OOC_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_OOC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_SHOUT_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_SHOUT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_AUC_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_AUC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_GUILD_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_GUILD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_GROUP_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_GROUP;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_RAID_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_RAID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CHAT_CHAT_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CHAT_CHAT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_MAX_NAME_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_MAX_NAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_MAX_LASTNAME_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_MAX_LASTNAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_MAX_STATION_ID_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_MAX_STATION_ID;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_ACTOR_TAG_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_ACTOR_TAG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_REPLY_NAMES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_REPLY_NAMES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SOCIAL_PAGES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_SOCIAL_PAGES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SOCIALS_PER_PAGE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::SOCIALS_PER_PAGE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SOCIAL_NAME_LEN_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::SOCIAL_NAME_LEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SOCIAL_NUM_LINES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::SOCIAL_NUM_LINES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SOCIAL_LINE_LEN_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::SOCIAL_LINE_LEN;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_HOTBUTTON_WINDOWS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_HOTBUTTON_WINDOWS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_HOTBUTTON_PAGES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_HOTBUTTON_PAGES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HOTBUTTONS_PER_PAGE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::HOTBUTTONS_PER_PAGE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nEQMappableCommands_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::nEQMappableCommands;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_nNormalEQMappableCommands_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::nNormalEQMappableCommands;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_PC_LEVEL_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_PC_LEVEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_NPC_LEVEL_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_NPC_LEVEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SPELL_LEVEL_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_SPELL_LEVEL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SPELL_GEMS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_SPELL_GEMS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SPELL_SETS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_SPELL_SETS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_HOTBUTTON_SETS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_HOTBUTTON_SETS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_GROUP_ROLE_SETS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_GROUP_ROLE_SETS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_XTARGET_SETS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_XTARGET_SETS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_RACES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_RACES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_BLOCKED_BUFFS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_BLOCKED_BUFFS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_LONG_BUFFS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_LONG_BUFFS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SONG_BUFFS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_SONG_BUFFS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_BUFF_ICONS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_BUFF_ICONS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_TEMP_BUFFS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_TEMP_BUFFS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_TEMP_BUFFS_NPC_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_TEMP_BUFFS_NPC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SHORT_BUFFS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_SHORT_BUFFS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_TOTAL_BUFFS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_TOTAL_BUFFS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_TOTAL_BUFFS_NPC_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_TOTAL_BUFFS_NPC;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_BUFF_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_BUFF_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_MEMORIZED_SPELLS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_MEMORIZED_SPELLS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_ALT_ABILITIES_ARRAY_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_ALT_ABILITIES_ARRAY;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_ALT_ABILITIES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_ALT_ABILITIES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AA_CHAR_MAX_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::AA_CHAR_MAX;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AA_CHAR_MAX_REAL_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::AA_CHAR_MAX_REAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_BOOK_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_BOOK_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_COMBAT_ABILITIES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_COMBAT_ABILITIES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_COMBAT_ABILITY_TIMERS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_COMBAT_ABILITY_TIMERS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SKILLS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_SKILLS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_INNATE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_INNATE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CONCURRENT_SKILLS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CONCURRENT_SKILLS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_ITEM_SKILL_DMG_MOD_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_ITEM_SKILL_DMG_MOD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_EXPANSIONS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_EXPANSIONS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LDON_None_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::LDON_None;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LDON_DG_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::LDON_DG;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LDON_MIR_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::LDON_MIR;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LDON_MIS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::LDON_MIS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LDON_RUJ_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::LDON_RUJ;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LDON_TAK_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::LDON_TAK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_INV_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_INV_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BAG_SLOT_START_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::BAG_SLOT_START;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_BAG_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_BAG_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_WORN_ITEMS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_WORN_ITEMS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_SHAREDBANK_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_SHAREDBANK_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_BANK_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_BANK_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_GIVE_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_GIVE_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_TRADE_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_TRADE_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMTYPE_NORMAL_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::ITEMTYPE_NORMAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMTYPE_PACK_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::ITEMTYPE_PACK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ITEMTYPE_BOOK_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::ITEMTYPE_BOOK;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_AUG_SOCKETS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_AUG_SOCKETS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_BANDOLIER_ITEMS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_BANDOLIER_ITEMS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_BANDOLIER_SLOTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_BANDOLIER_SLOTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_FIRST_PERSON_CAM_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_FIRST_PERSON_CAM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_OVERHEAD_CAM_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_OVERHEAD_CAM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_CHASE_CAM_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_CHASE_CAM;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_USER_CAM_1_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_USER_CAM_1;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_USER_CAM_2_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_USER_CAM_2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_MAX_CAMERAS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_MAX_CAMERAS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TT_PBAE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::TT_PBAE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TT_TARGETED_AE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::TT_TARGETED_AE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TT_AE_PC_V2_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::TT_AE_PC_V2;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TT_DIRECTIONAL_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::TT_DIRECTIONAL;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TT_SPLASH_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::TT_SPLASH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MERC_ALT_ABILITY_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MERC_ALT_ABILITY_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_MAX_MERCENARIES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::EQ_MAX_MERCENARIES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_GROUP_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_GROUP_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_GROUP_ASSISTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_GROUP_ASSISTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_GROUP_MARK_TARGETS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_GROUP_MARK_TARGETS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RAID_NOTE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_RAID_NOTE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RAID_LOOTERS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_RAID_LOOTERS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RAID_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_RAID_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RAID_MOTD_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_RAID_MOTD;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RAID_ASSISTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_RAID_ASSISTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RAID_MARK_TARGETS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_RAID_MARK_TARGETS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RAID_MARKERS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_RAID_MARKERS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_MOVEMENT_STATS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_MOVEMENT_STATS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ZONE_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::ZONE_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_DEG_TO_HEADING_RATIO_get() {
  float jresult ;
  float result;
  
  result = (float)(float)eqlib::DEG_TO_HEADING_RATIO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EXP_TO_PCT_RATIO_get() {
  float jresult ;
  float result;
  
  result = (float)(float)eqlib::EXP_TO_PCT_RATIO;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_CLASSIC_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_ROK_get() {
  int jresult ;
  int result;
  
  result = (int)(1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_SOV_get() {
  int jresult ;
  int result;
  
  result = (int)(2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_SOL_get() {
  int jresult ;
  int result;
  
  result = (int)(3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_POP_get() {
  int jresult ;
  int result;
  
  result = (int)(4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_LOY_get() {
  int jresult ;
  int result;
  
  result = (int)(5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_LDON_get() {
  int jresult ;
  int result;
  
  result = (int)(6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_GOD_get() {
  int jresult ;
  int result;
  
  result = (int)(7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_OOW_get() {
  int jresult ;
  int result;
  
  result = (int)(8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_DON_get() {
  int jresult ;
  int result;
  
  result = (int)(9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_DODH_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_POR_get() {
  int jresult ;
  int result;
  
  result = (int)(11);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_TSS_get() {
  int jresult ;
  int result;
  
  result = (int)(12);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_TBS_get() {
  int jresult ;
  int result;
  
  result = (int)(13);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_SOF_get() {
  int jresult ;
  int result;
  
  result = (int)(14);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_SOD_get() {
  int jresult ;
  int result;
  
  result = (int)(15);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_UF_get() {
  int jresult ;
  int result;
  
  result = (int)(16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_HOT_get() {
  int jresult ;
  int result;
  
  result = (int)(17);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_VOA_get() {
  int jresult ;
  int result;
  
  result = (int)(18);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_ROF_get() {
  int jresult ;
  int result;
  
  result = (int)(19);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_COTF_get() {
  int jresult ;
  int result;
  
  result = (int)(20);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_TDS_get() {
  int jresult ;
  int result;
  
  result = (int)(21);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_TBM_get() {
  int jresult ;
  int result;
  
  result = (int)(22);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_EOK_get() {
  int jresult ;
  int result;
  
  result = (int)(23);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_ROS_get() {
  int jresult ;
  int result;
  
  result = (int)(24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_TBL_get() {
  int jresult ;
  int result;
  
  result = (int)(25);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_TOV_get() {
  int jresult ;
  int result;
  
  result = (int)(26);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_COV_get() {
  int jresult ;
  int result;
  
  result = (int)(27);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_TOL_get() {
  int jresult ;
  int result;
  
  result = (int)(28);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_NOS_get() {
  int jresult ;
  int result;
  
  result = (int)(29);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EXPANSION_LEVEL_LS_get() {
  int jresult ;
  int result;
  
  result = (int)(30);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CEQException() {
  void * jresult ;
  eqlib::CEQException *result = 0 ;
  
  result = (eqlib::CEQException *)new eqlib::CEQException();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CEQException(void * jarg1) {
  eqlib::CEQException *arg1 = (eqlib::CEQException *) 0 ;
  
  arg1 = (eqlib::CEQException *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CExceptionApplication() {
  void * jresult ;
  eqlib::CExceptionApplication *result = 0 ;
  
  result = (eqlib::CExceptionApplication *)new eqlib::CExceptionApplication();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CExceptionApplication(void * jarg1) {
  eqlib::CExceptionApplication *arg1 = (eqlib::CExceptionApplication *) 0 ;
  
  arg1 = (eqlib::CExceptionApplication *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CExceptionMemoryAllocation_size_set(void * jarg1, int jarg2) {
  eqlib::CExceptionMemoryAllocation *arg1 = (eqlib::CExceptionMemoryAllocation *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CExceptionMemoryAllocation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CExceptionMemoryAllocation_size_get(void * jarg1) {
  int jresult ;
  eqlib::CExceptionMemoryAllocation *arg1 = (eqlib::CExceptionMemoryAllocation *) 0 ;
  int result;
  
  arg1 = (eqlib::CExceptionMemoryAllocation *)jarg1; 
  result = (int) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CExceptionMemoryAllocation(int jarg1) {
  void * jresult ;
  int arg1 ;
  eqlib::CExceptionMemoryAllocation *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (eqlib::CExceptionMemoryAllocation *)new eqlib::CExceptionMemoryAllocation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CExceptionMemoryAllocation(void * jarg1) {
  eqlib::CExceptionMemoryAllocation *arg1 = (eqlib::CExceptionMemoryAllocation *) 0 ;
  
  arg1 = (eqlib::CExceptionMemoryAllocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDynamicArrayException_obj_set(void * jarg1, void * jarg2) {
  eqlib::CDynamicArrayException *arg1 = (eqlib::CDynamicArrayException *) 0 ;
  eqlib::CDynamicArrayBase *arg2 = (eqlib::CDynamicArrayBase *) 0 ;
  
  arg1 = (eqlib::CDynamicArrayException *)jarg1; 
  arg2 = (eqlib::CDynamicArrayBase *)jarg2; 
  if (arg1) (arg1)->obj = (eqlib::CDynamicArrayBase const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDynamicArrayException_obj_get(void * jarg1) {
  void * jresult ;
  eqlib::CDynamicArrayException *arg1 = (eqlib::CDynamicArrayException *) 0 ;
  eqlib::CDynamicArrayBase *result = 0 ;
  
  arg1 = (eqlib::CDynamicArrayException *)jarg1; 
  result = (eqlib::CDynamicArrayBase *) ((arg1)->obj);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDynamicArrayException(void * jarg1) {
  void * jresult ;
  eqlib::CDynamicArrayBase *arg1 = (eqlib::CDynamicArrayBase *) 0 ;
  eqlib::CDynamicArrayException *result = 0 ;
  
  arg1 = (eqlib::CDynamicArrayBase *)jarg1; 
  result = (eqlib::CDynamicArrayException *)new eqlib::CDynamicArrayException((eqlib::CDynamicArrayBase const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDynamicArrayException(void * jarg1) {
  eqlib::CDynamicArrayException *arg1 = (eqlib::CDynamicArrayException *) 0 ;
  
  arg1 = (eqlib::CDynamicArrayException *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDynamicArrayBase_GetLength(void * jarg1) {
  int jresult ;
  eqlib::CDynamicArrayBase *arg1 = (eqlib::CDynamicArrayBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CDynamicArrayBase *)jarg1; 
  result = (int)((eqlib::CDynamicArrayBase const *)arg1)->GetLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDynamicArrayBase_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDynamicArrayBase *arg1 = (eqlib::CDynamicArrayBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDynamicArrayBase *)jarg1; 
  result = (bool)((eqlib::CDynamicArrayBase const *)arg1)->IsEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDynamicArrayBase_empty(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDynamicArrayBase *arg1 = (eqlib::CDynamicArrayBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDynamicArrayBase *)jarg1; 
  result = (bool)((eqlib::CDynamicArrayBase const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDynamicArrayBase_size(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDynamicArrayBase *arg1 = (eqlib::CDynamicArrayBase *) 0 ;
  size_t result;
  
  arg1 = (eqlib::CDynamicArrayBase *)jarg1; 
  result = ((eqlib::CDynamicArrayBase const *)arg1)->size();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CDynamicArrayBase() {
  void * jresult ;
  eqlib::CDynamicArrayBase *result = 0 ;
  
  result = (eqlib::CDynamicArrayBase *)new eqlib::CDynamicArrayBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CDynamicArrayBase(void * jarg1) {
  eqlib::CDynamicArrayBase *arg1 = (eqlib::CDynamicArrayBase *) 0 ;
  
  arg1 = (eqlib::CDynamicArrayBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HashTableStatistics_TableSize_set(void * jarg1, int jarg2) {
  eqlib::HashTableStatistics *arg1 = (eqlib::HashTableStatistics *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::HashTableStatistics *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TableSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashTableStatistics_TableSize_get(void * jarg1) {
  int jresult ;
  eqlib::HashTableStatistics *arg1 = (eqlib::HashTableStatistics *) 0 ;
  int result;
  
  arg1 = (eqlib::HashTableStatistics *)jarg1; 
  result = (int) ((arg1)->TableSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HashTableStatistics_UsedSlots_set(void * jarg1, int jarg2) {
  eqlib::HashTableStatistics *arg1 = (eqlib::HashTableStatistics *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::HashTableStatistics *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UsedSlots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashTableStatistics_UsedSlots_get(void * jarg1) {
  int jresult ;
  eqlib::HashTableStatistics *arg1 = (eqlib::HashTableStatistics *) 0 ;
  int result;
  
  arg1 = (eqlib::HashTableStatistics *)jarg1; 
  result = (int) ((arg1)->UsedSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_HashTableStatistics_TotalEntries_set(void * jarg1, int jarg2) {
  eqlib::HashTableStatistics *arg1 = (eqlib::HashTableStatistics *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::HashTableStatistics *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalEntries = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashTableStatistics_TotalEntries_get(void * jarg1) {
  int jresult ;
  eqlib::HashTableStatistics *arg1 = (eqlib::HashTableStatistics *) 0 ;
  int result;
  
  arg1 = (eqlib::HashTableStatistics *)jarg1; 
  result = (int) ((arg1)->TotalEntries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_HashTableStatistics() {
  void * jresult ;
  eqlib::HashTableStatistics *result = 0 ;
  
  result = (eqlib::HashTableStatistics *)new eqlib::HashTableStatistics();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_HashTableStatistics(void * jarg1) {
  eqlib::HashTableStatistics *arg1 = (eqlib::HashTableStatistics *) 0 ;
  
  arg1 = (eqlib::HashTableStatistics *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResizePolicyNoShrink() {
  void * jresult ;
  eqlib::ResizePolicyNoShrink *result = 0 ;
  
  result = (eqlib::ResizePolicyNoShrink *)new eqlib::ResizePolicyNoShrink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ResizePolicyNoShrink(void * jarg1) {
  eqlib::ResizePolicyNoShrink *arg1 = (eqlib::ResizePolicyNoShrink *) 0 ;
  
  arg1 = (eqlib::ResizePolicyNoShrink *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResizePolicyNoResize() {
  void * jresult ;
  eqlib::ResizePolicyNoResize *result = 0 ;
  
  result = (eqlib::ResizePolicyNoResize *)new eqlib::ResizePolicyNoResize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ResizePolicyNoResize(void * jarg1) {
  eqlib::ResizePolicyNoResize *arg1 = (eqlib::ResizePolicyNoResize *) 0 ;
  
  arg1 = (eqlib::ResizePolicyNoResize *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IsPrime(int jarg1) {
  unsigned int jresult ;
  int arg1 ;
  bool result;
  
  arg1 = (int)jarg1; 
  result = (bool)eqlib::IsPrime(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NextPrime(int jarg1) {
  int jresult ;
  int arg1 ;
  int result;
  
  arg1 = (int)jarg1; 
  result = (int)eqlib::NextPrime(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VeBaseReferenceCount_IncrementRefCount(void * jarg1) {
  eqlib::VeBaseReferenceCount *arg1 = (eqlib::VeBaseReferenceCount *) 0 ;
  
  arg1 = (eqlib::VeBaseReferenceCount *)jarg1; 
  (arg1)->IncrementRefCount();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VeBaseReferenceCount_DecrementRefCount(void * jarg1) {
  eqlib::VeBaseReferenceCount *arg1 = (eqlib::VeBaseReferenceCount *) 0 ;
  
  arg1 = (eqlib::VeBaseReferenceCount *)jarg1; 
  (arg1)->DecrementRefCount();
}


SWIGEXPORT int SWIGSTDCALL CSharp_VeBaseReferenceCount_GetReferenceCount(void * jarg1) {
  int jresult ;
  eqlib::VeBaseReferenceCount *arg1 = (eqlib::VeBaseReferenceCount *) 0 ;
  int result;
  
  arg1 = (eqlib::VeBaseReferenceCount *)jarg1; 
  result = (int)((eqlib::VeBaseReferenceCount const *)arg1)->GetReferenceCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VeBaseReferenceCount_getUnknown(void * jarg1) {
  unsigned int jresult ;
  eqlib::VeBaseReferenceCount *arg1 = (eqlib::VeBaseReferenceCount *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::VeBaseReferenceCount *)jarg1; 
  result = (uint32_t)(arg1)->getUnknown();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringHash__SWIG_0(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)eqlib::StringHash((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringHash__SWIG_1(char * jarg1, int jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)eqlib::StringHash((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashType__SWIG_0(char * jarg1) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  result = (int)eqlib::HashType((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashType__SWIG_1(long long jarg1) {
  int jresult ;
  int64_t arg1 ;
  int result;
  
  arg1 = (int64_t)jarg1; 
  result = (int)eqlib::HashType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashType__SWIG_2(unsigned long long jarg1) {
  int jresult ;
  uint64_t arg1 ;
  int result;
  
  arg1 = (uint64_t)jarg1; 
  result = (int)eqlib::HashType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashType__SWIG_3(int jarg1) {
  int jresult ;
  int32_t arg1 ;
  int result;
  
  arg1 = (int32_t)jarg1; 
  result = (int)eqlib::HashType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashType__SWIG_4(unsigned int jarg1) {
  int jresult ;
  uint32_t arg1 ;
  int result;
  
  arg1 = (uint32_t)jarg1; 
  result = (int)eqlib::HashType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashType__SWIG_5(float jarg1) {
  int jresult ;
  float arg1 ;
  int result;
  
  arg1 = (float)jarg1; 
  result = (int)eqlib::HashType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_HashType__SWIG_6(double jarg1) {
  int jresult ;
  double arg1 ;
  int result;
  
  arg1 = (double)jarg1; 
  result = (int)eqlib::HashType(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharacterPropertyHash() {
  void * jresult ;
  eqlib::CharacterPropertyHash *result = 0 ;
  
  result = (eqlib::CharacterPropertyHash *)new eqlib::CharacterPropertyHash();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CharacterPropertyHash(void * jarg1) {
  eqlib::CharacterPropertyHash *arg1 = (eqlib::CharacterPropertyHash *) 0 ;
  
  arg1 = (eqlib::CharacterPropertyHash *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::zoneHeader_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_CharacterName_set(void * jarg1, char * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CharacterName, (const char *)arg2, eqlib::EQ_MAX_NAME-1);
      arg1->CharacterName[eqlib::EQ_MAX_NAME-1] = 0;
    } else {
      arg1->CharacterName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_zoneHeader_CharacterName_get(void * jarg1) {
  char * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char *)(char *) ((arg1)->CharacterName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ShortName_set(void * jarg1, char * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ShortName, (const char *)arg2, 128-1);
      arg1->ShortName[128-1] = 0;
    } else {
      arg1->ShortName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_zoneHeader_ShortName_get(void * jarg1) {
  char * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char *)(char *) ((arg1)->ShortName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_LongName_set(void * jarg1, char * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LongName, (const char *)arg2, 128-1);
      arg1->LongName[128-1] = 0;
    } else {
      arg1->LongName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_zoneHeader_LongName_get(void * jarg1) {
  char * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char *)(char *) ((arg1)->LongName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ZoneDesc_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char (*arg2)[30] = (char (*)[30]) (char (*)[30])0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char (*)[30])jarg2; 
  {
    char (*inp)[30] = (char (*)[30])(arg2);
    char (*dest)[30] = (char (*)[30])(arg1->ZoneDesc);
    size_t ii = 0;
    for (; ii < 5; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 30; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_ZoneDesc_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char (*result)[30] = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char (*)[30])(char (*)[30]) ((arg1)->ZoneDesc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FogOnOff_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FogOnOff = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_FogOnOff_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->FogOnOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FogRed_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->FogRed;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_FogRed_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->FogRed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FogGreen_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->FogGreen;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_FogGreen_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->FogGreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FogBlue_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->FogBlue;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_FogBlue_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->FogBlue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FogStart_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->FogStart;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_FogStart_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float *)(float *) ((arg1)->FogStart);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FogEnd_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float *arg2 = (float *) (float *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->FogEnd;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_FogEnd_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float *)(float *) ((arg1)->FogEnd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ZoneGravity_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ZoneGravity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_ZoneGravity_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->ZoneGravity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ZoneType_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  eqlib::EOutDoor arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (eqlib::EOutDoor)jarg2; 
  if (arg1) (arg1)->ZoneType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ZoneType_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  eqlib::EOutDoor result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (eqlib::EOutDoor) ((arg1)->ZoneType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_RainChance_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->RainChance;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_RainChance_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->RainChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_RainDuration_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->RainDuration;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_RainDuration_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->RainDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SnowChance_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->SnowChance;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_SnowChance_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->SnowChance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SnowDuration_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->SnowDuration;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_SnowDuration_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->SnowDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ZoneTimeZone_set(void * jarg1, char jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->ZoneTimeZone = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_zoneHeader_ZoneTimeZone_get(void * jarg1) {
  char jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char) ((arg1)->ZoneTimeZone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SkyEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SkyEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_SkyEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->SkyEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_WaterMidi_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WaterMidi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_WaterMidi_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->WaterMidi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_DayMidi_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DayMidi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_DayMidi_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->DayMidi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_NightMidi_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NightMidi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_NightMidi_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->NightMidi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ZoneExpModifier_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ZoneExpModifier = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_ZoneExpModifier_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->ZoneExpModifier);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SafeYLoc_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SafeYLoc = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_SafeYLoc_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->SafeYLoc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SafeXLoc_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SafeXLoc = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_SafeXLoc_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->SafeXLoc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SafeZLoc_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SafeZLoc = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_SafeZLoc_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->SafeZLoc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SafeHeading_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SafeHeading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_SafeHeading_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->SafeHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_Ceiling_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Ceiling = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_Ceiling_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->Ceiling);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_Floor_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Floor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_Floor_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->Floor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_MinClip_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MinClip = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_MinClip_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->MinClip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_MaxClip_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MaxClip = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_MaxClip_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->MaxClip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ForageLow_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ForageLow = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ForageLow_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ForageLow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ForageMedium_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ForageMedium = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ForageMedium_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ForageMedium);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ForageHigh_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ForageHigh = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ForageHigh_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ForageHigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FishingLow_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FishingLow = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FishingLow_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FishingLow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FishingMedium_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FishingMedium = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FishingMedium_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FishingMedium);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FishingHigh_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FishingHigh = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FishingHigh_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FishingHigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SkyLock_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkyLock = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_SkyLock_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->SkyLock);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_GraveyardTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->GraveyardTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_GraveyardTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint32_t) ((arg1)->GraveyardTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_Unknowns_set(void * jarg1, void * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Unknowns;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_Unknowns_get(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int *)(int *) ((arg1)->Unknowns);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDHour_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDHour = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDHour_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDHour);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDMinute_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDMinute = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDMinute_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDMinute);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDTick_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDTick = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDTick_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDTick);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnPlayerDeath_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDOnPlayerDeath = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnPlayerDeath_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDOnPlayerDeath);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnNPCDeath_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDOnNPCDeath = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnNPCDeath_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDOnNPCDeath);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDPlayerEnteringZone_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDPlayerEnteringZone = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDPlayerEnteringZone_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDPlayerEnteringZone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnZonePop_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDOnZonePop = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnZonePop_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDOnZonePop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDNPCLoot_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDNPCLoot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDNPCLoot_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDNPCLoot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDAdventureFailed_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDAdventureFailed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDAdventureFailed_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDAdventureFailed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_CanExploreTasks_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CanExploreTasks = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_CanExploreTasks_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->CanExploreTasks);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_NewEngineZone_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NewEngineZone = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_NewEngineZone_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->NewEngineZone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnFishing_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDOnFishing = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnFishing_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDOnFishing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnForage_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptIDOnForage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptIDOnForage_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptIDOnForage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SkyType_set(void * jarg1, char * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->SkyType, (const char *)arg2, 32-1);
      arg1->SkyType[32-1] = 0;
    } else {
      arg1->SkyType[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_zoneHeader_SkyType_get(void * jarg1) {
  char * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char *)(char *) ((arg1)->SkyType);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_WeatherType_set(void * jarg1, char * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->WeatherType, (const char *)arg2, 32-1);
      arg1->WeatherType[32-1] = 0;
    } else {
      arg1->WeatherType[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_zoneHeader_WeatherType_get(void * jarg1) {
  char * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char *)(char *) ((arg1)->WeatherType);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SkyTypeOverride_set(void * jarg1, char * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->SkyTypeOverride, (const char *)arg2, 32-1);
      arg1->SkyTypeOverride[32-1] = 0;
    } else {
      arg1->SkyTypeOverride[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_zoneHeader_SkyTypeOverride_get(void * jarg1) {
  char * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char *)(char *) ((arg1)->SkyTypeOverride);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_SkyLockOverride_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkyLockOverride = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_SkyLockOverride_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->SkyLockOverride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_WeatherTypeOverride_set(void * jarg1, char * jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->WeatherTypeOverride, (const char *)arg2, 32-1);
      arg1->WeatherTypeOverride[32-1] = 0;
    } else {
      arg1->WeatherTypeOverride[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_zoneHeader_WeatherTypeOverride_get(void * jarg1) {
  char * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (char *)(char *) ((arg1)->WeatherTypeOverride);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_WeatherChangeTime_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->WeatherChangeTime = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_WeatherChangeTime_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->WeatherChangeTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ClimateType_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ClimateType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_ClimateType_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->ClimateType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_NPCAgroMaxDist_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NPCAgroMaxDist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_NPCAgroMaxDist_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->NPCAgroMaxDist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FilterID_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FilterID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FilterID_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FilterID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ZoneID_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ZoneID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ZoneID_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ZoneID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ScriptNPCReceivedItem_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScriptNPCReceivedItem = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ScriptNPCReceivedItem_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ScriptNPCReceivedItem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bValidateZoneIns_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bValidateZoneIns = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bValidateZoneIns_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bValidateZoneIns);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_RespawnLocationGroupId_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RespawnLocationGroupId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_RespawnLocationGroupId_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->RespawnLocationGroupId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FallThroughWorldTeleportID_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FallThroughWorldTeleportID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FallThroughWorldTeleportID_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FallThroughWorldTeleportID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FallThroughWorldScriptID_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FallThroughWorldScriptID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FallThroughWorldScriptID_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FallThroughWorldScriptID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoBuffExpiration_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoBuffExpiration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoBuffExpiration_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoBuffExpiration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_LavaDamage_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LavaDamage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_LavaDamage_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->LavaDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_MinLavaDamage_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MinLavaDamage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_MinLavaDamage_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->MinLavaDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bDisallowManaStone_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisallowManaStone = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bDisallowManaStone_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bDisallowManaStone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoBind_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoBind = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoBind_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoBind);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoAttack_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoAttack = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoAttack_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoCallOfTheHero_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoCallOfTheHero = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoCallOfTheHero_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoCallOfTheHero);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoFlux_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoFlux = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoFlux_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoFlux);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoFear_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoFear = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoFear_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoFear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoEncumber_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoEncumber = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoEncumber_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoEncumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FastRegenHP_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FastRegenHP = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FastRegenHP_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FastRegenHP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FastRegenMana_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FastRegenMana = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FastRegenMana_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FastRegenMana);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FastRegenEndurance_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FastRegenEndurance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FastRegenEndurance_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FastRegenEndurance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_CanPlaceCampsite_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  eqlib::EPlace arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (eqlib::EPlace)jarg2; 
  if (arg1) (arg1)->CanPlaceCampsite = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_CanPlaceCampsite_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  eqlib::EPlace result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (eqlib::EPlace) ((arg1)->CanPlaceCampsite);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_CanPlaceGuildBanner_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  eqlib::EPlace arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (eqlib::EPlace)jarg2; 
  if (arg1) (arg1)->CanPlaceGuildBanner = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_CanPlaceGuildBanner_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  eqlib::EPlace result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (eqlib::EPlace) ((arg1)->CanPlaceGuildBanner);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FogDensity_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FogDensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_FogDensity_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->FogDensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bAdjustGamma_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAdjustGamma = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bAdjustGamma_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bAdjustGamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_TimeStringID_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TimeStringID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_TimeStringID_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->TimeStringID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoMercenaries_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoMercenaries = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoMercenaries_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoMercenaries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_FishingRelated_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FishingRelated = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_FishingRelated_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->FishingRelated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_ForageSpecial_set(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ForageSpecial = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_ForageSpecial_get(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int) ((arg1)->ForageSpecial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_bNoLevitate_set(void * jarg1, unsigned int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNoLevitate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_bNoLevitate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool) ((arg1)->bNoLevitate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_BloomIntensity_set(void * jarg1, float jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->BloomIntensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_zoneHeader_BloomIntensity_get(void * jarg1) {
  float jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  float result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (float) ((arg1)->BloomIntensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_IsIndoor(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool)(arg1)->IsIndoor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_IsOutdoor(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool)(arg1)->IsOutdoor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_IsBindable(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool)(arg1)->IsBindable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_zoneHeader_getter_OutDoor(void * jarg1) {
  void * jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  eqlib::EOutDoor *result = 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (eqlib::EOutDoor *) &(arg1)->getter_OutDoor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_zoneHeader_setter_OutDoor(void * jarg1, int jarg2) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  eqlib::EOutDoor *arg2 = 0 ;
  eqlib::EOutDoor temp2 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  temp2 = (eqlib::EOutDoor)jarg2; 
  arg2 = &temp2; 
  (arg1)->setter_OutDoor((eqlib::EOutDoor const &)*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_get_bNoPlayerLight(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool)((eqlib::zoneHeader const *)arg1)->get_bNoPlayerLight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_zoneHeader_get_GroupLvlExpRelated(void * jarg1) {
  int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  int result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (int)((eqlib::zoneHeader const *)arg1)->get_GroupLvlExpRelated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_zoneHeader_get_PrecipitationType(void * jarg1) {
  unsigned char jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (uint8_t)((eqlib::zoneHeader const *)arg1)->get_PrecipitationType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_zoneHeader_get_bAllowPVP(void * jarg1) {
  unsigned int jresult ;
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  bool result;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  result = (bool)((eqlib::zoneHeader const *)arg1)->get_bAllowPVP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_zoneHeader() {
  void * jresult ;
  eqlib::zoneHeader *result = 0 ;
  
  result = (eqlib::zoneHeader *)new eqlib::zoneHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_zoneHeader(void * jarg1) {
  eqlib::zoneHeader *arg1 = (eqlib::zoneHeader *) 0 ;
  
  arg1 = (eqlib::zoneHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeTargetTracker_CastSpell(void * jarg1, void * jarg2) {
  int jresult ;
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  eqlib::CVector3 *arg2 = 0 ;
  int result;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 const & is null", 0);
    return 0;
  } 
  result = (int)(arg1)->CastSpell((eqlib::CVector3 const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeTargetTracker_slot_set(void * jarg1, int jarg2) {
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->slot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeTargetTracker_slot_get(void * jarg1) {
  int jresult ;
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  int result;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  result = (int) ((arg1)->slot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeTargetTracker_spell_set(void * jarg1, void * jarg2) {
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  eqlib::PSPELL arg2 = (eqlib::PSPELL) 0 ;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  arg2 = (eqlib::PSPELL)jarg2; 
  if (arg1) (arg1)->spell = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeTargetTracker_spell_get(void * jarg1) {
  void * jresult ;
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  eqlib::PSPELL result;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  result = (eqlib::PSPELL) ((arg1)->spell);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeTargetTracker_itemLocation_set(void * jarg1, void * jarg2) {
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  eqlib::ItemGlobalIndex *arg2 = (eqlib::ItemGlobalIndex *) 0 ;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  arg2 = (eqlib::ItemGlobalIndex *)jarg2; 
  if (arg1) (arg1)->itemLocation = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FreeTargetTracker_itemLocation_get(void * jarg1) {
  void * jresult ;
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  eqlib::ItemGlobalIndex *result = 0 ;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  result = (eqlib::ItemGlobalIndex *)& ((arg1)->itemLocation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeTargetTracker_itemSpellType_set(void * jarg1, int jarg2) {
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  eqlib::ItemSpellTypes arg2 ;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  arg2 = (eqlib::ItemSpellTypes)jarg2; 
  if (arg1) (arg1)->itemSpellType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FreeTargetTracker_itemSpellType_get(void * jarg1) {
  int jresult ;
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  eqlib::ItemSpellTypes result;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  result = (eqlib::ItemSpellTypes) ((arg1)->itemSpellType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeTargetTracker_rangeSquared_set(void * jarg1, float jarg2) {
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rangeSquared = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_FreeTargetTracker_rangeSquared_get(void * jarg1) {
  float jresult ;
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  float result;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  result = (float) ((arg1)->rangeSquared);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FreeTargetTracker_cursorVisible_set(void * jarg1, unsigned int jarg2) {
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cursorVisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_FreeTargetTracker_cursorVisible_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  bool result;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  result = (bool) ((arg1)->cursorVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FreeTargetTracker() {
  void * jresult ;
  eqlib::FreeTargetTracker *result = 0 ;
  
  result = (eqlib::FreeTargetTracker *)new eqlib::FreeTargetTracker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FreeTargetTracker(void * jarg1) {
  eqlib::FreeTargetTracker *arg1 = (eqlib::FreeTargetTracker *) 0 ;
  
  arg1 = (eqlib::FreeTargetTracker *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_DamagedID_set(void * jarg1, unsigned short jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->DamagedID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQSuccessfulHit_DamagedID_get(void * jarg1) {
  unsigned short jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  uint16_t result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (uint16_t) ((arg1)->DamagedID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_AttackerID_set(void * jarg1, unsigned short jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->AttackerID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQSuccessfulHit_AttackerID_get(void * jarg1) {
  unsigned short jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  uint16_t result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (uint16_t) ((arg1)->AttackerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_Skill_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Skill = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSuccessfulHit_Skill_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (uint8_t) ((arg1)->Skill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_SpellID_set(void * jarg1, int jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSuccessfulHit_SpellID_get(void * jarg1) {
  int jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (int) ((arg1)->SpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_DamageCaused_set(void * jarg1, int jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DamageCaused = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSuccessfulHit_DamageCaused_get(void * jarg1) {
  int jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (int) ((arg1)->DamageCaused);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_Force_set(void * jarg1, float jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Force = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSuccessfulHit_Force_get(void * jarg1) {
  float jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (float) ((arg1)->Force);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_HitHeading_set(void * jarg1, float jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HitHeading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSuccessfulHit_HitHeading_get(void * jarg1) {
  float jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (float) ((arg1)->HitHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_HitPitch_set(void * jarg1, float jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->HitPitch = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSuccessfulHit_HitPitch_get(void * jarg1) {
  float jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (float) ((arg1)->HitPitch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_bSecondary_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSecondary = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSuccessfulHit_bSecondary_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (bool) ((arg1)->bSecondary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHit_Unknown0x1A_set(void * jarg1, void * jarg2) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->Unknown0x1A;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSuccessfulHit_Unknown0x1A_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->Unknown0x1A);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQSuccessfulHit() {
  void * jresult ;
  eqlib::EQSuccessfulHit *result = 0 ;
  
  result = (eqlib::EQSuccessfulHit *)new eqlib::EQSuccessfulHit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQSuccessfulHit(void * jarg1) {
  eqlib::EQSuccessfulHit *arg1 = (eqlib::EQSuccessfulHit *) 0 ;
  
  arg1 = (eqlib::EQSuccessfulHit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHeal_HealedID_set(void * jarg1, unsigned short jarg2) {
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->HealedID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQSuccessfulHeal_HealedID_get(void * jarg1) {
  unsigned short jresult ;
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  uint16_t result;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  result = (uint16_t) ((arg1)->HealedID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHeal_HealerID_set(void * jarg1, unsigned short jarg2) {
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->HealerID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQSuccessfulHeal_HealerID_get(void * jarg1) {
  unsigned short jresult ;
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  uint16_t result;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  result = (uint16_t) ((arg1)->HealerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHeal_SpellID_set(void * jarg1, int jarg2) {
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSuccessfulHeal_SpellID_get(void * jarg1) {
  int jresult ;
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  result = (int) ((arg1)->SpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHeal_ActualHeal_set(void * jarg1, int jarg2) {
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ActualHeal = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSuccessfulHeal_ActualHeal_get(void * jarg1) {
  int jresult ;
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  result = (int) ((arg1)->ActualHeal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHeal_TotalHeal_set(void * jarg1, int jarg2) {
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalHeal = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSuccessfulHeal_TotalHeal_get(void * jarg1) {
  int jresult ;
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  result = (int) ((arg1)->TotalHeal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSuccessfulHeal_EffectBitmask_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->EffectBitmask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSuccessfulHeal_EffectBitmask_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  result = (uint32_t) ((arg1)->EffectBitmask);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQSuccessfulHeal() {
  void * jresult ;
  eqlib::EQSuccessfulHeal *result = 0 ;
  
  result = (eqlib::EQSuccessfulHeal *)new eqlib::EQSuccessfulHeal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQSuccessfulHeal(void * jarg1) {
  eqlib::EQSuccessfulHeal *arg1 = (eqlib::EQSuccessfulHeal *) 0 ;
  
  arg1 = (eqlib::EQSuccessfulHeal *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_MOUSE_BUTTONS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_MOUSE_BUTTONS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQCameraOptions_distance_set(void * jarg1, float jarg2) {
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQCameraOptions_distance_get(void * jarg1) {
  float jresult ;
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float result;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  result = (float) ((arg1)->distance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQCameraOptions_dirHeading_set(void * jarg1, float jarg2) {
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->dirHeading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQCameraOptions_dirHeading_get(void * jarg1) {
  float jresult ;
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float result;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  result = (float) ((arg1)->dirHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQCameraOptions_height_set(void * jarg1, float jarg2) {
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQCameraOptions_height_get(void * jarg1) {
  float jresult ;
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float result;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  result = (float) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQCameraOptions_heading_set(void * jarg1, float jarg2) {
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQCameraOptions_heading_get(void * jarg1) {
  float jresult ;
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float result;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  result = (float) ((arg1)->heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQCameraOptions_pitch_set(void * jarg1, float jarg2) {
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->pitch = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQCameraOptions_pitch_get(void * jarg1) {
  float jresult ;
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float result;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  result = (float) ((arg1)->pitch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQCameraOptions_zoom_set(void * jarg1, float jarg2) {
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->zoom = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQCameraOptions_zoom_get(void * jarg1) {
  float jresult ;
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  float result;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  result = (float) ((arg1)->zoom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQCameraOptions_changeable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->changeable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQCameraOptions_changeable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  result = (bool) ((arg1)->changeable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQCameraOptions() {
  void * jresult ;
  eqlib::EQCameraOptions *result = 0 ;
  
  result = (eqlib::EQCameraOptions *)new eqlib::EQCameraOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQCameraOptions(void * jarg1) {
  eqlib::EQCameraOptions *arg1 = (eqlib::EQCameraOptions *) 0 ;
  
  arg1 = (eqlib::EQCameraOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_gamma_set(void * jarg1, float jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->gamma = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGameOptions_gamma_get(void * jarg1) {
  float jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (float) ((arg1)->gamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_gammaScale_set(void * jarg1, float jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->gammaScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGameOptions_gammaScale_get(void * jarg1) {
  float jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (float) ((arg1)->gammaScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_anonymous_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->anonymous = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_anonymous_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->anonymous);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_autoHelp_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->autoHelp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_autoHelp_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->autoHelp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_trade_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->trade = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_trade_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->trade);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_guildInvites_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->guildInvites = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_guildInvites_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->guildInvites);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_sky_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sky = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_sky_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->sky);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_lod_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_lod_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->lod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_videoMode_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->videoMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_videoMode_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->videoMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_sameRes_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sameRes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_sameRes_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->sameRes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_pcNames_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pcNames = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_pcNames_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->pcNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_npcNames_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->npcNames = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_npcNames_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->npcNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_petNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->petNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_petNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->petNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_mercNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mercNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_mercNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->mercNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_targetHealth_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->targetHealth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_targetHealth_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->targetHealth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_petOwnerNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->petOwnerNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_petOwnerNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->petOwnerNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_mercOwnerNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mercOwnerNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_mercOwnerNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->mercOwnerNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_itemPalcementHideUI_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->itemPalcementHideUI = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_itemPalcementHideUI_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->itemPalcementHideUI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_itemPlacementDefaultModeCursor_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->itemPlacementDefaultModeCursor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_itemPlacementDefaultModeCursor_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->itemPlacementDefaultModeCursor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_randomCharacterSelectMusic_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->randomCharacterSelectMusic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_randomCharacterSelectMusic_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->randomCharacterSelectMusic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_music_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->music = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_music_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->music);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_sound_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sound = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_sound_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->sound);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_realism_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->realism = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_realism_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->realism);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_xMouseSensitivity_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->xMouseSensitivity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_xMouseSensitivity_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->xMouseSensitivity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_yMouseSensitivity_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->yMouseSensitivity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_yMouseSensitivity_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->yMouseSensitivity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_inverseMouse_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->inverseMouse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_inverseMouse_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->inverseMouse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_lookSpring_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lookSpring = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_lookSpring_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->lookSpring);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_mouseActive_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mouseActive = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_mouseActive_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->mouseActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_destroy_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->destroy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_destroy_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->destroy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_mipMapping_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mipMapping = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_mipMapping_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->mipMapping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_filterOff_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->filterOff = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_filterOff_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->filterOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_clipPlane_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->clipPlane = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_clipPlane_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->clipPlane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_keyboard_set(void * jarg1, void * jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->keyboard;
    for (ii = 0; ii < (size_t)50; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGameOptions_keyboard_get(void * jarg1) {
  void * jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int *)(int *) ((arg1)->keyboard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_cameras_set(void * jarg1, void * jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  eqlib::EQCameraOptions *arg2 = (eqlib::EQCameraOptions *) (eqlib::EQCameraOptions *)0 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (eqlib::EQCameraOptions *)jarg2; 
  {
    size_t ii;
    eqlib::EQCameraOptions *b = (eqlib::EQCameraOptions *) arg1->cameras;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((eqlib::EQCameraOptions *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGameOptions_cameras_get(void * jarg1) {
  void * jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  eqlib::EQCameraOptions *result = 0 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (eqlib::EQCameraOptions *)(eqlib::EQCameraOptions *) ((arg1)->cameras);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_aaNoConfirm_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->aaNoConfirm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_aaNoConfirm_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->aaNoConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_pointMerchantNoConfirm_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pointMerchantNoConfirm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_pointMerchantNoConfirm_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->pointMerchantNoConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_mouseWheelZoom_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mouseWheelZoom = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_mouseWheelZoom_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->mouseWheelZoom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_mouseTurnZoom_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mouseTurnZoom = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_mouseTurnZoom_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->mouseTurnZoom);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_bTargetIndicatorVisible_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bTargetIndicatorVisible = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_bTargetIndicatorVisible_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->bTargetIndicatorVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_maxFPS_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxFPS = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_maxFPS_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->maxFPS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_maxBGFPS_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->maxBGFPS = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_maxBGFPS_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->maxBGFPS);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_nLODBias_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nLODBias = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_nLODBias_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->nLODBias);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_lootAllConfirm_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->lootAllConfirm = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions_lootAllConfirm_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (int) ((arg1)->lootAllConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_dismissMercenaryConfirm_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dismissMercenaryConfirm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_dismissMercenaryConfirm_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->dismissMercenaryConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_raidInviteConfirm_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->raidInviteConfirm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_raidInviteConfirm_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->raidInviteConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_offlineModeConfirm_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->offlineModeConfirm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_offlineModeConfirm_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->offlineModeConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_bagSellConfirm_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bagSellConfirm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_bagSellConfirm_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->bagSellConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_bagSellContentsConfirm_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bagSellContentsConfirm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_bagSellContentsConfirm_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->bagSellContentsConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_tributeAutoOff_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->tributeAutoOff = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_tributeAutoOff_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->tributeAutoOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_trophyTributeAutoOff_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->trophyTributeAutoOff = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_trophyTributeAutoOff_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->trophyTributeAutoOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_parcelLimitLogoutConfirm_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->parcelLimitLogoutConfirm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_parcelLimitLogoutConfirm_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->parcelLimitLogoutConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions_saveSetConfirm_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->saveSetConfirm = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions_saveSetConfirm_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  result = (bool) ((arg1)->saveSetConfirm);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQGameOptions() {
  void * jresult ;
  eqlib::EQGameOptions *result = 0 ;
  
  result = (eqlib::EQGameOptions *)new eqlib::EQGameOptions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQGameOptions(void * jarg1) {
  eqlib::EQGameOptions *arg1 = (eqlib::EQGameOptions *) 0 ;
  
  arg1 = (eqlib::EQGameOptions *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions2_UserFogScaler_set(void * jarg1, float jarg2) {
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->UserFogScaler = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGameOptions2_UserFogScaler_get(void * jarg1) {
  float jresult ;
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  result = (float) ((arg1)->UserFogScaler);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions2_VoiceRecOn_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->VoiceRecOn = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions2_VoiceRecOn_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  result = (int) ((arg1)->VoiceRecOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions2_VRDelay_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->VRDelay = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions2_VRDelay_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  result = (int) ((arg1)->VRDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions2_noSafeDrop_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->noSafeDrop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions2_noSafeDrop_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  result = (bool) ((arg1)->noSafeDrop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions2_lootNoDrop_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lootNoDrop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGameOptions2_lootNoDrop_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  result = (bool) ((arg1)->lootNoDrop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions2_ReverseSoundChannels_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ReverseSoundChannels = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions2_ReverseSoundChannels_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  result = (int) ((arg1)->ReverseSoundChannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGameOptions2_temp10_set(void * jarg1, int jarg2) {
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->temp10 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGameOptions2_temp10_get(void * jarg1) {
  int jresult ;
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  result = (int) ((arg1)->temp10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQGameOptions2() {
  void * jresult ;
  eqlib::EQGameOptions2 *result = 0 ;
  
  result = (eqlib::EQGameOptions2 *)new eqlib::EQGameOptions2();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQGameOptions2(void * jarg1) {
  eqlib::EQGameOptions2 *arg1 = (eqlib::EQGameOptions2 *) 0 ;
  
  arg1 = (eqlib::EQGameOptions2 *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::EverQuestinfo_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Wnd_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Wnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_Wnd_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  HWND result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result =  ((arg1)->Wnd);
  jresult = new HWND(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_hInst_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  HINSTANCE arg2 ;
  HINSTANCE *argp2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  argp2 = (HINSTANCE *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HINSTANCE", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->hInst = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_hInst_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  HINSTANCE result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result =  ((arg1)->hInst);
  jresult = new HINSTANCE(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Render_MinX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Render_MinX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Render_MinX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Render_MinX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Render_MinY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Render_MinY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Render_MinY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Render_MinY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Render_MaxX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Render_MaxX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Render_MaxX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Render_MaxX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Render_MaxY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Render_MaxY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Render_MaxY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Render_MaxY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Render_XScale_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Render_XScale = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Render_XScale_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Render_XScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Render_YScale_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Render_YScale = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Render_YScale_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Render_YScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Render_WidthScale_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Render_WidthScale = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Render_WidthScale_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Render_WidthScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Render_HeightScale_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Render_HeightScale = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Render_HeightScale_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Render_HeightScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ReadyEnterWorld_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ReadyEnterWorld = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_ReadyEnterWorld_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->ReadyEnterWorld);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_InsideDoMainWhileLoop_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->InsideDoMainWhileLoop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_InsideDoMainWhileLoop_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->InsideDoMainWhileLoop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Hidden_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Hidden = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Hidden_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Hidden);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DisplayFlags_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DisplayFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_DisplayFlags_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->DisplayFlags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Command_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->Command = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_Command_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->Command);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Unknown0x0003c_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Unknown0x0003c = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_Unknown0x0003c_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->Unknown0x0003c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ScreenXRes_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScreenXRes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_ScreenXRes_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->ScreenXRes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ScreenYRes_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ScreenYRes = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_ScreenYRes_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->ScreenYRes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_WindowXOffset_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WindowXOffset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_WindowXOffset_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->WindowXOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_WindowYOffset_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WindowYOffset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_WindowYOffset_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->WindowYOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_FullscreenMode_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FullscreenMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_FullscreenMode_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->FullscreenMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_KeyboardMode_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::eKeyboardMode arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::eKeyboardMode)jarg2; 
  if (arg1) (arg1)->KeyboardMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_KeyboardMode_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::eKeyboardMode result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::eKeyboardMode) ((arg1)->KeyboardMode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RunMode_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->RunMode = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_RunMode_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->RunMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MoveCollisions_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MoveCollisions = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_MoveCollisions_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->MoveCollisions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DisplayCollVolume_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->DisplayCollVolume = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_DisplayCollVolume_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->DisplayCollVolume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseCntrl_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MouseCntrl = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_MouseCntrl_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->MouseCntrl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseActive_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MouseActive = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_MouseActive_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->MouseActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ForceCrouch_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ForceCrouch = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_ForceCrouch_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->ForceCrouch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ForceCrouchTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ForceCrouchTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ForceCrouchTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->ForceCrouchTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Friction_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Friction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_Friction_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->Friction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_AFriction_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AFriction = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_AFriction_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->AFriction);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MouseX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MouseX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MouseX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MouseY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MouseY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MouseY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseZ_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MouseZ = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MouseZ_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MouseZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastMX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LastMX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_LastMX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->LastMX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastMY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LastMY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_LastMY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->LastMY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseInClientRect_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->MouseInClientRect = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_MouseInClientRect_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->MouseInClientRect);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MousePointerSpeedMod_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MousePointerSpeedMod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MousePointerSpeedMod_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MousePointerSpeedMod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ServerFilter_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ServerFilter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ServerFilter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->ServerFilter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_IsTrader_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IsTrader = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_IsTrader_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->IsTrader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_CurrentChan_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->CurrentChan = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_CurrentChan_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->CurrentChan);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_CurrentLang_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrentLang = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_CurrentLang_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->CurrentLang);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_TellTarget_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->TellTarget, (const char *)arg2, 64-1);
      arg1->TellTarget[64-1] = 0;
    } else {
      arg1->TellTarget[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_TellTarget_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->TellTarget);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastMinute_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastMinute = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LastMinute_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LastMinute);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastLocal_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastLocal = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LastLocal_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LastLocal);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastControlled_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastControlled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LastControlled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LastControlled);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MInverse_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MInverse = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_MInverse_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->MInverse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Unknown0x000ed_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Unknown0x000ed = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_Unknown0x000ed_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->Unknown0x000ed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseLook_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MouseLook = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_MouseLook_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->MouseLook);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bDefaultMouseLook_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDefaultMouseLook = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bDefaultMouseLook_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bDefaultMouseLook);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Strafe_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Strafe = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_Strafe_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->Strafe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bNetstat_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNetstat = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bNetstat_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bNetstat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ModInventory_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ModInventory = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_ModInventory_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->ModInventory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastHitter_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastHitter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LastHitter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LastHitter);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Harmless_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Harmless = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_Harmless_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->Harmless);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Silenced_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Silenced = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_Silenced_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->Silenced);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_JumpTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->JumpTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_JumpTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->JumpTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_EventJump_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->EventJump = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_EventJump_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->EventJump);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastJump_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastJump = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LastJump_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LastJump);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_FrameTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->FrameTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_FrameTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->FrameTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_AutoRun_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AutoRun = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_AutoRun_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->AutoRun);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_PoisonTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->PoisonTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_PoisonTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->PoisonTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_PoisonGI_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->PoisonGI = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_PoisonGI_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int32_t) ((arg1)->PoisonGI);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OldX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OldX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OldX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OldX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OldY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OldY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OldY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OldY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OldMouseButtons_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->OldMouseButtons;
    for (ii = 0; ii < (size_t)eqlib::NUM_MOUSE_BUTTONS; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_OldMouseButtons_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->OldMouseButtons);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseButtons_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->MouseButtons;
    for (ii = 0; ii < (size_t)eqlib::NUM_MOUSE_BUTTONS; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_MouseButtons_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->MouseButtons);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsMouseRightHanded_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsMouseRightHanded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsMouseRightHanded_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsMouseRightHanded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_EncumberStatus_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EncumberStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_EncumberStatus_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->EncumberStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_PendingCharState_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PendingCharState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_PendingCharState_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->PendingCharState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_PendingCharacterName_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->PendingCharacterName, (const char *)arg2, 64-1);
      arg1->PendingCharacterName[64-1] = 0;
    } else {
      arg1->PendingCharacterName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_PendingCharacterName_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->PendingCharacterName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_TutorialMode_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TutorialMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_TutorialMode_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->TutorialMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RMouseSecond_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RMouseSecond = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_RMouseSecond_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->RMouseSecond);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LMouseSecond_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LMouseSecond = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_LMouseSecond_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->LMouseSecond);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RMouseDown_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->RMouseDown = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_RMouseDown_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->RMouseDown);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LMouseDown_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LMouseDown = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LMouseDown_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LMouseDown);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Snooper_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Snooper, (const char *)arg2, 64-1);
      arg1->Snooper[64-1] = 0;
    } else {
      arg1->Snooper[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_Snooper_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->Snooper);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DuelTarget_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DuelTarget = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_DuelTarget_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->DuelTarget);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DuelMe_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DuelMe = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_DuelMe_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->DuelMe);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DuelOn_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->DuelOn = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_DuelOn_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->DuelOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_AutoHelp_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AutoHelp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_AutoHelp_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->AutoHelp);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OldMouseLook_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->OldMouseLook = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_OldMouseLook_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->OldMouseLook);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastLocalUpdate_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastLocalUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LastLocalUpdate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LastLocalUpdate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastControlledUpdate_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastControlledUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LastControlledUpdate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LastControlledUpdate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DataRate_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->DataRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_DataRate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->DataRate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SavedPC_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SavedPC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_SavedPC_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->SavedPC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_InfraRed_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->InfraRed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_InfraRed_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->InfraRed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_InfraGreen_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->InfraGreen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_InfraGreen_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->InfraGreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_InfraBlue_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->InfraBlue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_InfraBlue_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->InfraBlue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UltraRed_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UltraRed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_UltraRed_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->UltraRed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UltraGreen_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UltraGreen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_UltraGreen_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->UltraGreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UltraBlue_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UltraBlue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_UltraBlue_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->UltraBlue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_globalOffset_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->globalOffset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_globalOffset_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->globalOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_IOLines_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IOLines = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_IOLines_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->IOLines);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_IOLineSpacing_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->IOLineSpacing = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_IOLineSpacing_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->IOLineSpacing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ObjectTag_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ObjectTag, (const char *)arg2, 20-1);
      arg1->ObjectTag[20-1] = 0;
    } else {
      arg1->ObjectTag[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_ObjectTag_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->ObjectTag);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_NumObjects_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NumObjects = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_NumObjects_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->NumObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_NumLights_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NumLights = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_NumLights_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->NumLights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DecrTime_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->DecrTime;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_DecrTime_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->DecrTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DecrMsg_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->DecrMsg;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_DecrMsg_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->DecrMsg);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DecrIndex_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DecrIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_DecrIndex_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->DecrIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_AffectsOn_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AffectsOn = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_AffectsOn_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->AffectsOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_InspectMode_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->InspectMode = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_InspectMode_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->InspectMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UpMouseAnim_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->UpMouseAnim = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_UpMouseAnim_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->UpMouseAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ExitCounter_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ExitCounter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ExitCounter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->ExitCounter);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ExitStart_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ExitStart = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ExitStart_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->ExitStart);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ForcedExitCounter_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ForcedExitCounter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ForcedExitCounter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->ForcedExitCounter);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OfflineModeRequestTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->OfflineModeRequestTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_OfflineModeRequestTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->OfflineModeRequestTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SwimJump_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SwimJump = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_SwimJump_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->SwimJump);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DisplayCamp_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->DisplayCamp = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_DisplayCamp_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->DisplayCamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_PolysOff_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PolysOff = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_PolysOff_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->PolysOff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_CampY_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CampY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_CampY_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->CampY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_CampX_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CampX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_CampX_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->CampX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_CampZ_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CampZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_CampZ_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->CampZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Hits_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Hits = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Hits_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Hits);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Bbandage_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Bbandage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Bbandage_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Bbandage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_BackSpace_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->BackSpace = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_BackSpace_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->BackSpace);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_StartBandage_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StartBandage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_StartBandage_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->StartBandage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyZ_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyZ = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyZ_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_TargetX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TargetX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_TargetX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->TargetX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_TargetY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TargetY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_TargetY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->TargetY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_TargetZ_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TargetZ = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_TargetZ_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->TargetZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ZoneInfo_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::zoneHeader *arg2 = (eqlib::zoneHeader *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::zoneHeader *)jarg2; 
  if (arg1) (arg1)->ZoneInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_ZoneInfo_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::zoneHeader *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::zoneHeader *)& ((arg1)->ZoneInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ZDefined_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ZDefined = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ZDefined_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->ZDefined);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_TrackTimer_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TrackTimer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_TrackTimer_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->TrackTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_StartTrack_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StartTrack = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_StartTrack_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->StartTrack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_TrackPlayers_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TrackPlayers = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_TrackPlayers_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->TrackPlayers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bTrackMercs_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTrackMercs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bTrackMercs_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bTrackMercs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bTrackPets_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTrackPets = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bTrackPets_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bTrackPets);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iTrackSortType_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iTrackSortType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iTrackSortType_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iTrackSortType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iTrackFilterType_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iTrackFilterType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iTrackFilterType_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iTrackFilterType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MouseTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_MouseTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->MouseTimer);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SoundUpdate_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SoundUpdate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_SoundUpdate_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->SoundUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MouseOn_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->MouseOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_MouseOn_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->MouseOn);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UsingSkill_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UsingSkill = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_UsingSkill_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->UsingSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UsingSkillTarget_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->UsingSkillTarget = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_UsingSkillTarget_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (void *) ((arg1)->UsingSkillTarget);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LimboMoney_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->LimboMoney;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_LimboMoney_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->LimboMoney);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ClickThroughMask_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ClickThroughMask = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_ClickThroughMask_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->ClickThroughMask);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ShowSpellDescriptions_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ShowSpellDescriptions = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_ShowSpellDescriptions_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->ShowSpellDescriptions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ReceivedWorldObjects_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ReceivedWorldObjects = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ReceivedWorldObjects_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->ReceivedWorldObjects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ScreenCapture_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ScreenCapture = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ScreenCapture_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->ScreenCapture);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ScreenShare_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ScreenShare = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ScreenShare_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->ScreenShare);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SavedViewPitch_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SavedViewPitch = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_SavedViewPitch_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->SavedViewPitch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SendPcReceived_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SendPcReceived = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_SendPcReceived_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->SendPcReceived);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_WeatherReceived_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WeatherReceived = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_WeatherReceived_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->WeatherReceived);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_PixelInit_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PixelInit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_PixelInit_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->PixelInit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedShift_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedShift = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedShift_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedShift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedControl_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedControl_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedAlt_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedAlt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedAlt_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedAlt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedLShift_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedLShift = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedLShift_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedLShift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedLControl_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedLControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedLControl_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedLControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedLAlt_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedLAlt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedLAlt_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedLAlt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedRShift_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedRShift = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedRShift_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedRShift);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedRControl_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedRControl = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedRControl_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedRControl);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedRAlt_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsPressedRAlt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsPressedRAlt_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsPressedRAlt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Currkeypress_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Currkeypress = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Currkeypress_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Currkeypress);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Lastkeypress_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Lastkeypress = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Lastkeypress_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Lastkeypress);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RateUp_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RateUp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_RateUp_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->RateUp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RateDown_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RateDown = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_RateDown_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->RateDown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Rateforward_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Rateforward = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Rateforward_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Rateforward);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Rateback_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Rateback = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Rateback_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Rateback);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RateLeft_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RateLeft = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_RateLeft_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->RateLeft);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RateRight_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RateRight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_RateRight_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->RateRight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RaceWar_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RaceWar = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_RaceWar_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->RaceWar);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Ruleset_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Ruleset = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Ruleset_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Ruleset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bRpServer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRpServer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bRpServer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bRpServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bAcceleratedServer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAcceleratedServer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bAcceleratedServer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bAcceleratedServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bProgressionServer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bProgressionServer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bProgressionServer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bProgressionServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ProgressionOpenExpansions_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ProgressionOpenExpansions = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_ProgressionOpenExpansions_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->ProgressionOpenExpansions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iIsBetaServer_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iIsBetaServer = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iIsBetaServer_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iIsBetaServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsTestServer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsTestServer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsTestServer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsTestServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bUseMailSystem_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseMailSystem = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bUseMailSystem_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bUseMailSystem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsEscapeServer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsEscapeServer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsEscapeServer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsEscapeServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIsTutorialEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsTutorialEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIsTutorialEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIsTutorialEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bCanCreateHeroicCharacter_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCanCreateHeroicCharacter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bCanCreateHeroicCharacter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bCanCreateHeroicCharacter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Heroic85Slots_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Heroic85Slots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Heroic85Slots_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Heroic85Slots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bNameGen_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bNameGen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bNameGen_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bNameGen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bGibberish_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bGibberish = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bGibberish_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bGibberish);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Locale_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Locale = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Locale_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Locale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UpdateControlled_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->UpdateControlled = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_UpdateControlled_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->UpdateControlled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UpdateLocal_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->UpdateLocal = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_UpdateLocal_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->UpdateLocal);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_EnterZone_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->EnterZone = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_EnterZone_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->EnterZone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ExitGame_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ExitGame = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_ExitGame_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->ExitGame);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UseVoiceMacros_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UseVoiceMacros = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_UseVoiceMacros_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->UseVoiceMacros);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DeltaX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DeltaX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_DeltaX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->DeltaX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DeltaY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DeltaY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_DeltaY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->DeltaY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OldRate1_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OldRate1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OldRate1_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OldRate1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OldRate2_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OldRate2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OldRate2_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OldRate2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_StrafeRate_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->StrafeRate = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_StrafeRate_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->StrafeRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SaveIndex_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SaveIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_SaveIndex_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->SaveIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MoveDownSpeed_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->MoveDownSpeed = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_MoveDownSpeed_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->MoveDownSpeed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Motd_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Motd, (const char *)arg2, 1024-1);
      arg1->Motd[1024-1] = 0;
    } else {
      arg1->Motd[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_Motd_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->Motd);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Motd2_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Motd2, (const char *)arg2, 1024-1);
      arg1->Motd2[1024-1] = 0;
    } else {
      arg1->Motd2[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_Motd2_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->Motd2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bDisplayMOTD_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisplayMOTD = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bDisplayMOTD_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bDisplayMOTD);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bDoGuildMOTD_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bDoGuildMOTD = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bDoGuildMOTD_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bDoGuildMOTD);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIgnorePR_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIgnorePR = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIgnorePR_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIgnorePR);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_WordList_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->WordList, (const char *)arg2, 512-1);
      arg1->WordList[512-1] = 0;
    } else {
      arg1->WordList[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_WordList_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->WordList);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Display_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char **arg2 = (char **) (char **)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char **)jarg2; 
  {
    size_t ii;
    char * *b = (char * *) arg1->Display;
    for (ii = 0; ii < (size_t)25; ii++) b[ii] = *((char * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_Display_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char **result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char **)(char **) ((arg1)->Display);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DColor_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int **arg2 = (int **) (int **)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int **)jarg2; 
  {
    size_t ii;
    int * *b = (int * *) arg1->DColor;
    for (ii = 0; ii < (size_t)25; ii++) b[ii] = *((int * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_DColor_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int **result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int **)(int **) ((arg1)->DColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LineNo_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LineNo = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_LineNo_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->LineNo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DoingSpellAnim_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DoingSpellAnim = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_DoingSpellAnim_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->DoingSpellAnim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ZoneID_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQZoneIndex arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::EQZoneIndex)jarg2; 
  if (arg1) (arg1)->ZoneID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_ZoneID_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQZoneIndex result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::EQZoneIndex) ((arg1)->ZoneID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_CommandIndex_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CommandIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_CommandIndex_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->CommandIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MaxLines_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxLines = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MaxLines_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MaxLines);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_PrimaryAttackReady_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PrimaryAttackReady = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_PrimaryAttackReady_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->PrimaryAttackReady);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SecondaryAttackReady_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SecondaryAttackReady = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_SecondaryAttackReady_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->SecondaryAttackReady);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_AutosaveCounter_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AutosaveCounter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_AutosaveCounter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->AutosaveCounter);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_StartAFK_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->StartAFK = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_StartAFK_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->StartAFK);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_AllPlayerCollisions_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AllPlayerCollisions = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_AllPlayerCollisions_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->AllPlayerCollisions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyVehicleFound_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->MyVehicleFound = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_MyVehicleFound_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->MyVehicleFound);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ZoneFindingVehicle_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ZoneFindingVehicle = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_ZoneFindingVehicle_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->ZoneFindingVehicle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ForceSendVehicleUpdate_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->ForceSendVehicleUpdate = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_ForceSendVehicleUpdate_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->ForceSendVehicleUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_GotSafeCoords_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::ZONE_REQ_STATUS arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::ZONE_REQ_STATUS)jarg2; 
  if (arg1) (arg1)->GotSafeCoords = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_GotSafeCoords_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::ZONE_REQ_STATUS result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::ZONE_REQ_STATUS) ((arg1)->GotSafeCoords);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ZoningTo_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ZoningTo = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_ZoningTo_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->ZoningTo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_NpcPhysics_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->NpcPhysics = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_NpcPhysics_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->NpcPhysics);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_BeneficialSpellCast_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BeneficialSpellCast = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_BeneficialSpellCast_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->BeneficialSpellCast);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_AFKMessage_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AFKMessage, (const char *)arg2, 256-1);
      arg1->AFKMessage[256-1] = 0;
    } else {
      arg1->AFKMessage[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_AFKMessage_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->AFKMessage);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bLogging_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bLogging = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bLogging_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bLogging);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LogFile_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LogFile, (const char *)arg2, 50-1);
      arg1->LogFile[50-1] = 0;
    } else {
      arg1->LogFile[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_LogFile_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->LogFile);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LogSeconds_set(void * jarg1, unsigned char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LogSeconds = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EverQuestinfo_LogSeconds_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint8_t) ((arg1)->LogSeconds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Controlled_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Controlled = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Controlled_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Controlled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_KunarkApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->KunarkApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_KunarkApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->KunarkApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_VeliousApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->VeliousApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_VeliousApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->VeliousApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LuclinApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->LuclinApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LuclinApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->LuclinApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_PopApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->PopApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_PopApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->PopApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_YkeshaApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->YkeshaApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_YkeshaApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->YkeshaApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LdonApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->LdonApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LdonApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->LdonApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_GatesApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->GatesApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_GatesApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->GatesApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OmensApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->OmensApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_OmensApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->OmensApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DonApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DonApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_DonApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->DonApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_DarkhollowApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->DarkhollowApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_DarkhollowApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->DarkhollowApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ProphecyApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ProphecyApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ProphecyApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->ProphecyApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SerpentApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SerpentApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_SerpentApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->SerpentApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_BuriedSeaApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->BuriedSeaApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_BuriedSeaApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->BuriedSeaApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SecretsOfFaydwerApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SecretsOfFaydwerApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_SecretsOfFaydwerApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->SecretsOfFaydwerApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_SeedsOfDestructionApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->SeedsOfDestructionApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_SeedsOfDestructionApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->SeedsOfDestructionApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_UnderfootApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->UnderfootApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_UnderfootApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->UnderfootApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_HouseOfThuleApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->HouseOfThuleApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_HouseOfThuleApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->HouseOfThuleApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_VeilOfAlarisApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->VeilOfAlarisApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_VeilOfAlarisApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->VeilOfAlarisApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RainOfFearApproved_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->RainOfFearApproved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_RainOfFearApproved_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->RainOfFearApproved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ExpansionsFlagBitmask_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->ExpansionsFlagBitmask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_ExpansionsFlagBitmask_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->ExpansionsFlagBitmask);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_NoNameApprove_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NoNameApprove = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_NoNameApprove_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->NoNameApprove);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_AttackOnAssist_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AttackOnAssist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_AttackOnAssist_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->AttackOnAssist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Unknown0x13c8_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0x13c8 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_Unknown0x13c8_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->Unknown0x13c8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bInvWinLabels_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bInvWinLabels = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bInvWinLabels_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bInvWinLabels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LoadedArmor_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->LoadedArmor;
    for (ii = 0; ii < (size_t)7; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_LoadedArmor_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->LoadedArmor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bLockWindows_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bLockWindows = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bLockWindows_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bLockWindows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bHidePlayerWin_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bHidePlayerWin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bHidePlayerWin_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bHidePlayerWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bHidePartyWin_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bHidePartyWin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bHidePartyWin_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bHidePartyWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bHideTargetWin_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bHideTargetWin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bHideTargetWin_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bHideTargetWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bHideSpellsWin_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bHideSpellsWin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bHideSpellsWin_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bHideSpellsWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bHideHotboxWin_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bHideHotboxWin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bHideHotboxWin_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bHideHotboxWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bHideChatWin_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bHideChatWin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bHideChatWin_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bHideChatWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bHideMainWin_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bHideMainWin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bHideMainWin_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bHideMainWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bHideAltAdvWin_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bHideAltAdvWin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bHideAltAdvWin_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bHideAltAdvWin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bUnknown0x1410_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bUnknown0x1410 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bUnknown0x1410_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bUnknown0x1410);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bUnknown0x1414_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bUnknown0x1414 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bUnknown0x1414_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bUnknown0x1414);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bShowDynamicLights_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bShowDynamicLights = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bShowDynamicLights_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bShowDynamicLights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iChatFontSize_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iChatFontSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iChatFontSize_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iChatFontSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_VideoMode_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->VideoMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_VideoMode_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->VideoMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bShowGrass_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowGrass = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bShowGrass_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bShowGrass);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RawTextBuffer_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->RawTextBuffer;
    if (arg2) {
      arg1->RawTextBuffer = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->RawTextBuffer, (const char *)arg2);
    } else {
      arg1->RawTextBuffer = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_RawTextBuffer_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *) ((arg1)->RawTextBuffer);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RawTextBufferSize_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RawTextBufferSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_RawTextBufferSize_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->RawTextBufferSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RawTextBufferEnd_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->RawTextBufferEnd;
    if (arg2) {
      arg1->RawTextBufferEnd = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->RawTextBufferEnd, (const char *)arg2);
    } else {
      arg1->RawTextBufferEnd = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_RawTextBufferEnd_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *) ((arg1)->RawTextBufferEnd);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RawTextFirstLine_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->RawTextFirstLine;
    if (arg2) {
      arg1->RawTextFirstLine = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->RawTextFirstLine, (const char *)arg2);
    } else {
      arg1->RawTextFirstLine = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_RawTextFirstLine_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *) ((arg1)->RawTextFirstLine);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RawTextLastLine_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->RawTextLastLine;
    if (arg2) {
      arg1->RawTextLastLine = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->RawTextLastLine, (const char *)arg2);
    } else {
      arg1->RawTextLastLine = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_RawTextLastLine_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *) ((arg1)->RawTextLastLine);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RawTextNewPos_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->RawTextNewPos;
    if (arg2) {
      arg1->RawTextNewPos = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->RawTextNewPos, (const char *)arg2);
    } else {
      arg1->RawTextNewPos = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_RawTextNewPos_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *) ((arg1)->RawTextNewPos);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bInspectOthers_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bInspectOthers = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bInspectOthers_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bInspectOthers);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bShowSpellEffects_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bShowSpellEffects = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bShowSpellEffects_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bShowSpellEffects);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_NextKeyRepeatTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NextKeyRepeatTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_NextKeyRepeatTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->NextKeyRepeatTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_KeyRepeatDelay_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->KeyRepeatDelay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_KeyRepeatDelay_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->KeyRepeatDelay);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_TimeScale_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TimeScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_TimeScale_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->TimeScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_BeTheMonsterAllowed_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BeTheMonsterAllowed = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_BeTheMonsterAllowed_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->BeTheMonsterAllowed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iShowNamesLevel_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iShowNamesLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iShowNamesLevel_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iShowNamesLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsMode_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsMode_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsCount_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsCount_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsFontSize_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsFontSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsFontSize_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsFontSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsShowHeader_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsShowHeader = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsShowHeader_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsShowHeader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsShowBG_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsShowBG = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsShowBG_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsShowBG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsBGWidth_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsBGWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsBGWidth_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsBGWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_MyHitsAlwaysDraw_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MyHitsAlwaysDraw = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_MyHitsAlwaysDraw_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->MyHitsAlwaysDraw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeMode_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeMode_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeCount_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeCount_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeFontSize_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeFontSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeFontSize_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeFontSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeShowHeader_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeShowHeader = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeShowHeader_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeShowHeader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeShowBG_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeShowBG = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeShowBG_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeShowBG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeBGWidth_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeBGWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeBGWidth_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeBGWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeAlwaysDraw_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsMeAlwaysDraw = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsMeAlwaysDraw_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsMeAlwaysDraw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherMode_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherMode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherMode_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherX_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherX_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherY_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherY_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherCount_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherCount_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherFontSize_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherFontSize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherFontSize_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherFontSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherShowHeader_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherShowHeader = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherShowHeader_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherShowHeader);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherShowBG_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherShowBG = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherShowBG_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherShowBG);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherBGWidth_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherBGWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherBGWidth_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherBGWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherAlwaysDraw_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->OtherHitsOtherAlwaysDraw = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_OtherHitsOtherAlwaysDraw_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->OtherHitsOtherAlwaysDraw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bCombatMusic_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->bCombatMusic = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_bCombatMusic_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->bCombatMusic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iSoundMixAhead_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iSoundMixAhead = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iSoundMixAhead_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iSoundMixAhead);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bDisableDrakkinTattoos_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisableDrakkinTattoos = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bDisableDrakkinTattoos_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bDisableDrakkinTattoos);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMinSuccess_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fFizzleMinSuccess = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMinSuccess_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fFizzleMinSuccess);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMaxSuccess_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fFizzleMaxSuccess = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMaxSuccess_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fFizzleMaxSuccess);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMinSuccessBard_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fFizzleMinSuccessBard = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMinSuccessBard_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fFizzleMinSuccessBard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMaxSuccessBard_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fFizzleMaxSuccessBard = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMaxSuccessBard_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fFizzleMaxSuccessBard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMaxSuccessDefault_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fFizzleMaxSuccessDefault = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMaxSuccessDefault_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fFizzleMaxSuccessDefault);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMaxSuccessSpecialized_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fFizzleMaxSuccessSpecialized = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fFizzleMaxSuccessSpecialized_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fFizzleMaxSuccessSpecialized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fFizzleManaCostMin_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fFizzleManaCostMin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fFizzleManaCostMin_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fFizzleManaCostMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fFizzleManaCostMax_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fFizzleManaCostMax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fFizzleManaCostMax_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fFizzleManaCostMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iActivityCheckInterval_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iActivityCheckInterval = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iActivityCheckInterval_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iActivityCheckInterval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iActivityThreshhold_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iActivityThreshhold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iActivityThreshhold_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iActivityThreshhold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iActivityScriptId_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iActivityScriptId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iActivityScriptId_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iActivityScriptId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ChatFilters_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::ChatFilterData *arg2 = (eqlib::ChatFilterData *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::ChatFilterData *)jarg2; 
  if (arg1) (arg1)->ChatFilters = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_ChatFilters_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::ChatFilterData *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::ChatFilterData *)& ((arg1)->ChatFilters);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_gOpt_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQGameOptions *arg2 = (eqlib::EQGameOptions *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::EQGameOptions *)jarg2; 
  if (arg1) (arg1)->gOpt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_gOpt_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQGameOptions *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::EQGameOptions *)& ((arg1)->gOpt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_gOpt2_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQGameOptions2 *arg2 = (eqlib::EQGameOptions2 *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::EQGameOptions2 *)jarg2; 
  if (arg1) (arg1)->gOpt2 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_gOpt2_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQGameOptions2 *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::EQGameOptions2 *)& ((arg1)->gOpt2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bEnvSounds_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bEnvSounds = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bEnvSounds_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bEnvSounds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bAllowContextMenus_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAllowContextMenus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bAllowContextMenus_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bAllowContextMenus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bShowHelpOnLeftClickTarget_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowHelpOnLeftClickTarget = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bShowHelpOnLeftClickTarget_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bShowHelpOnLeftClickTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_iClaimingPrize_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iClaimingPrize = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_iClaimingPrize_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->iClaimingPrize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bUseTellWindows_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseTellWindows = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bUseTellWindows_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bUseTellWindows);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bCtrlBypassesTradeskill_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCtrlBypassesTradeskill = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bCtrlBypassesTradeskill_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bCtrlBypassesTradeskill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bAllowAutoDuck_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAllowAutoDuck = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bAllowAutoDuck_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bAllowAutoDuck);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bAllowAutoStand_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAllowAutoStand = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bAllowAutoStand_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bAllowAutoStand);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bAutojoinHelpChannels_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAutojoinHelpChannels = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bAutojoinHelpChannels_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bAutojoinHelpChannels);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bStreamItemTextures_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bStreamItemTextures = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bStreamItemTextures_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bStreamItemTextures);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bIgnoreLONChallenges_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIgnoreLONChallenges = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bIgnoreLONChallenges_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bIgnoreLONChallenges);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bAcceptKickRequests_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAcceptKickRequests = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bAcceptKickRequests_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bAcceptKickRequests);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bSuppressFirstUseAlerts_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSuppressFirstUseAlerts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bSuppressFirstUseAlerts_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bSuppressFirstUseAlerts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bUseArrowCamera_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseArrowCamera = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bUseArrowCamera_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bUseArrowCamera);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_cameras_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQCamera **arg2 = (eqlib::EQCamera **) (eqlib::EQCamera **)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::EQCamera **)jarg2; 
  {
    size_t ii;
    eqlib::EQCamera * *b = (eqlib::EQCamera * *) arg1->cameras;
    for (ii = 0; ii < (size_t)eqlib::EQ_MAX_CAMERAS; ii++) b[ii] = *((eqlib::EQCamera * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_cameras_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQCamera **result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::EQCamera **)(eqlib::EQCamera **) ((arg1)->cameras);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_keyDown_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->keyDown;
    for (ii = 0; ii < (size_t)eqlib::nEQMappableCommands; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_keyDown_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->keyDown);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastTellFromList_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char (*arg2)[eqlib::EQ_MAX_NAME] = (char (*)[eqlib::EQ_MAX_NAME]) (char (*)[eqlib::EQ_MAX_NAME])0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char (*)[eqlib::EQ_MAX_NAME])jarg2; 
  {
    char (*inp)[eqlib::EQ_MAX_NAME] = (char (*)[eqlib::EQ_MAX_NAME])(arg2);
    char (*dest)[eqlib::EQ_MAX_NAME] = (char (*)[eqlib::EQ_MAX_NAME])(arg1->LastTellFromList);
    size_t ii = 0;
    for (; ii < eqlib::NUM_REPLY_NAMES; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < eqlib::EQ_MAX_NAME; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_LastTellFromList_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char (*result)[eqlib::EQ_MAX_NAME] = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char (*)[eqlib::EQ_MAX_NAME])(char (*)[eqlib::EQ_MAX_NAME]) ((arg1)->LastTellFromList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastTellFromIndex_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LastTellFromIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_LastTellFromIndex_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->LastTellFromIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bcolor_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->bcolor;
    for (ii = 0; ii < (size_t)500; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_bcolor_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->bcolor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_buffer_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char (*arg2)[256] = (char (*)[256]) (char (*)[256])0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char (*)[256])jarg2; 
  {
    char (*inp)[256] = (char (*)[256])(arg2);
    char (*dest)[256] = (char (*)[256])(arg1->buffer);
    size_t ii = 0;
    for (; ii < 500; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 256; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_buffer_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char (*result)[256] = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char (*)[256])(char (*)[256]) ((arg1)->buffer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_commandList_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char (*arg2)[2048] = (char (*)[2048]) (char (*)[2048])0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char (*)[2048])jarg2; 
  {
    char (*inp)[2048] = (char (*)[2048])(arg2);
    char (*dest)[2048] = (char (*)[2048])(arg1->commandList);
    size_t ii = 0;
    for (; ii < 40; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 2048; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_commandList_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char (*result)[2048] = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char (*)[2048])(char (*)[2048]) ((arg1)->commandList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LockPassword_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LockPassword, (const char *)arg2, 64-1);
      arg1->LockPassword[64-1] = 0;
    } else {
      arg1->LockPassword[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_LockPassword_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->LockPassword);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bLoadFriendsList_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bLoadFriendsList = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bLoadFriendsList_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bLoadFriendsList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ClaimPrizeData_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  ClaimDataCollection arg2 ;
  ClaimDataCollection *argp2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  argp2 = (ClaimDataCollection *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null ClaimDataCollection", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ClaimPrizeData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_ClaimPrizeData_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  ClaimDataCollection result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result =  ((arg1)->ClaimPrizeData);
  jresult = new ClaimDataCollection(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_chatBuffer_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::ArrayClass< eqlib::ChatBufferEntry * > *arg2 = (eqlib::ArrayClass< eqlib::ChatBufferEntry * > *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::ArrayClass< eqlib::ChatBufferEntry * > *)jarg2; 
  if (arg1) (arg1)->chatBuffer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_chatBuffer_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::ArrayClass< eqlib::ChatBufferEntry * > *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::ArrayClass< eqlib::ChatBufferEntry * > *)& ((arg1)->chatBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_WorldServerShortname_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->WorldServerShortname, (const char *)arg2, 64-1);
      arg1->WorldServerShortname[64-1] = 0;
    } else {
      arg1->WorldServerShortname[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_WorldServerShortname_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->WorldServerShortname);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_combatSkill_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->combatSkill;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_combatSkill_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->combatSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_abilities_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->abilities;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_abilities_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->abilities);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_combatAbilities_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->combatAbilities;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_combatAbilities_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->combatAbilities);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Unknown0x36880_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Unknown0x36880;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_Unknown0x36880_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int *)(int *) ((arg1)->Unknown0x36880);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bSocialChanged_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool (*arg2)[eqlib::SOCIALS_PER_PAGE] = (bool (*)[eqlib::SOCIALS_PER_PAGE]) (bool (*)[eqlib::SOCIALS_PER_PAGE])0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (bool (*)[eqlib::SOCIALS_PER_PAGE])jarg2; 
  {
    bool (*inp)[eqlib::SOCIALS_PER_PAGE] = (bool (*)[eqlib::SOCIALS_PER_PAGE])(arg2);
    bool (*dest)[eqlib::SOCIALS_PER_PAGE] = (bool (*)[eqlib::SOCIALS_PER_PAGE])(arg1->bSocialChanged);
    size_t ii = 0;
    for (; ii < eqlib::NUM_SOCIAL_PAGES; ++ii) {
      bool *ip = inp[ii];
      bool *dp = dest[ii];
      size_t jj = 0;
      for (; jj < eqlib::SOCIALS_PER_PAGE; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_bSocialChanged_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool (*result)[eqlib::SOCIALS_PER_PAGE] = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool (*)[eqlib::SOCIALS_PER_PAGE])(bool (*)[eqlib::SOCIALS_PER_PAGE]) ((arg1)->bSocialChanged);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_socials_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQSocial (*arg2)[eqlib::SOCIALS_PER_PAGE] = (eqlib::EQSocial (*)[eqlib::SOCIALS_PER_PAGE]) (eqlib::EQSocial (*)[eqlib::SOCIALS_PER_PAGE])0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::EQSocial (*)[eqlib::SOCIALS_PER_PAGE])jarg2; 
  {
    eqlib::EQSocial (*inp)[eqlib::SOCIALS_PER_PAGE] = (eqlib::EQSocial (*)[eqlib::SOCIALS_PER_PAGE])(arg2);
    eqlib::EQSocial (*dest)[eqlib::SOCIALS_PER_PAGE] = (eqlib::EQSocial (*)[eqlib::SOCIALS_PER_PAGE])(arg1->socials);
    size_t ii = 0;
    for (; ii < eqlib::NUM_SOCIAL_PAGES; ++ii) {
      eqlib::EQSocial *ip = inp[ii];
      eqlib::EQSocial *dp = dest[ii];
      size_t jj = 0;
      for (; jj < eqlib::SOCIALS_PER_PAGE; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_socials_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQSocial (*result)[eqlib::SOCIALS_PER_PAGE] = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::EQSocial (*)[eqlib::SOCIALS_PER_PAGE])(eqlib::EQSocial (*)[eqlib::SOCIALS_PER_PAGE]) ((arg1)->socials);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_tempSocial_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQSocial *arg2 = (eqlib::EQSocial *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::EQSocial *)jarg2; 
  if (arg1) (arg1)->tempSocial = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_tempSocial_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::EQSocial *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::EQSocial *)& ((arg1)->tempSocial);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_socialIndex_set(void * jarg1, signed char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int8_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int8_t)jarg2; 
  if (arg1) (arg1)->socialIndex = arg2;
}


SWIGEXPORT signed char SWIGSTDCALL CSharp_EverQuestinfo_socialIndex_get(void * jarg1) {
  signed char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int8_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int8_t) ((arg1)->socialIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_selSlot_set(void * jarg1, char jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->selSlot = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_EverQuestinfo_selSlot_get(void * jarg1) {
  char jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char) ((arg1)->selSlot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_temp_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->temp, (const char *)arg2, 0x1ff4e-1);
      arg1->temp[0x1ff4e-1] = 0;
    } else {
      arg1->temp[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_temp_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->temp);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_spellLoadouts_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::SpellLoadout *arg2 = (eqlib::SpellLoadout *) (eqlib::SpellLoadout *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (eqlib::SpellLoadout *)jarg2; 
  {
    size_t ii;
    eqlib::SpellLoadout *b = (eqlib::SpellLoadout *) arg1->spellLoadouts;
    for (ii = 0; ii < (size_t)eqlib::NUM_SPELL_SETS; ii++) b[ii] = *((eqlib::SpellLoadout *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_spellLoadouts_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqlib::SpellLoadout *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (eqlib::SpellLoadout *)(eqlib::SpellLoadout *) ((arg1)->spellLoadouts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_hotbuttonLoadouts_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  HotButtonLoadout *arg2 = (HotButtonLoadout *) (HotButtonLoadout *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (HotButtonLoadout *)jarg2; 
  {
    size_t ii;
    HotButtonLoadout *b = (HotButtonLoadout *) arg1->hotbuttonLoadouts;
    for (ii = 0; ii < (size_t)eqlib::NUM_HOTBUTTON_SETS; ii++) b[ii] = *((HotButtonLoadout *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_hotbuttonLoadouts_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  HotButtonLoadout *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (HotButtonLoadout *)(HotButtonLoadout *) ((arg1)->hotbuttonLoadouts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_groupRoleLoadouts_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  GroupRoleLoadout *arg2 = (GroupRoleLoadout *) (GroupRoleLoadout *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (GroupRoleLoadout *)jarg2; 
  {
    size_t ii;
    GroupRoleLoadout *b = (GroupRoleLoadout *) arg1->groupRoleLoadouts;
    for (ii = 0; ii < (size_t)eqlib::NUM_GROUP_ROLE_SETS; ii++) b[ii] = *((GroupRoleLoadout *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_groupRoleLoadouts_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  GroupRoleLoadout *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (GroupRoleLoadout *)(GroupRoleLoadout *) ((arg1)->groupRoleLoadouts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_targetSetLoadouts_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  TargetSetLoadout *arg2 = (TargetSetLoadout *) (TargetSetLoadout *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (TargetSetLoadout *)jarg2; 
  {
    size_t ii;
    TargetSetLoadout *b = (TargetSetLoadout *) arg1->targetSetLoadouts;
    for (ii = 0; ii < (size_t)eqlib::NUM_XTARGET_SETS; ii++) b[ii] = *((TargetSetLoadout *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_targetSetLoadouts_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  TargetSetLoadout *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (TargetSetLoadout *)(TargetSetLoadout *) ((arg1)->targetSetLoadouts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_InspectLines_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->InspectLines = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_InspectLines_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->InspectLines);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_InspectText_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->InspectText, (const char *)arg2, 256-1);
      arg1->InspectText[256-1] = 0;
    } else {
      arg1->InspectText[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_InspectText_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->InspectText);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bInviteOn_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInviteOn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bInviteOn_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bInviteOn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_LastInspectTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastInspectTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_LastInspectTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint32_t) ((arg1)->LastInspectTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fSpellParticleDensity_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fSpellParticleDensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fSpellParticleDensity_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fSpellParticleDensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fSpellParticleOpacity_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fSpellParticleOpacity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fSpellParticleOpacity_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fSpellParticleOpacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fSpellParticleNearClipPlane_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fSpellParticleNearClipPlane = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fSpellParticleNearClipPlane_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fSpellParticleNearClipPlane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_nSpellParticleCastFilters_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nSpellParticleCastFilters = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_nSpellParticleCastFilters_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->nSpellParticleCastFilters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fEnvironmentParticleDensity_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fEnvironmentParticleDensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fEnvironmentParticleDensity_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fEnvironmentParticleDensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fEnvironmentParticleOpacity_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fEnvironmentParticleOpacity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fEnvironmentParticleOpacity_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fEnvironmentParticleOpacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fEnvironmentParticleNearClipPlane_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fEnvironmentParticleNearClipPlane = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fEnvironmentParticleNearClipPlane_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fEnvironmentParticleNearClipPlane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_nEnvironmentParticleCastFilters_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nEnvironmentParticleCastFilters = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_nEnvironmentParticleCastFilters_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->nEnvironmentParticleCastFilters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fActorParticleDensity_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fActorParticleDensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fActorParticleDensity_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fActorParticleDensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fActorParticleOpacity_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fActorParticleOpacity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fActorParticleOpacity_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fActorParticleOpacity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_fActorParticleNearClipPlane_set(void * jarg1, float jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fActorParticleNearClipPlane = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EverQuestinfo_fActorParticleNearClipPlane_get(void * jarg1) {
  float jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  float result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (float) ((arg1)->fActorParticleNearClipPlane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_nActorParticleCastFilters_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nActorParticleCastFilters = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_nActorParticleCastFilters_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->nActorParticleCastFilters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_nActorNewArmorFilters_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nActorNewArmorFilters = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_nActorNewArmorFilters_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->nActorNewArmorFilters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_timeWhenKicked_set(void * jarg1, void * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqtime_t arg2 ;
  eqtime_t *argp2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  argp2 = (eqtime_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqtime_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->timeWhenKicked = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_timeWhenKicked_get(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  eqtime_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result =  ((arg1)->timeWhenKicked);
  jresult = new eqtime_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bCreateGroupRequested_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCreateGroupRequested = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bCreateGroupRequested_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bCreateGroupRequested);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_GroupRequestId_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GroupRequestId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_GroupRequestId_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->GroupRequestId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_Inviter_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Inviter, (const char *)arg2, eqlib::EQ_MAX_NAME-1);
      arg1->Inviter[eqlib::EQ_MAX_NAME-1] = 0;
    } else {
      arg1->Inviter[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_Inviter_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->Inviter);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_party_set(void * jarg1, char * jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->party, (const char *)arg2, eqlib::EQ_MAX_NAME-1);
      arg1->party[eqlib::EQ_MAX_NAME-1] = 0;
    } else {
      arg1->party[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EverQuestinfo_party_get(void * jarg1) {
  char * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (char *)(char *) ((arg1)->party);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_FirstTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FirstTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_FirstTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->FirstTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_FirstTimePreMainLoop_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->FirstTimePreMainLoop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_FirstTimePreMainLoop_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->FirstTimePreMainLoop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bAutoAttack_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAutoAttack = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bAutoAttack_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bAutoAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_bAutoRangeAttack_set(void * jarg1, unsigned int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAutoRangeAttack = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_bAutoRangeAttack_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool) ((arg1)->bAutoRangeAttack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_ItemPending_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ItemPending = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_ItemPending_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->ItemPending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EverQuestinfo_RequestPending_set(void * jarg1, int jarg2) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RequestPending = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_RequestPending_get(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int) ((arg1)->RequestPending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_get_MouseSensitivity(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int)((eqlib::EverQuestinfo const *)arg1)->get_MouseSensitivity();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_get_bHeroicCharacterFlag(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool)((eqlib::EverQuestinfo const *)arg1)->get_bHeroicCharacterFlag();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_get_ProgressionLevelCap(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int)((eqlib::EverQuestinfo const *)arg1)->get_ProgressionLevelCap();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_get_bIsDevServer(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool *) &((eqlib::EverQuestinfo const *)arg1)->get_bIsDevServer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_get_bIsBetaServer(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool *) &((eqlib::EverQuestinfo const *)arg1)->get_bIsBetaServer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_get_bIsStageServer(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool *) &((eqlib::EverQuestinfo const *)arg1)->get_bIsStageServer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EverQuestinfo_get_bHeroicCharacterRelated(void * jarg1) {
  unsigned short jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  uint16_t result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (uint16_t)((eqlib::EverQuestinfo const *)arg1)->get_bHeroicCharacterRelated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EverQuestinfo_get_bCanCreateHeadStartCharacter(void * jarg1) {
  void * jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool *) &((eqlib::EverQuestinfo const *)arg1)->get_bCanCreateHeadStartCharacter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_get_nMonthlyClaim(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int)((eqlib::EverQuestinfo const *)arg1)->get_nMonthlyClaim();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EverQuestinfo_get_MarketPlaceRelated(void * jarg1) {
  unsigned int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (bool)((eqlib::EverQuestinfo const *)arg1)->get_MarketPlaceRelated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EverQuestinfo_get_Heroic100Slots(void * jarg1) {
  int jresult ;
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  result = (int)((eqlib::EverQuestinfo const *)arg1)->get_Heroic100Slots();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EverQuestinfo() {
  void * jresult ;
  eqlib::EverQuestinfo *result = 0 ;
  
  result = (eqlib::EverQuestinfo *)new eqlib::EverQuestinfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EverQuestinfo(void * jarg1) {
  eqlib::EverQuestinfo *arg1 = (eqlib::EverQuestinfo *) 0 ;
  
  arg1 = (eqlib::EverQuestinfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_GetServerShortName() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)eqlib::GetServerShortName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQMouseInfo_X_set(void * jarg1, int jarg2) {
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQMouseInfo_X_get(void * jarg1) {
  int jresult ;
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  result = (int) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQMouseInfo_Y_set(void * jarg1, int jarg2) {
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQMouseInfo_Y_get(void * jarg1) {
  int jresult ;
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  result = (int) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQMouseInfo_szLoginName_set(void * jarg1, char * jarg2) {
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->szLoginName, (const char *)arg2, 128-1);
      arg1->szLoginName[128-1] = 0;
    } else {
      arg1->szLoginName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_MQMouseInfo_szLoginName_get(void * jarg1) {
  char * jresult ;
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->szLoginName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQMouseInfo_SpeedX_set(void * jarg1, int jarg2) {
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpeedX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQMouseInfo_SpeedX_get(void * jarg1) {
  int jresult ;
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  result = (int) ((arg1)->SpeedX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQMouseInfo_SpeedY_set(void * jarg1, int jarg2) {
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpeedY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQMouseInfo_SpeedY_get(void * jarg1) {
  int jresult ;
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  result = (int) ((arg1)->SpeedY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MQMouseInfo_Scroll_set(void * jarg1, int jarg2) {
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Scroll = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MQMouseInfo_Scroll_get(void * jarg1) {
  int jresult ;
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  result = (int) ((arg1)->Scroll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MQMouseInfo() {
  void * jresult ;
  eqlib::MQMouseInfo *result = 0 ;
  
  result = (eqlib::MQMouseInfo *)new eqlib::MQMouseInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MQMouseInfo(void * jarg1) {
  eqlib::MQMouseInfo *arg1 = (eqlib::MQMouseInfo *) 0 ;
  
  arg1 = (eqlib::MQMouseInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickZoneTimerHandler_PickZoneRecord_ZoneName_set(void * jarg1, void * jarg2) {
  eqlib::PickZoneTimerHandler::PickZoneRecord *arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *) 0 ;
  eqlib::CXStr *arg2 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2; 
  if (arg1) (arg1)->ZoneName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PickZoneTimerHandler_PickZoneRecord_ZoneName_get(void * jarg1) {
  void * jresult ;
  eqlib::PickZoneTimerHandler::PickZoneRecord *arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *)jarg1; 
  result = (eqlib::CXStr *)& ((arg1)->ZoneName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickZoneTimerHandler_PickZoneRecord_Time_set(void * jarg1, int jarg2) {
  eqlib::PickZoneTimerHandler::PickZoneRecord *arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Time = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PickZoneTimerHandler_PickZoneRecord_Time_get(void * jarg1) {
  int jresult ;
  eqlib::PickZoneTimerHandler::PickZoneRecord *arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *) 0 ;
  int result;
  
  arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *)jarg1; 
  result = (int) ((arg1)->Time);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickZoneTimerHandler_PickZoneRecord() {
  void * jresult ;
  eqlib::PickZoneTimerHandler::PickZoneRecord *result = 0 ;
  
  result = (eqlib::PickZoneTimerHandler::PickZoneRecord *)new eqlib::PickZoneTimerHandler::PickZoneRecord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PickZoneTimerHandler_PickZoneRecord(void * jarg1) {
  eqlib::PickZoneTimerHandler::PickZoneRecord *arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *) 0 ;
  
  arg1 = (eqlib::PickZoneTimerHandler::PickZoneRecord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PickZoneTimerHandler_Records_set(void * jarg1, void * jarg2) {
  eqlib::PickZoneTimerHandler *arg1 = (eqlib::PickZoneTimerHandler *) 0 ;
  eqlib::SoeUtil::Array< eqlib::PickZoneTimerHandler::PickZoneRecord > *arg2 = (eqlib::SoeUtil::Array< eqlib::PickZoneTimerHandler::PickZoneRecord > *) 0 ;
  
  arg1 = (eqlib::PickZoneTimerHandler *)jarg1; 
  arg2 = (eqlib::SoeUtil::Array< eqlib::PickZoneTimerHandler::PickZoneRecord > *)jarg2; 
  if (arg1) (arg1)->Records = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PickZoneTimerHandler_Records_get(void * jarg1) {
  void * jresult ;
  eqlib::PickZoneTimerHandler *arg1 = (eqlib::PickZoneTimerHandler *) 0 ;
  eqlib::SoeUtil::Array< eqlib::PickZoneTimerHandler::PickZoneRecord > *result = 0 ;
  
  arg1 = (eqlib::PickZoneTimerHandler *)jarg1; 
  result = (eqlib::SoeUtil::Array< eqlib::PickZoneTimerHandler::PickZoneRecord > *)& ((arg1)->Records);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PickZoneTimerHandler() {
  void * jresult ;
  eqlib::PickZoneTimerHandler *result = 0 ;
  
  result = (eqlib::PickZoneTimerHandler *)new eqlib::PickZoneTimerHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PickZoneTimerHandler(void * jarg1) {
  eqlib::PickZoneTimerHandler *arg1 = (eqlib::PickZoneTimerHandler *) 0 ;
  
  arg1 = (eqlib::PickZoneTimerHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_ID_set(void * jarg1, int jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PetitionStatus_ID_get(void * jarg1) {
  int jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  int result;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (int) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_Priority_set(void * jarg1, int jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Priority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PetitionStatus_Priority_get(void * jarg1) {
  int jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  int result;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (int) ((arg1)->Priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_State_set(void * jarg1, int jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->State = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PetitionStatus_State_get(void * jarg1) {
  int jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  int result;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (int) ((arg1)->State);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_ArrivalTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->ArrivalTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetitionStatus_ArrivalTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (DWORD) ((arg1)->ArrivalTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_User_set(void * jarg1, char * jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->User, (const char *)arg2, 0x20-1);
      arg1->User[0x20-1] = 0;
    } else {
      arg1->User[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PetitionStatus_User_get(void * jarg1) {
  char * jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (char *)(char *) ((arg1)->User);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_Player_set(void * jarg1, char * jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Player, (const char *)arg2, 0x40-1);
      arg1->Player[0x40-1] = 0;
    } else {
      arg1->Player[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PetitionStatus_Player_get(void * jarg1) {
  char * jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (char *)(char *) ((arg1)->Player);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_NumActive_set(void * jarg1, int jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NumActive = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PetitionStatus_NumActive_get(void * jarg1) {
  int jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  int result;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (int) ((arg1)->NumActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_Player2_set(void * jarg1, char * jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Player2, (const char *)arg2, 0x40-1);
      arg1->Player2[0x40-1] = 0;
    } else {
      arg1->Player2[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PetitionStatus_Player2_get(void * jarg1) {
  char * jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (char *)(char *) ((arg1)->Player2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PetitionStatus_TimeStamp_set(void * jarg1, unsigned int jarg2) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->TimeStamp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PetitionStatus_TimeStamp_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  result = (DWORD) ((arg1)->TimeStamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PetitionStatus() {
  void * jresult ;
  eqlib::PetitionStatus *result = 0 ;
  
  result = (eqlib::PetitionStatus *)new eqlib::PetitionStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PetitionStatus(void * jarg1) {
  eqlib::PetitionStatus *arg1 = (eqlib::PetitionStatus *) 0 ;
  
  arg1 = (eqlib::PetitionStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Name_set(void * jarg1, char * jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 0x40-1);
      arg1->Name[0x40-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CharSelectInfo_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Class_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Class = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_Class_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->Class);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Race_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Race = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_Race_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->Race);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Level_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_Level_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Class2_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Class2 = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_Class2_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->Class2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Race2_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Race2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_Race2_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->Race2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_CurZoneID_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurZoneID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_CurZoneID_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->CurZoneID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Sex_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Sex = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_Sex_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->Sex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Face_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Face = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_Face_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->Face);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_ArmProp_set(void * jarg1, void * jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  ArmorProperties *arg2 = (ArmorProperties *) (ArmorProperties *)0 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (ArmorProperties *)jarg2; 
  {
    size_t ii;
    ArmorProperties *b = (ArmorProperties *) arg1->ArmProp;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((ArmorProperties *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharSelectInfo_ArmProp_get(void * jarg1) {
  void * jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  ArmorProperties *result = 0 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (ArmorProperties *)(ArmorProperties *) ((arg1)->ArmProp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Tint_set(void * jarg1, void * jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  DWORD *arg2 = (DWORD *) (DWORD *)0 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (DWORD *)jarg2; 
  {
    size_t ii;
    DWORD *b = (DWORD *) arg1->Tint;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((DWORD *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CharSelectInfo_Tint_get(void * jarg1) {
  void * jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  DWORD *result = 0 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (DWORD *)(DWORD *) ((arg1)->Tint);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_TextureType_set(void * jarg1, char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->TextureType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharSelectInfo_TextureType_get(void * jarg1) {
  char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (char) ((arg1)->TextureType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_ArmorMaterial_set(void * jarg1, char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->ArmorMaterial = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharSelectInfo_ArmorMaterial_get(void * jarg1) {
  char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (char) ((arg1)->ArmorMaterial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_ArmorVariation_set(void * jarg1, char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->ArmorVariation = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharSelectInfo_ArmorVariation_get(void * jarg1) {
  char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (char) ((arg1)->ArmorVariation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_HeadType_set(void * jarg1, char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->HeadType = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CharSelectInfo_HeadType_get(void * jarg1) {
  char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  char result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (char) ((arg1)->HeadType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_TattooIndex_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TattooIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_TattooIndex_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->TattooIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_FacialAttachmentIndex_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FacialAttachmentIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_FacialAttachmentIndex_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->FacialAttachmentIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Deity_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Deity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_Deity_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->Deity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_PrimActor_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PrimActor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_PrimActor_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->PrimActor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_SecdActor_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SecdActor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_SecdActor_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->SecdActor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_HairColor_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->HairColor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_HairColor_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->HairColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_BeardColor_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->BeardColor = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_BeardColor_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->BeardColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_LeftEye_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LeftEye = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_LeftEye_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->LeftEye);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_RightEye_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->RightEye = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_RightEye_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->RightEye);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Hair_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Hair = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_Hair_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->Hair);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_Beard_set(void * jarg1, unsigned char jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Beard = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CharSelectInfo_Beard_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (uint8_t) ((arg1)->Beard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_bCanGoHome_set(void * jarg1, unsigned int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCanGoHome = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharSelectInfo_bCanGoHome_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (bool) ((arg1)->bCanGoHome);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_bCanTutorial_set(void * jarg1, unsigned int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCanTutorial = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharSelectInfo_bCanTutorial_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (bool) ((arg1)->bCanTutorial);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_ParentId_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ParentId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_ParentId_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (int) ((arg1)->ParentId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_bTooHighLevel_set(void * jarg1, unsigned int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTooHighLevel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharSelectInfo_bTooHighLevel_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (bool) ((arg1)->bTooHighLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_bPreFTP_set(void * jarg1, unsigned int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bPreFTP = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharSelectInfo_bPreFTP_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (bool) ((arg1)->bPreFTP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_SomethingLogin_set(void * jarg1, int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  long arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->SomethingLogin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CharSelectInfo_SomethingLogin_get(void * jarg1) {
  int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  long result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (long) ((arg1)->SomethingLogin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_bUseable_set(void * jarg1, unsigned int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharSelectInfo_bUseable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (bool) ((arg1)->bUseable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_bHeroicCharacter_set(void * jarg1, unsigned int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHeroicCharacter = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharSelectInfo_bHeroicCharacter_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (bool) ((arg1)->bHeroicCharacter);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CharSelectInfo_bShrouded_set(void * jarg1, unsigned int jarg2) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShrouded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CharSelectInfo_bShrouded_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  result = (bool) ((arg1)->bShrouded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CharSelectInfo() {
  void * jresult ;
  eqlib::CharSelectInfo *result = 0 ;
  
  result = (eqlib::CharSelectInfo *)new eqlib::CharSelectInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CharSelectInfo(void * jarg1) {
  eqlib::CharSelectInfo *arg1 = (eqlib::CharSelectInfo *) 0 ;
  
  arg1 = (eqlib::CharSelectInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CEverQuestBase(void * jarg1) {
  eqlib::CEverQuestBase *arg1 = (eqlib::CEverQuestBase *) 0 ;
  
  arg1 = (eqlib::CEverQuestBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CEverQuestBase() {
  void * jresult ;
  eqlib::CEverQuestBase *result = 0 ;
  
  result = (eqlib::CEverQuestBase *)new eqlib::CEverQuestBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEverQuest_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::CEverQuest_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CEverQuest(void * jarg1) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_CreateTargetIndicator(void * jarg1, int jarg2, void * jarg3, void * jarg4, int jarg5) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  eqlib::EQ_Spell *arg3 = (eqlib::EQ_Spell *) 0 ;
  eqlib::ItemGlobalIndex *arg4 = 0 ;
  eqlib::ItemSpellTypes arg5 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::EQ_Spell *)jarg3; 
  arg4 = (eqlib::ItemGlobalIndex *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ItemGlobalIndex const & is null", 0);
    return ;
  } 
  arg5 = (eqlib::ItemSpellTypes)jarg5; 
  (arg1)->CreateTargetIndicator(arg2,arg3,(eqlib::ItemGlobalIndex const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_DeleteTargetIndicator(void * jarg1) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  (arg1)->DeleteTargetIndicator();
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_GetBodyTypeDesc(void * jarg1, int jarg2) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetBodyTypeDesc(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_GetClassDesc(void * jarg1, void * jarg2) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  EQClass arg2 ;
  EQClass *argp2 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  argp2 = (EQClass *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQClass", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetClassDesc(SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_GetClassThreeLetterCode(void * jarg1, void * jarg2) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  EQClass arg2 ;
  EQClass *argp2 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  argp2 = (EQClass *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQClass", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetClassThreeLetterCode(SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_GetDeityDesc(void * jarg1, int jarg2) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetDeityDesc(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_GetLangDesc(void * jarg1, int jarg2) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  result = (char *)(arg1)->GetLangDesc(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_GetRaceDesc(void * jarg1, void * jarg2) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  EQRace arg2 ;
  EQRace *argp2 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  argp2 = (EQRace *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQRace", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (char *)(arg1)->GetRaceDesc(SWIG_STD_MOVE(arg2));
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_trimName(void * jarg1, char * jarg2) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->trimName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_ClickedPlayer(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  int arg3 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (eqlib::PlayerClient *)(arg1)->ClickedPlayer(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_doLoot(void * jarg1) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  (arg1)->doLoot();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_DoPercentConvert(void * jarg1, char * jarg2, unsigned int jarg3) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->DoPercentConvert(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_DoTellWindow(void * jarg1, char * jarg2, char * jarg3, char * jarg4, void * jarg5, int jarg6, unsigned int jarg7) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = (void *) 0 ;
  int arg6 ;
  bool arg7 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (void *)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->DoTellWindow(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_OutputTextToLog(void * jarg1, char * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OutputTextToLog((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_DropHeldItemOnGround(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DropHeldItemOnGround(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_Emote(void * jarg1) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  (arg1)->Emote();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_InterpretCmd(void * jarg1, void * jarg2, char * jarg3) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->InterpretCmd(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_IssuePetCommand__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::ePetCommandType arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::ePetCommandType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->IssuePetCommand(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_IssuePetCommand__SWIG_1(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, unsigned int jarg5) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::ePetCommandType arg2 ;
  int arg3 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::ePetCommandType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->IssuePetCommand(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_LeftClickedOnPlayer(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  (arg1)->LeftClickedOnPlayer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_LMouseUp(void * jarg1, int jarg2, int jarg3) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->LMouseUp(arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEverQuest_ReportSuccessfulHit(void * jarg1, void * jarg2, unsigned int jarg3, int jarg4) {
  unsigned int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::EQSuccessfulHit *arg2 = (eqlib::EQSuccessfulHit *) 0 ;
  bool arg3 ;
  int arg4 ;
  bool result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::EQSuccessfulHit *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->ReportSuccessfulHit(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_RightClickedOnPlayer(void * jarg1, void * jarg2, int jarg3) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  int arg3 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RightClickedOnPlayer(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_RMouseUp(void * jarg1, int jarg2, int jarg3) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->RMouseUp(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_SetGameState(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetGameState(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_currentChatServerApi_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::UniversalChatProxy *arg2 = (eqlib::UniversalChatProxy *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::UniversalChatProxy *)jarg2; 
  if (arg1) (arg1)->currentChatServerApi = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_currentChatServerApi_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::UniversalChatProxy *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (eqlib::UniversalChatProxy *) ((arg1)->currentChatServerApi);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_alreadyAutoJoined_set(void * jarg1, unsigned int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->alreadyAutoJoined = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEverQuest_alreadyAutoJoined_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (bool) ((arg1)->alreadyAutoJoined);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_chatNotificationStamp_set(void * jarg1, long long jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->chatNotificationStamp = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CEverQuest_chatNotificationStamp_get(void * jarg1) {
  long long jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int64_t) ((arg1)->chatNotificationStamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucpAddress_set(void * jarg1, char * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ucpAddress, (const char *)arg2, 128-1);
      arg1->ucpAddress[128-1] = 0;
    } else {
      arg1->ucpAddress[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_ucpAddress_get(void * jarg1) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char *)(char *) ((arg1)->ucpAddress);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucpPort_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ucpPort = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_ucpPort_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->ucpPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucpPlayerName_set(void * jarg1, char * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ucpPlayerName, (const char *)arg2, 256-1);
      arg1->ucpPlayerName[256-1] = 0;
    } else {
      arg1->ucpPlayerName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_ucpPlayerName_get(void * jarg1) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char *)(char *) ((arg1)->ucpPlayerName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucpTicket_set(void * jarg1, char * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ucpTicket, (const char *)arg2, 256-1);
      arg1->ucpTicket[256-1] = 0;
    } else {
      arg1->ucpTicket[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_ucpTicket_get(void * jarg1) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char *)(char *) ((arg1)->ucpTicket);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_chatService_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::UniversalChatProxy *arg2 = (eqlib::UniversalChatProxy *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::UniversalChatProxy *)jarg2; 
  if (arg1) (arg1)->chatService = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_chatService_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::UniversalChatProxy *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (eqlib::UniversalChatProxy *) ((arg1)->chatService);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucNotificationStamp_set(void * jarg1, long long jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->ucNotificationStamp = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CEverQuest_ucNotificationStamp_get(void * jarg1) {
  long long jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int64_t) ((arg1)->ucNotificationStamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucNotificationEntering_set(void * jarg1, unsigned int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ucNotificationEntering = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEverQuest_ucNotificationEntering_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (bool) ((arg1)->ucNotificationEntering);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucNotificationPlayerName_set(void * jarg1, char * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ucNotificationPlayerName, (const char *)arg2, 256-1);
      arg1->ucNotificationPlayerName[256-1] = 0;
    } else {
      arg1->ucNotificationPlayerName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_ucNotificationPlayerName_get(void * jarg1) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char *)(char *) ((arg1)->ucNotificationPlayerName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucNotificationChannelName_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char (*arg2)[48] = (char (*)[48]) (char (*)[48])0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char (*)[48])jarg2; 
  {
    char (*inp)[48] = (char (*)[48])(arg2);
    char (*dest)[48] = (char (*)[48])(arg1->ucNotificationChannelName);
    size_t ii = 0;
    for (; ii < 10; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 48; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_ucNotificationChannelName_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char (*result)[48] = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char (*)[48])(char (*)[48]) ((arg1)->ucNotificationChannelName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucNotificationChannelNumber_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  DWORD *arg2 = (DWORD *) (DWORD *)0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (DWORD *)jarg2; 
  {
    size_t ii;
    DWORD *b = (DWORD *) arg1->ucNotificationChannelNumber;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((DWORD *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_ucNotificationChannelNumber_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  DWORD *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (DWORD *)(DWORD *) ((arg1)->ucNotificationChannelNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ucNotificationCount_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ucNotificationCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_ucNotificationCount_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->ucNotificationCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_freeTargetTracker_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::FreeTargetTracker *arg2 = (eqlib::FreeTargetTracker *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::FreeTargetTracker *)jarg2; 
  if (arg1) (arg1)->freeTargetTracker = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_freeTargetTracker_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::FreeTargetTracker *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (eqlib::FreeTargetTracker *) ((arg1)->freeTargetTracker);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_WorldState_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WorldState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_WorldState_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->WorldState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_GameState_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GameState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_GameState_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->GameState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_bStopAreaProcessing_set(void * jarg1, unsigned int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bStopAreaProcessing = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEverQuest_bStopAreaProcessing_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (bool) ((arg1)->bStopAreaProcessing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_bRAFEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRAFEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEverQuest_bRAFEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (bool) ((arg1)->bRAFEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ServerTimeSync_set(void * jarg1, long long jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->ServerTimeSync = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CEverQuest_ServerTimeSync_get(void * jarg1) {
  long long jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int64_t) ((arg1)->ServerTimeSync);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ServerTimeBase_set(void * jarg1, long long jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->ServerTimeBase = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CEverQuest_ServerTimeBase_get(void * jarg1) {
  long long jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int64_t) ((arg1)->ServerTimeBase);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ServerTimeLastReported_set(void * jarg1, long long jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->ServerTimeLastReported = arg2;
}


SWIGEXPORT long long SWIGSTDCALL CSharp_CEverQuest_ServerTimeLastReported_get(void * jarg1) {
  long long jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int64_t result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int64_t) ((arg1)->ServerTimeLastReported);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_bServerTimeHasWrapped_set(void * jarg1, unsigned int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bServerTimeHasWrapped = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEverQuest_bServerTimeHasWrapped_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (bool) ((arg1)->bServerTimeHasWrapped);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_TargetCameraDistance_set(void * jarg1, float jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetCameraDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CEverQuest_TargetCameraDistance_get(void * jarg1) {
  float jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  float result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (float) ((arg1)->TargetCameraDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_bUnknown0x5f0_set(void * jarg1, unsigned int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUnknown0x5f0 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CEverQuest_bUnknown0x5f0_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  bool result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (bool) ((arg1)->bUnknown0x5f0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_TotalCharacterSlots_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalCharacterSlots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_TotalCharacterSlots_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->TotalCharacterSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_MarketplaceCharacterSlots_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MarketplaceCharacterSlots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_MarketplaceCharacterSlots_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->MarketplaceCharacterSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_Unknown0x608_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0x608 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_Unknown0x608_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->Unknown0x608);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_UsingSkill_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->UsingSkill = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_UsingSkill_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->UsingSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_UsingSkillTarget_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->UsingSkillTarget = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_UsingSkillTarget_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (void *) ((arg1)->UsingSkillTarget);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_petitionStatus_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::PetitionStatus *arg2 = (eqlib::PetitionStatus *) (eqlib::PetitionStatus *)0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::PetitionStatus *)jarg2; 
  {
    size_t ii;
    eqlib::PetitionStatus *b = (eqlib::PetitionStatus *) arg1->petitionStatus;
    for (ii = 0; ii < (size_t)0x200; ii++) b[ii] = *((eqlib::PetitionStatus *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_petitionStatus_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::PetitionStatus *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (eqlib::PetitionStatus *)(eqlib::PetitionStatus *) ((arg1)->petitionStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_TotalQ_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalQ = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_TotalQ_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->TotalQ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_TotalClientPetitions_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TotalClientPetitions = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_TotalClientPetitions_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->TotalClientPetitions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ChatText_set(void * jarg1, char * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ChatText, (const char *)arg2, 2112-1);
      arg1->ChatText[2112-1] = 0;
    } else {
      arg1->ChatText[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_ChatText_get(void * jarg1) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char *)(char *) ((arg1)->ChatText);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_TrimIdx_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TrimIdx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_TrimIdx_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->TrimIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_ChatChanged_set(void * jarg1, char jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->ChatChanged = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_CEverQuest_ChatChanged_get(void * jarg1) {
  char jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char) ((arg1)->ChatChanged);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_Trim_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char (*arg2)[2112] = (char (*)[2112]) (char (*)[2112])0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char (*)[2112])jarg2; 
  {
    char (*inp)[2112] = (char (*)[2112])(arg2);
    char (*dest)[2112] = (char (*)[2112])(arg1->Trim);
    size_t ii = 0;
    for (; ii < 64; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 2112; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_Trim_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char (*result)[2112] = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char (*)[2112])(char (*)[2112]) ((arg1)->Trim);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_chat_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->chat = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_chat_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->chat);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_disconnected_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->disconnected = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_disconnected_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->disconnected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_Red_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Red = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_Red_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->Red);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_Green_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Green = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_Green_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->Green);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_Blue_set(void * jarg1, int jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Blue = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CEverQuest_Blue_get(void * jarg1) {
  int jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  int result;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (int) ((arg1)->Blue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_charSelectPlayerArray_set(void * jarg1, void * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::ArrayClass< eqlib::CharSelectInfo > *arg2 = (eqlib::ArrayClass< eqlib::CharSelectInfo > *) 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (eqlib::ArrayClass< eqlib::CharSelectInfo > *)jarg2; 
  if (arg1) (arg1)->charSelectPlayerArray = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CEverQuest_charSelectPlayerArray_get(void * jarg1) {
  void * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  eqlib::ArrayClass< eqlib::CharSelectInfo > *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (eqlib::ArrayClass< eqlib::CharSelectInfo > *)& ((arg1)->charSelectPlayerArray);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CEverQuest_Filler_set(void * jarg1, char * jarg2) {
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Filler, (const char *)arg2, 0x830-1);
      arg1->Filler[0x830-1] = 0;
    } else {
      arg1->Filler[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CEverQuest_Filler_get(void * jarg1) {
  char * jresult ;
  eqlib::CEverQuest *arg1 = (eqlib::CEverQuest *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CEverQuest *)jarg1; 
  result = (char *)(char *) ((arg1)->Filler);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pFastFile_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CFastFileInterface *arg2 = (eqlib::CFastFileInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CFastFileInterface *)jarg2; 
  if (arg1) (arg1)->pFastFile = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pFastFile_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CFastFileInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CFastFileInterface *) ((arg1)->pFastFile);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pResourceManager_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CResourceManagerInterface *arg2 = (eqlib::CResourceManagerInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CResourceManagerInterface *)jarg2; 
  if (arg1) (arg1)->pResourceManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pResourceManager_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CResourceManagerInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CResourceManagerInterface *) ((arg1)->pResourceManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pSceneGraph_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CSceneGraphInterface *arg2 = (eqlib::CSceneGraphInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CSceneGraphInterface *)jarg2; 
  if (arg1) (arg1)->pSceneGraph = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pSceneGraph_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CSceneGraphInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CSceneGraphInterface *) ((arg1)->pSceneGraph);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pRender_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CRender *arg2 = (eqlib::CRender *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CRender *)jarg2; 
  if (arg1) (arg1)->pRender = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pRender_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CRender *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CRender *) ((arg1)->pRender);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pParticleSystem_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CParticleSystemInterface *arg2 = (eqlib::CParticleSystemInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CParticleSystemInterface *)jarg2; 
  if (arg1) (arg1)->pParticleSystem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pParticleSystem_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CParticleSystemInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CParticleSystemInterface *) ((arg1)->pParticleSystem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pCollision_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CCollisionInterface *arg2 = (eqlib::CCollisionInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CCollisionInterface *)jarg2; 
  if (arg1) (arg1)->pCollision = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pCollision_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CCollisionInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CCollisionInterface *) ((arg1)->pCollision);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pMath_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CMathInterface *arg2 = (eqlib::CMathInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CMathInterface *)jarg2; 
  if (arg1) (arg1)->pMath = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pMath_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CMathInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CMathInterface *) ((arg1)->pMath);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pThickLineSystem_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CThickLineSystemInterface *arg2 = (eqlib::CThickLineSystemInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CThickLineSystemInterface *)jarg2; 
  if (arg1) (arg1)->pThickLineSystem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pThickLineSystem_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CThickLineSystemInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CThickLineSystemInterface *) ((arg1)->pThickLineSystem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pDebugDraw_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CDebugDrawInterface *arg2 = (eqlib::CDebugDrawInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CDebugDrawInterface *)jarg2; 
  if (arg1) (arg1)->pDebugDraw = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pDebugDraw_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CDebugDrawInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CDebugDrawInterface *) ((arg1)->pDebugDraw);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pProperties_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CPropertySet *arg2 = (eqlib::CPropertySet *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CPropertySet *)jarg2; 
  if (arg1) (arg1)->pProperties = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pProperties_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CPropertySet *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CPropertySet *) ((arg1)->pProperties);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SGraphicsEngine_pTerrainSystem_set(void * jarg1, void * jarg2) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CTerrainSystemInterface *arg2 = (eqlib::CTerrainSystemInterface *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  arg2 = (eqlib::CTerrainSystemInterface *)jarg2; 
  if (arg1) (arg1)->pTerrainSystem = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SGraphicsEngine_pTerrainSystem_get(void * jarg1) {
  void * jresult ;
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  eqlib::CTerrainSystemInterface *result = 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  result = (eqlib::CTerrainSystemInterface *) ((arg1)->pTerrainSystem);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SGraphicsEngine() {
  void * jresult ;
  eqlib::SGraphicsEngine *result = 0 ;
  
  result = (eqlib::SGraphicsEngine *)new eqlib::SGraphicsEngine();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SGraphicsEngine(void * jarg1) {
  eqlib::SGraphicsEngine *arg1 = (eqlib::SGraphicsEngine *) 0 ;
  
  arg1 = (eqlib::SGraphicsEngine *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SModeInfo_display_set(void * jarg1, unsigned int jarg2) {
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->display = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SModeInfo_display_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  result = (bool) ((arg1)->display);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SModeInfo_depth16_set(void * jarg1, unsigned int jarg2) {
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->depth16 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SModeInfo_depth16_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  result = (bool) ((arg1)->depth16);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SModeInfo_depth24_set(void * jarg1, unsigned int jarg2) {
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->depth24 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SModeInfo_depth24_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  result = (bool) ((arg1)->depth24);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SModeInfo_depth32_set(void * jarg1, unsigned int jarg2) {
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->depth32 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SModeInfo_depth32_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  result = (bool) ((arg1)->depth32);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SModeInfo_windowed_set(void * jarg1, unsigned int jarg2) {
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->windowed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SModeInfo_windowed_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  bool result;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  result = (bool) ((arg1)->windowed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SModeInfo() {
  void * jresult ;
  eqlib::SModeInfo *result = 0 ;
  
  result = (eqlib::SModeInfo *)new eqlib::SModeInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SModeInfo(void * jarg1) {
  eqlib::SModeInfo *arg1 = (eqlib::SModeInfo *) 0 ;
  
  arg1 = (eqlib::SModeInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_unk1_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unk1 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_unk1_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (uint32_t) ((arg1)->unk1);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_unk2_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->unk2 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_unk2_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (uint32_t) ((arg1)->unk2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_index_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_index_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (uint32_t) ((arg1)->index);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_name_set(void * jarg1, char * jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->name, (const char *)arg2, 128-1);
      arg1->name[128-1] = 0;
    } else {
      arg1->name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDevice_name_get(void * jarg1) {
  char * jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (char *)(char *) ((arg1)->name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_product_set(void * jarg1, int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->product = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDevice_product_get(void * jarg1) {
  int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (int) ((arg1)->product);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_version_set(void * jarg1, int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDevice_version_get(void * jarg1) {
  int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (int) ((arg1)->version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_subversion_set(void * jarg1, int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->subversion = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDevice_subversion_get(void * jarg1) {
  int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (int) ((arg1)->subversion);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_build_set(void * jarg1, int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->build = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDevice_build_get(void * jarg1) {
  int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (int) ((arg1)->build);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_vendorID_set(void * jarg1, int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vendorID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDevice_vendorID_get(void * jarg1) {
  int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (int) ((arg1)->vendorID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_deviceID_set(void * jarg1, int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->deviceID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDevice_deviceID_get(void * jarg1) {
  int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (int) ((arg1)->deviceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_deviceGUID_set(void * jarg1, void * jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  GUID arg2 ;
  GUID *argp2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  argp2 = (GUID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GUID", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->deviceGUID = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDevice_deviceGUID_get(void * jarg1) {
  void * jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  GUID result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result =  ((arg1)->deviceGUID);
  jresult = new GUID(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_driverGUID_set(void * jarg1, void * jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  GUID arg2 ;
  GUID *argp2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  argp2 = (GUID *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null GUID", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->driverGUID = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDevice_driverGUID_get(void * jarg1) {
  void * jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  GUID result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result =  ((arg1)->driverGUID);
  jresult = new GUID(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_supportsLargeTextures_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->supportsLargeTextures = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_supportsLargeTextures_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  bool result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (bool) ((arg1)->supportsLargeTextures);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_supportsHardwareTnL_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->supportsHardwareTnL = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_supportsHardwareTnL_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  bool result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (bool) ((arg1)->supportsHardwareTnL);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_supportsIndexedVertexBlending_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->supportsIndexedVertexBlending = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_supportsIndexedVertexBlending_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  bool result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (bool) ((arg1)->supportsIndexedVertexBlending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_useFixedFunctionVertexBlending_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->useFixedFunctionVertexBlending = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_useFixedFunctionVertexBlending_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  bool result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (bool) ((arg1)->useFixedFunctionVertexBlending);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_vsyncInterval_set(void * jarg1, int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->vsyncInterval = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SDevice_vsyncInterval_get(void * jarg1) {
  int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  int result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (int) ((arg1)->vsyncInterval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_num16BitVideoModes_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->num16BitVideoModes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_num16BitVideoModes_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (uint32_t) ((arg1)->num16BitVideoModes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_num32BitVideoModes_set(void * jarg1, unsigned int jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->num32BitVideoModes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SDevice_num32BitVideoModes_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (uint32_t) ((arg1)->num32BitVideoModes);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_mode32_set(void * jarg1, void * jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  eqlib::SModeInfo *arg2 = (eqlib::SModeInfo *) 0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (eqlib::SModeInfo *)jarg2; 
  if (arg1) (arg1)->mode32 = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDevice_mode32_get(void * jarg1) {
  void * jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  eqlib::SModeInfo *result = 0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (eqlib::SModeInfo *)& ((arg1)->mode32);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_mode16A_set(void * jarg1, void * jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  eqlib::SModeInfo *arg2 = (eqlib::SModeInfo *) 0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (eqlib::SModeInfo *)jarg2; 
  if (arg1) (arg1)->mode16A = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDevice_mode16A_get(void * jarg1) {
  void * jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  eqlib::SModeInfo *result = 0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (eqlib::SModeInfo *)& ((arg1)->mode16A);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDevice_mode16B_set(void * jarg1, void * jarg2) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  eqlib::SModeInfo *arg2 = (eqlib::SModeInfo *) 0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  arg2 = (eqlib::SModeInfo *)jarg2; 
  if (arg1) (arg1)->mode16B = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SDevice_mode16B_get(void * jarg1) {
  void * jresult ;
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  eqlib::SModeInfo *result = 0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  result = (eqlib::SModeInfo *)& ((arg1)->mode16B);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SDevice() {
  void * jresult ;
  eqlib::SDevice *result = 0 ;
  
  result = (eqlib::SDevice *)new eqlib::SDevice();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SDevice(void * jarg1) {
  eqlib::SDevice *arg1 = (eqlib::SDevice *) 0 ;
  
  arg1 = (eqlib::SDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SItemPlacementStatsDisplay_unknown_set(void * jarg1, char * jarg2) {
  eqlib::SItemPlacementStatsDisplay *arg1 = (eqlib::SItemPlacementStatsDisplay *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SItemPlacementStatsDisplay *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->unknown, (const char *)arg2, 0x818-1);
      arg1->unknown[0x818-1] = 0;
    } else {
      arg1->unknown[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SItemPlacementStatsDisplay_unknown_get(void * jarg1) {
  char * jresult ;
  eqlib::SItemPlacementStatsDisplay *arg1 = (eqlib::SItemPlacementStatsDisplay *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SItemPlacementStatsDisplay *)jarg1; 
  result = (char *)(char *) ((arg1)->unknown);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SItemPlacementStatsDisplay() {
  void * jresult ;
  eqlib::SItemPlacementStatsDisplay *result = 0 ;
  
  result = (eqlib::SItemPlacementStatsDisplay *)new eqlib::SItemPlacementStatsDisplay();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SItemPlacementStatsDisplay(void * jarg1) {
  eqlib::SItemPlacementStatsDisplay *arg1 = (eqlib::SItemPlacementStatsDisplay *) 0 ;
  
  arg1 = (eqlib::SItemPlacementStatsDisplay *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetDebugShaderPath(void * jarg1, char * jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetDebugShaderPath((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetReleaseShaderPath(void * jarg1, char * jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetReleaseShaderPath((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDesktopWidth(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetDesktopWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDesktopHeight(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetDesktopHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDesktopDepth(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetDesktopDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDesktopRefreshRate(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetDesktopRefreshRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDisplayWidth(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetDisplayWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDisplayHeight(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetDisplayHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDisplayDepth(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetDisplayDepth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDisplayRefreshRate(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetDisplayRefreshRate();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_IsDisplayRgb565(void * jarg1) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (bool)(arg1)->IsDisplayRgb565();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetNumberOfModes(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetNumberOfModes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CRenderInterface_GetHWND(void * jarg1) {
  void * jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  HWND result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (arg1)->GetHWND();
  jresult = new HWND(result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetModeInfo(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  eqlib::SEQGraphicsDisplayMode *arg3 = (eqlib::SEQGraphicsDisplayMode *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::SEQGraphicsDisplayMode *)jarg3; 
  result = (int)(arg1)->GetModeInfo(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetMaxTextureWidth(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)((eqlib::CRenderInterface const *)arg1)->GetMaxTextureWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetMaxTextureHeight(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)((eqlib::CRenderInterface const *)arg1)->GetMaxTextureHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_SupportsDXT1Textures(void * jarg1) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (bool)(arg1)->SupportsDXT1Textures();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_SupportsDXT3Textures(void * jarg1) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (bool)(arg1)->SupportsDXT3Textures();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_Supports4444Textures(void * jarg1) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (bool)(arg1)->Supports4444Textures();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_SupportsLargeTextures(void * jarg1) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (bool)(arg1)->SupportsLargeTextures();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetTotalTextureMemory(void * jarg1) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (int)(arg1)->GetTotalTextureMemory();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_GetFullScreen(void * jarg1) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (bool)(arg1)->GetFullScreen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_EnumerateDevices(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  eqlib::SDeviceInfo *arg2 = (eqlib::SDeviceInfo *) 0 ;
  int *arg3 = (int *) 0 ;
  HINSTANCE arg4 ;
  HINSTANCE *argp4 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (eqlib::SDeviceInfo *)jarg2; 
  arg3 = (int *)jarg3; 
  argp4 = (HINSTANCE *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HINSTANCE", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (int)(arg1)->EnumerateDevices(arg2,arg3,SWIG_STD_MOVE(arg4));
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_InitDevice(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  HWND arg3 ;
  bool arg4 ;
  HWND *argp3 ;
  bool result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = (HWND *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return 0;
  }
  arg3 = *argp3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->InitDevice(arg2,SWIG_STD_MOVE(arg3),arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ReleaseDevice(void * jarg1, unsigned int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ReleaseDevice(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetResolutionBasedOnDesktop(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->SetResolutionBasedOnDesktop();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetResolution__SWIG_0(void * jarg1, int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetResolution(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetResolution__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->SetResolution(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_Unknown0x70(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->Unknown0x70();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetFullscreen(void * jarg1, unsigned int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetFullscreen(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetFog(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, float jarg5, void * jarg6) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool arg2 ;
  int arg3 ;
  int arg4 ;
  float arg5 ;
  RGB arg6 ;
  RGB *argp6 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (float)jarg5; 
  argp6 = (RGB *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null RGB", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->SetFog(arg2,arg3,arg4,arg5,SWIG_STD_MOVE(arg6));
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetGammaLevel(void * jarg1, float jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetGammaLevel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_RestoreDesktopGammaRamp(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->RestoreDesktopGammaRamp();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetDesktopGammaRampForWindowedMode(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->SetDesktopGammaRampForWindowedMode();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_DrawLine2D(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  glm::vec3 *arg2 = 0 ;
  glm::vec3 *arg3 = 0 ;
  RGB arg4 ;
  RGB *argp4 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  arg3 = (glm::vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  argp4 = (RGB *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null RGB", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->DrawLine2D((glm::vec3 const &)*arg2,(glm::vec3 const &)*arg3,SWIG_STD_MOVE(arg4));
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_DrawLine3D(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  glm::vec3 *arg2 = 0 ;
  glm::vec3 *arg3 = 0 ;
  RGB arg4 ;
  RGB *argp4 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  arg3 = (glm::vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  argp4 = (RGB *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null RGB", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->DrawLine3D((glm::vec3 const &)*arg2,(glm::vec3 const &)*arg3,SWIG_STD_MOVE(arg4));
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_DrawWrappedText__SWIG_0(void * jarg1, int jarg2, char * jarg3, void * jarg4, void * jarg5, void * jarg6, unsigned short jarg7, int jarg8) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  eqlib::CXRect *arg4 = 0 ;
  eqlib::CXRect *arg5 = 0 ;
  COLORREF arg6 ;
  uint16_t arg7 ;
  int arg8 ;
  COLORREF *argp6 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (eqlib::CXRect *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXRect const & is null", 0);
    return 0;
  } 
  arg5 = (eqlib::CXRect *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXRect const & is null", 0);
    return 0;
  } 
  argp6 = (COLORREF *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null COLORREF", 0);
    return 0;
  }
  arg6 = *argp6; 
  arg7 = (uint16_t)jarg7; 
  arg8 = (int)jarg8; 
  result = (int)(arg1)->DrawWrappedText(arg2,(char const *)arg3,(eqlib::CXRect const &)*arg4,(eqlib::CXRect const &)*arg5,SWIG_STD_MOVE(arg6),arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_DrawWrappedText__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  eqlib::CTextObjectInterface *arg2 = (eqlib::CTextObjectInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (eqlib::CTextObjectInterface *)jarg2; 
  result = (int)(arg1)->DrawWrappedText(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_DrawTexturedQuad(void * jarg1, void * jarg2, void * jarg3, void * jarg4, void * jarg5) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  glm::vec3 *arg2 = (glm::vec3 *) 0 ;
  glm::vec2 *arg3 = (glm::vec2 *) 0 ;
  RGB arg4 ;
  eqlib::BMI *arg5 = (eqlib::BMI *) 0 ;
  RGB *argp4 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (glm::vec3 *)jarg2; 
  arg3 = (glm::vec2 *)jarg3; 
  argp4 = (RGB *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null RGB", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (eqlib::BMI *)jarg5; 
  result = (int)(arg1)->DrawTexturedQuad(arg2,arg3,SWIG_STD_MOVE(arg4),arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_DrawTintedBlendTexturedQuad(void * jarg1, void * jarg2, void * jarg3, int jarg4, int jarg5, void * jarg6, void * jarg7, unsigned int jarg8) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  glm::vec3 *arg2 = (glm::vec3 *) 0 ;
  glm::vec2 *arg3 = (glm::vec2 *) 0 ;
  int arg4 ;
  int arg5 ;
  eqlib::BMI *arg6 = (eqlib::BMI *) 0 ;
  eqlib::BMI *arg7 = (eqlib::BMI *) 0 ;
  bool arg8 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (glm::vec3 *)jarg2; 
  arg3 = (glm::vec2 *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (eqlib::BMI *)jarg6; 
  arg7 = (eqlib::BMI *)jarg7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->DrawTintedBlendTexturedQuad(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_DrawQuad(void * jarg1, void * jarg2, void * jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  glm::vec3 *arg2 = (glm::vec3 *) 0 ;
  RGB arg3 ;
  RGB *argp3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (glm::vec3 *)jarg2; 
  argp3 = (RGB *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null RGB", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->DrawQuad(arg2,SWIG_STD_MOVE(arg3));
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ClearDeferred2D(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->ClearDeferred2D();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ClearBackBufferToBlack(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->ClearBackBufferToBlack();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_RenderScene(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->RenderScene();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_RenderBlind(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->RenderBlind();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_UpdateDisplay(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->UpdateDisplay();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetCensorship(void * jarg1, unsigned int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCensorship(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetCurrentLanguage(void * jarg1, int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetCurrentLanguage(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ClearDisplayBuffers(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->ClearDisplayBuffers();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ScreenCapture(void * jarg1, char * jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->ScreenCapture((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ScreenCaptureToBMI(void * jarg1, void * jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  eqlib::BMI **arg2 = (eqlib::BMI **) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (eqlib::BMI **)jarg2; 
  (arg1)->ScreenCaptureToBMI(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CRenderInterface_SetRenderCallback(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  eqlib::RenderCallbackPtr arg2 = (eqlib::RenderCallbackPtr) 0 ;
  eqlib::RenderCallbackPtr result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (eqlib::RenderCallbackPtr)jarg2; 
  result = (eqlib::RenderCallbackPtr)(arg1)->SetRenderCallback(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_RotateStats(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->RotateStats();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetItemPlacementStats(void * jarg1, void * jarg2, unsigned int jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  eqlib::SItemPlacementStatsDisplay *arg2 = (eqlib::SItemPlacementStatsDisplay *) 0 ;
  bool arg3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (eqlib::SItemPlacementStatsDisplay *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetItemPlacementStats((eqlib::SItemPlacementStatsDisplay const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ShowItemPlacementStats(void * jarg1, unsigned int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ShowItemPlacementStats(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_TransformWorldToCamera(void * jarg1, void * jarg2, void * jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  glm::vec3 *arg2 = 0 ;
  glm::vec3 *arg3 = 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 const & is null", 0);
    return ;
  } 
  arg3 = (glm::vec3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 & is null", 0);
    return ;
  } 
  (arg1)->TransformWorldToCamera((glm::vec3 const &)*arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_GetEyeOffset(void * jarg1, void * jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  glm::vec3 *arg2 = 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (glm::vec3 *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "glm::vec3 & is null", 0);
    return ;
  } 
  (arg1)->GetEyeOffset(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_SetDebugFlags(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  uint32_t arg2 ;
  uint32_t result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (uint32_t)(arg1)->SetDebugFlags(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CRenderInterface_GetCurrentDeviceName(void * jarg1) {
  char * jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (char *)(arg1)->GetCurrentDeviceName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ParsePatchLighting(void * jarg1, unsigned int jarg2, char * jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  uint32_t arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->ParsePatchLighting(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_EnableAutoMipMapping(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->EnableAutoMipMapping(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetRenderOption(void * jarg1, int jarg2, int jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetRenderOption(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CRenderInterface_GetFogEnd(void * jarg1) {
  float jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (float)(arg1)->GetFogEnd();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CRenderInterface_GetFogStart(void * jarg1) {
  float jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (float)(arg1)->GetFogStart();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CRenderInterface_GetFogColor(void * jarg1) {
  unsigned int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (uint32_t)(arg1)->GetFogColor();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CRenderInterface_GetDeviceFeature(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetDeviceFeature(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_DisplayStats(void * jarg1, int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->DisplayStats(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_EnableObjectPreview(void * jarg1, unsigned int jarg2, int jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  bool arg2 ;
  int arg3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  (arg1)->EnableObjectPreview(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_IsObjectPreviewEnabled(void * jarg1, int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->IsObjectPreviewEnabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetObjectPreviewActor(void * jarg1, void * jarg2, int jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  int arg3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetObjectPreviewActor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_DrawObjectPreview(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  eqlib::CXRect *arg2 = 0 ;
  COLORREF arg3 ;
  int arg4 ;
  COLORREF *argp3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (eqlib::CXRect *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXRect const & is null", 0);
    return ;
  } 
  argp3 = (COLORREF *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null COLORREF", 0);
    return ;
  }
  arg3 = *argp3; 
  arg4 = (int)jarg4; 
  (arg1)->DrawObjectPreview((eqlib::CXRect const &)*arg2,SWIG_STD_MOVE(arg3),arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ResizeObjectPreview(void * jarg1, int jarg2, int jarg3, int jarg4) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->ResizeObjectPreview(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetObjectPreviewMode(void * jarg1, int jarg2) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetObjectPreviewMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetPostEffect(void * jarg1, int jarg2, int jarg3, float jarg4, unsigned int jarg5, void * jarg6) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  float arg4 ;
  uint32_t arg5 ;
  COLOR *arg6 = (COLOR *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (uint32_t)jarg5; 
  arg6 = (COLOR *)jarg6; 
  (arg1)->SetPostEffect(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetPersistentPostEffect(void * jarg1, int jarg2, unsigned int jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetPersistentPostEffect(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_SetPersistentIntensity(void * jarg1, int jarg2, float jarg3) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetPersistentIntensity(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CRenderInterface_GetScreenCapData(void * jarg1) {
  void * jresult ;
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  ID3DXBuffer *result = 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  result = (ID3DXBuffer *)(arg1)->GetScreenCapData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CRenderInterface_ClearScreenCapData(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  (arg1)->ClearScreenCapData();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CRenderInterface(void * jarg1) {
  eqlib::CRenderInterface *arg1 = (eqlib::CRenderInterface *) 0 ;
  
  arg1 = (eqlib::CRenderInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_NUM_BLEND_MATRICES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::NUM_BLEND_MATRICES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_BUFFER_SET_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_BUFFER_SET;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_EFFECTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_EFFECTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_RENDER_EFFECTS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_RENDER_EFFECTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_VERTEX_DECLARATIONS_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_VERTEX_DECLARATIONS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_EFFECT_PASS_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_EFFECT_PASS_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectInterface_SetText(void * jarg1, char * jarg2) {
  eqlib::CTextObjectInterface *arg1 = (eqlib::CTextObjectInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::CTextObjectInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetText((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectInterface_GetText(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectInterface *arg1 = (eqlib::CTextObjectInterface *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CTextObjectInterface *)jarg1; 
  result = (eqlib::CXStr *) &(arg1)->GetText();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectInterface_SetParameters__SWIG_0(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, unsigned short jarg6, int jarg7) {
  eqlib::CTextObjectInterface *arg1 = (eqlib::CTextObjectInterface *) 0 ;
  int arg2 ;
  eqlib::CXRect *arg3 = 0 ;
  eqlib::CXRect *arg4 = 0 ;
  COLORREF arg5 ;
  uint16_t arg6 ;
  int arg7 ;
  COLORREF *argp5 ;
  
  arg1 = (eqlib::CTextObjectInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CXRect *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXRect const & is null", 0);
    return ;
  } 
  arg4 = (eqlib::CXRect *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXRect const & is null", 0);
    return ;
  } 
  argp5 = (COLORREF *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null COLORREF", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = (uint16_t)jarg6; 
  arg7 = (int)jarg7; 
  (arg1)->SetParameters(arg2,(eqlib::CXRect const &)*arg3,(eqlib::CXRect const &)*arg4,SWIG_STD_MOVE(arg5),arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectInterface_SetParameters__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, void * jarg8, unsigned short jarg9, int jarg10) {
  eqlib::CTextObjectInterface *arg1 = (eqlib::CTextObjectInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  eqlib::CXRect *arg7 = 0 ;
  COLORREF arg8 ;
  uint16_t arg9 ;
  int arg10 ;
  COLORREF *argp8 ;
  
  arg1 = (eqlib::CTextObjectInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (eqlib::CXRect *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXRect const & is null", 0);
    return ;
  } 
  argp8 = (COLORREF *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null COLORREF", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = (uint16_t)jarg9; 
  arg10 = (int)jarg10; 
  (arg1)->SetParameters(arg2,arg3,arg4,arg5,arg6,(eqlib::CXRect const &)*arg7,SWIG_STD_MOVE(arg8),arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTextObjectInterface(void * jarg1) {
  eqlib::CTextObjectInterface *arg1 = (eqlib::CTextObjectInterface *) 0 ;
  
  arg1 = (eqlib::CTextObjectInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_GetText(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (eqlib::CXStr *) &(arg1)->GetText();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_SetText(void * jarg1, char * jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetText((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_GetColor(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  COLORREF result;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = ((eqlib::CTextObjectBase const *)arg1)->GetColor();
  jresult = new COLORREF(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_GetRect(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CXRect *result = 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (eqlib::CXRect *) &((eqlib::CTextObjectBase const *)arg1)->GetRect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_text_set(void * jarg1, void * jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CXStr *arg2 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2; 
  if (arg1) (arg1)->m_text = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_m_text_get(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (eqlib::CXStr *)& ((arg1)->m_text);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_font_set(void * jarg1, int jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_font = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTextObjectBase_m_font_get(void * jarg1) {
  int jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (int) ((arg1)->m_font);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_rect_set(void * jarg1, void * jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CXRect *arg2 = (eqlib::CXRect *) 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = (eqlib::CXRect *)jarg2; 
  if (arg1) (arg1)->m_rect = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_m_rect_get(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CXRect *result = 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (eqlib::CXRect *)& ((arg1)->m_rect);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_color_set(void * jarg1, void * jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  COLORREF arg2 ;
  COLORREF *argp2 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  argp2 = (COLORREF *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null COLORREF", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_color = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_m_color_get(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  COLORREF result;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result =  ((arg1)->m_color);
  jresult = new COLORREF(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_pNext_set(void * jarg1, void * jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CTextObjectBase *arg2 = (eqlib::CTextObjectBase *) 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = (eqlib::CTextObjectBase *)jarg2; 
  if (arg1) (arg1)->m_pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_m_pNext_get(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CTextObjectBase *result = 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (eqlib::CTextObjectBase *) ((arg1)->m_pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_pPrev_set(void * jarg1, void * jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CTextObjectBase *arg2 = (eqlib::CTextObjectBase *) 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = (eqlib::CTextObjectBase *)jarg2; 
  if (arg1) (arg1)->m_pPrev = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_m_pPrev_get(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  eqlib::CTextObjectBase *result = 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (eqlib::CTextObjectBase *) ((arg1)->m_pPrev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_pVertexBuffer_set(void * jarg1, void * jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  IDirect3DVertexBuffer9 *arg2 = (IDirect3DVertexBuffer9 *) 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = (IDirect3DVertexBuffer9 *)jarg2; 
  if (arg1) (arg1)->m_pVertexBuffer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObjectBase_m_pVertexBuffer_get(void * jarg1) {
  void * jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  IDirect3DVertexBuffer9 *result = 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (IDirect3DVertexBuffer9 *) ((arg1)->m_pVertexBuffer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_dirty_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_dirty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTextObjectBase_m_dirty_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (bool) ((arg1)->m_dirty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_render_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->m_render = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTextObjectBase_m_render_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (bool) ((arg1)->m_render);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTextObjectBase_m_maxLength_set(void * jarg1, int jarg2) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_maxLength = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTextObjectBase_m_maxLength_get(void * jarg1) {
  int jresult ;
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  result = (int) ((arg1)->m_maxLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTextObjectBase(void * jarg1) {
  eqlib::CTextObjectBase *arg1 = (eqlib::CTextObjectBase *) 0 ;
  
  arg1 = (eqlib::CTextObjectBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTextObject_GetClipRect(void * jarg1) {
  void * jresult ;
  eqlib::CTextObject *arg1 = (eqlib::CTextObject *) 0 ;
  eqlib::CXRect *result = 0 ;
  
  arg1 = (eqlib::CTextObject *)jarg1; 
  result = (eqlib::CXRect *) &((eqlib::CTextObject const *)arg1)->GetClipRect();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_CTextObject_GetFlags(void * jarg1) {
  unsigned short jresult ;
  eqlib::CTextObject *arg1 = (eqlib::CTextObject *) 0 ;
  uint16_t result;
  
  arg1 = (eqlib::CTextObject *)jarg1; 
  result = (uint16_t)((eqlib::CTextObject const *)arg1)->GetFlags();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTextObject(void * jarg1) {
  eqlib::CTextObject *arg1 = (eqlib::CTextObject *) 0 ;
  
  arg1 = (eqlib::CTextObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CActorInterfaceNode() {
  void * jresult ;
  eqlib::CActorInterfaceNode *result = 0 ;
  
  result = (eqlib::CActorInterfaceNode *)new eqlib::CActorInterfaceNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CActorInterfaceNode(void * jarg1) {
  eqlib::CActorInterfaceNode *arg1 = (eqlib::CActorInterfaceNode *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_pPrev_set(void * jarg1, void * jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  eqlib::ActorAnimation *arg2 = (eqlib::ActorAnimation *) 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (eqlib::ActorAnimation *)jarg2; 
  if (arg1) (arg1)->pPrev = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorAnimation_pPrev_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  eqlib::ActorAnimation *result = 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (eqlib::ActorAnimation *) ((arg1)->pPrev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_pNext_set(void * jarg1, void * jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  eqlib::ActorAnimation *arg2 = (eqlib::ActorAnimation *) 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (eqlib::ActorAnimation *)jarg2; 
  if (arg1) (arg1)->pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorAnimation_pNext_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  eqlib::ActorAnimation *result = 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (eqlib::ActorAnimation *) ((arg1)->pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_Name_set(void * jarg1, char * jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 30-1);
      arg1->Name[30-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ActorAnimation_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_pActordef_set(void * jarg1, void * jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pActordef = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorAnimation_pActordef_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (void *) ((arg1)->pActordef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_Anim_set(void * jarg1, void * jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  void **arg2 = (void **) 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (void **)jarg2; 
  if (arg1) (arg1)->Anim = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorAnimation_Anim_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  void **result = 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (void **) ((arg1)->Anim);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_NumBones_set(void * jarg1, int jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NumBones = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActorAnimation_NumBones_get(void * jarg1) {
  int jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  int result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (int) ((arg1)->NumBones);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_bUsesLuclinAnimations_set(void * jarg1, unsigned int jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUsesLuclinAnimations = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorAnimation_bUsesLuclinAnimations_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  bool result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (bool) ((arg1)->bUsesLuclinAnimations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_bNewStyleModel_set(void * jarg1, unsigned int jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNewStyleModel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorAnimation_bNewStyleModel_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  bool result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (bool) ((arg1)->bNewStyleModel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_ParticleEmitterScaleFactor_set(void * jarg1, float jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ParticleEmitterScaleFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ActorAnimation_ParticleEmitterScaleFactor_get(void * jarg1) {
  float jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (float) ((arg1)->ParticleEmitterScaleFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_TargetIndicatorScaleFactor_set(void * jarg1, float jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TargetIndicatorScaleFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ActorAnimation_TargetIndicatorScaleFactor_get(void * jarg1) {
  float jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (float) ((arg1)->TargetIndicatorScaleFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_FirstPersonCameraOffset_set(void * jarg1, float jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->FirstPersonCameraOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ActorAnimation_FirstPersonCameraOffset_get(void * jarg1) {
  float jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (float) ((arg1)->FirstPersonCameraOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_ThirdPersonCameraOffset_set(void * jarg1, float jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ThirdPersonCameraOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ActorAnimation_ThirdPersonCameraOffset_get(void * jarg1) {
  float jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (float) ((arg1)->ThirdPersonCameraOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_VerticalCameraOffset_set(void * jarg1, float jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->VerticalCameraOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ActorAnimation_VerticalCameraOffset_get(void * jarg1) {
  float jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (float) ((arg1)->VerticalCameraOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_CollisionSphereScaleFactor_set(void * jarg1, float jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->CollisionSphereScaleFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ActorAnimation_CollisionSphereScaleFactor_get(void * jarg1) {
  float jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (float) ((arg1)->CollisionSphereScaleFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_ZoomCameraMinimumDistance_set(void * jarg1, float jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ZoomCameraMinimumDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ActorAnimation_ZoomCameraMinimumDistance_get(void * jarg1) {
  float jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  float result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (float) ((arg1)->ZoomCameraMinimumDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_NumAnimations_set(void * jarg1, int jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NumAnimations = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActorAnimation_NumAnimations_get(void * jarg1) {
  int jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  int result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (int) ((arg1)->NumAnimations);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorAnimation_NumAnimationSlots_set(void * jarg1, int jarg2) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NumAnimationSlots = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActorAnimation_NumAnimationSlots_get(void * jarg1) {
  int jresult ;
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  int result;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  result = (int) ((arg1)->NumAnimationSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActorAnimation() {
  void * jresult ;
  eqlib::ActorAnimation *result = 0 ;
  
  result = (eqlib::ActorAnimation *)new eqlib::ActorAnimation();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ActorAnimation(void * jarg1) {
  eqlib::ActorAnimation *arg1 = (eqlib::ActorAnimation *) 0 ;
  
  arg1 = (eqlib::ActorAnimation *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorApplicationData_GetActorApplicationDataType(void * jarg1) {
  int jresult ;
  eqlib::CActorApplicationData *arg1 = (eqlib::CActorApplicationData *) 0 ;
  eqlib::CActorApplicationData::EApplicationDataType result;
  
  arg1 = (eqlib::CActorApplicationData *)jarg1; 
  result = (eqlib::CActorApplicationData::EApplicationDataType)((eqlib::CActorApplicationData const *)arg1)->GetActorApplicationDataType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorApplicationData_AsMissileBase__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorApplicationData *arg1 = (eqlib::CActorApplicationData *) 0 ;
  eqlib::MissileBase *result = 0 ;
  
  arg1 = (eqlib::CActorApplicationData *)jarg1; 
  result = (eqlib::MissileBase *)((eqlib::CActorApplicationData const *)arg1)->AsMissileBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorApplicationData_AsPlayerBase__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorApplicationData *arg1 = (eqlib::CActorApplicationData *) 0 ;
  eqlib::PlayerBase *result = 0 ;
  
  arg1 = (eqlib::CActorApplicationData *)jarg1; 
  result = (eqlib::PlayerBase *)((eqlib::CActorApplicationData const *)arg1)->AsPlayerBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorApplicationData_AsObject__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorApplicationData *arg1 = (eqlib::CActorApplicationData *) 0 ;
  eqlib::EQObject *result = 0 ;
  
  arg1 = (eqlib::CActorApplicationData *)jarg1; 
  result = (eqlib::EQObject *)((eqlib::CActorApplicationData const *)arg1)->AsObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorApplicationData_AsSwitch__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorApplicationData *arg1 = (eqlib::CActorApplicationData *) 0 ;
  eqlib::EQSwitch *result = 0 ;
  
  arg1 = (eqlib::CActorApplicationData *)jarg1; 
  result = (eqlib::EQSwitch *)((eqlib::CActorApplicationData const *)arg1)->AsSwitch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorApplicationData_AsPlacedItem__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorApplicationData *arg1 = (eqlib::CActorApplicationData *) 0 ;
  eqlib::EQPlacedItem *result = 0 ;
  
  arg1 = (eqlib::CActorApplicationData *)jarg1; 
  result = (eqlib::EQPlacedItem *)((eqlib::CActorApplicationData const *)arg1)->AsPlacedItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CActorApplicationData(void * jarg1) {
  eqlib::CActorApplicationData *arg1 = (eqlib::CActorApplicationData *) 0 ;
  
  arg1 = (eqlib::CActorApplicationData *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CActorDefinitionInterface_GetTag(void * jarg1) {
  char * jresult ;
  eqlib::CActorDefinitionInterface *arg1 = (eqlib::CActorDefinitionInterface *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CActorDefinitionInterface *)jarg1; 
  result = (char *)((eqlib::CActorDefinitionInterface const *)arg1)->GetTag();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorDefinitionInterface_ComputeboundingRadius(void * jarg1) {
  float jresult ;
  eqlib::CActorDefinitionInterface *arg1 = (eqlib::CActorDefinitionInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorDefinitionInterface *)jarg1; 
  result = (float)(arg1)->ComputeboundingRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorDefinitionInterface_SetBoundingRadius(void * jarg1, float jarg2) {
  eqlib::CActorDefinitionInterface *arg1 = (eqlib::CActorDefinitionInterface *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorDefinitionInterface *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetBoundingRadius(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorDefinitionInterface_AsActorDefinition__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorDefinitionInterface *arg1 = (eqlib::CActorDefinitionInterface *) 0 ;
  eqlib::CActorDefinition *result = 0 ;
  
  arg1 = (eqlib::CActorDefinitionInterface *)jarg1; 
  result = (eqlib::CActorDefinition *)(arg1)->AsActorDefinition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorDefinitionInterface_AsActorDefinitionServer__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorDefinitionInterface *arg1 = (eqlib::CActorDefinitionInterface *) 0 ;
  eqlib::CActorDefinitionServer *result = 0 ;
  
  arg1 = (eqlib::CActorDefinitionInterface *)jarg1; 
  result = (eqlib::CActorDefinitionServer *)(arg1)->AsActorDefinitionServer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorDefinitionInterface_EnableNormalRendering(void * jarg1, unsigned int jarg2) {
  eqlib::CActorDefinitionInterface *arg1 = (eqlib::CActorDefinitionInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActorDefinitionInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableNormalRendering(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CActorDefinitionInterface(void * jarg1) {
  eqlib::CActorDefinitionInterface *arg1 = (eqlib::CActorDefinitionInterface *) 0 ;
  
  arg1 = (eqlib::CActorDefinitionInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CActorInterfaceBase(void * jarg1) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterfaceBase_IsDisabled(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (bool)((eqlib::CActorInterfaceBase const *)arg1)->IsDisabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetDisabled(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDisabled(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetDisabledDesignOverride(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetDisabledDesignOverride(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterfaceBase_GetDisabledDesignOverride(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (bool)((eqlib::CActorInterfaceBase const *)arg1)->GetDisabledDesignOverride();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_GetEmitterScalingRadius(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)((eqlib::CActorInterfaceBase const *)arg1)->GetEmitterScalingRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetEmitterScalingRadius(void * jarg1, float jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetEmitterScalingRadius(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetSurfacePitchType(void * jarg1, int jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSurfacePitchType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_GetApplicationData__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CActorApplicationData *result = 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (eqlib::CActorApplicationData *)((eqlib::CActorInterfaceBase const *)arg1)->GetApplicationData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetActorApplicationData(void * jarg1, void * jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CActorApplicationData *arg2 = (eqlib::CActorApplicationData *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CActorApplicationData *)jarg2; 
  (arg1)->SetActorApplicationData(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetActorType(void * jarg1, int jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::EActorType arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::EActorType)jarg2; 
  (arg1)->SetActorType(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterfaceBase_GetActorType(void * jarg1) {
  int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::EActorType result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (eqlib::EActorType)(arg1)->GetActorType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetInvisible(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInvisible(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterfaceBase_IsInvisible(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (bool)((eqlib::CActorInterfaceBase const *)arg1)->IsInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterfaceBase_GetCollisionVolumeType(void * jarg1) {
  int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (int)((eqlib::CActorInterfaceBase const *)arg1)->GetCollisionVolumeType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_GetCollisionVolumeSphere(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  CSphere result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = ((eqlib::CActorInterfaceBase const *)arg1)->GetCollisionVolumeSphere();
  jresult = new CSphere(result); 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_GetCollisionVolumeRadius(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)((eqlib::CActorInterfaceBase const *)arg1)->GetCollisionVolumeRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetCllisionVolumeRadius(void * jarg1, float jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCllisionVolumeRadius(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_GetCollisionBox(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  bool arg2 ;
  bool arg3 ;
  CAABox result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = ((eqlib::CActorInterfaceBase const *)arg1)->GetCollisionBox(arg2,arg3);
  jresult = new CAABox(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetCollisionRestrictionMask(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->SetCollisionRestrictionMask(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterfaceBase_GetCollisionRestrictionMask(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (uint32_t)((eqlib::CActorInterfaceBase const *)arg1)->GetCollisionRestrictionMask();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_GetCollisionGroup(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (void *)(arg1)->GetCollisionGroup();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetCollisionGroup(void * jarg1, void * jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetCollisionGroup(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_GetBoundingRadius(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)((eqlib::CActorInterfaceBase const *)arg1)->GetBoundingRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetBoundingRadius(void * jarg1, float jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetBoundingRadius(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_ComputeBoundingRadius(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)(arg1)->ComputeBoundingRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_Update(void * jarg1) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  (arg1)->Update();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterfaceBase_Move(void * jarg1, void * jarg2) {
  int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CVector3 *arg2 = (eqlib::CVector3 *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2; 
  result = (int)(arg1)->Move((eqlib::CVector3 const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_Orient(void * jarg1, void * jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CVector3 *arg2 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2; 
  (arg1)->Orient((eqlib::CVector3 const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_Scale(void * jarg1, float jarg2, unsigned int jarg3) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->Scale(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_GetPosition__SWIG_0(void * jarg1, void * jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CVector3 *arg2 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2; 
  ((eqlib::CActorInterfaceBase const *)arg1)->GetPosition(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_GetPosition__SWIG_1(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CVector3 *result = 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (eqlib::CVector3 *) &((eqlib::CActorInterfaceBase const *)arg1)->GetPosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_GetOrientation(void * jarg1, void * jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CVector3 *arg2 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2; 
  ((eqlib::CActorInterfaceBase const *)arg1)->GetOrientation(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_GetHeading(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)((eqlib::CActorInterfaceBase const *)arg1)->GetHeading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_GetPitch(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)((eqlib::CActorInterfaceBase const *)arg1)->GetPitch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_GetRoll(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)((eqlib::CActorInterfaceBase const *)arg1)->GetRoll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetHeading(void * jarg1, float jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetHeading(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetPitch(void * jarg1, float jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetPitch(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetRoll(void * jarg1, float jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetRoll(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_GetScaleFactor(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)((eqlib::CActorInterfaceBase const *)arg1)->GetScaleFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetCollisionSurfaceNormal(void * jarg1, void * jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CVector3 *arg2 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2; 
  (arg1)->SetCollisionSurfaceNormal(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_GetDefinition(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CActorDefinitionInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (eqlib::CActorDefinitionInterface *)((eqlib::CActorInterfaceBase const *)arg1)->GetDefinition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_GetActorDataBase__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CActorDataBase *result = 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (eqlib::CActorDataBase *) &(arg1)->GetActorDataBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_AsActor__SWIG_0(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CActor *result = 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (eqlib::CActor *)(arg1)->AsActor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterfaceBase_HasNewStyleHierarchicalModel(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (bool)((eqlib::CActorInterfaceBase const *)arg1)->HasNewStyleHierarchicalModel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterfaceBase_GetActorIndex(void * jarg1) {
  int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (int)((eqlib::CActorInterfaceBase const *)arg1)->GetActorIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CActorInterfaceBase_GetActorName(void * jarg1) {
  char * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (char *)((eqlib::CActorInterfaceBase const *)arg1)->GetActorName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterfaceBase_SetCollisionSphereScaleFactor(void * jarg1, float jarg2) {
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetCollisionSphereScaleFactor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterfaceBase_GetCollisionSphereScaleFactor(void * jarg1) {
  float jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (float)((eqlib::CActorInterfaceBase const *)arg1)->GetCollisionSphereScaleFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterfaceBase_GetTerrainObjectInterface(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CTerrainObjectInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (eqlib::CTerrainObjectInterface *)((eqlib::CActorInterfaceBase const *)arg1)->GetTerrainObjectInterface();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterfaceBase_GetActorClass(void * jarg1) {
  int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::EActorClass result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  result = (eqlib::EActorClass)((eqlib::CActorInterfaceBase const *)arg1)->GetActorClass();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterfaceBase_FindIntersection__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CCollisionInfoSphere *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CCollisionInfoSphere *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CCollisionInfoSphere & is null", 0);
    return 0;
  } 
  result = (bool)((eqlib::CActorInterfaceBase const *)arg1)->FindIntersection(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterfaceBase_FindIntersection__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CCollisionInfoRay *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CCollisionInfoRay *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CCollisionInfoRay & is null", 0);
    return 0;
  } 
  result = (bool)((eqlib::CActorInterfaceBase const *)arg1)->FindIntersection(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterfaceBase_FindIntersection__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::CActorInterfaceBase *arg1 = (eqlib::CActorInterfaceBase *) 0 ;
  eqlib::CCollisionInfoLineSegment *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterfaceBase *)jarg1; 
  arg2 = (eqlib::CCollisionInfoLineSegment *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CCollisionInfoLineSegment & is null", 0);
    return 0;
  } 
  result = (bool)((eqlib::CActorInterfaceBase const *)arg1)->FindIntersection(*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_ReplaceMaterial(void * jarg1, char * jarg2, char * jarg3, void * jarg4, unsigned int jarg5, char * jarg6, void * jarg7) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  RGB *arg4 = (RGB *) 0 ;
  bool arg5 ;
  char *arg6 = (char *) 0 ;
  RGB *arg7 = (RGB *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (RGB *)jarg4; 
  arg5 = jarg5 ? true : false; 
  arg6 = (char *)jarg6; 
  arg7 = (RGB *)jarg7; 
  result = (bool)(arg1)->ReplaceMaterial((char const *)arg2,(char const *)arg3,(RGB const *)arg4,arg5,(char const *)arg6,(RGB const *)arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_SetConditionalHide(void * jarg1, int jarg2, unsigned int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->SetConditionalHide(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_IsConditionalHide(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsConditionalHide(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterface_GetScaledAmbient(void * jarg1) {
  float jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (float)(arg1)->GetScaledAmbient();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_GetBonePosition(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  glm::vec3 *arg3 = (glm::vec3 *) 0 ;
  bool arg4 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (glm::vec3 *)jarg3; 
  arg4 = jarg4 ? true : false; 
  ((eqlib::CActorInterface const *)arg1)->GetBonePosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_GetBoneWorldPosition__SWIG_0(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  glm::vec3 *arg3 = (glm::vec3 *) 0 ;
  bool arg4 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (glm::vec3 *)jarg3; 
  arg4 = jarg4 ? true : false; 
  ((eqlib::CActorInterface const *)arg1)->GetBoneWorldPosition(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_GetBoneWorldPosition__SWIG_1(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  eqlib::CBoneInterface *arg2 = (eqlib::CBoneInterface *) 0 ;
  glm::vec3 *arg3 = (glm::vec3 *) 0 ;
  bool arg4 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (eqlib::CBoneInterface *)jarg2; 
  arg3 = (glm::vec3 *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->GetBoneWorldPosition(arg2,arg3,arg4);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_GetObjectToWorldMatrix(void * jarg1) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  glm::mat4x4 *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (glm::mat4x4 *)(arg1)->GetObjectToWorldMatrix();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetConstantAmbient(void * jarg1, void * jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  RGB *arg2 = (RGB *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (RGB *)jarg2; 
  (arg1)->SetConstantAmbient((RGB const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_SetMaterialLayer(void * jarg1, int jarg2, char * jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->SetMaterialLayer(arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetInvisibleAsAttachment(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetInvisibleAsAttachment(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetMaterialTint__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  RGB *arg2 = (RGB *) 0 ;
  bool arg3 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (RGB *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetMaterialTint((RGB const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetMaterialTint__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  RGB *arg3 = (RGB *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (RGB *)jarg3; 
  (arg1)->SetMaterialTint(arg2,(RGB const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetSecondaryMaterialTint__SWIG_0(void * jarg1, void * jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  RGB *arg2 = (RGB *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (RGB *)jarg2; 
  (arg1)->SetSecondaryMaterialTint((RGB const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetSecondaryMaterialTint__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  RGB *arg3 = (RGB *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (RGB *)jarg3; 
  (arg1)->SetSecondaryMaterialTint(arg2,(RGB const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetBoneScale(void * jarg1, int jarg2, float jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetBoneScale(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterface_GetBoneScale(void * jarg1, int jarg2) {
  float jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->GetBoneScale(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetBoneOrientation(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CVector3 *arg3 = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return ;
  } 
  (arg1)->SetBoneOrientation(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_GetBoneOrientation(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CVector3 *arg3 = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return ;
  } 
  (arg1)->GetBoneOrientation(arg2,*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetBonePosition(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CVector3 *arg3 = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return ;
  } 
  (arg1)->SetBonePosition(arg2,*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_ChangeBoneAttachment(void * jarg1, int jarg2, char * jarg3, void * jarg4) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  glm::mat4x4 *arg4 = (glm::mat4x4 *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (glm::mat4x4 *)jarg4; 
  result = (void *)(arg1)->ChangeBoneAttachment(arg2,(char const *)arg3,(glm::mat4x4 const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterface_GetBoneIndexByName(void * jarg1, char * jarg2) {
  int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((eqlib::CActorInterface const *)arg1)->GetBoneIndexByName((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_ReplaceCloakMaterials(void * jarg1, int jarg2, void * jarg3) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  RGB *arg3 = (RGB *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (RGB *)jarg3; 
  result = (bool)(arg1)->ReplaceCloakMaterials(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_ReplaceSpecialCloakMaterials(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->ReplaceSpecialCloakMaterials((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_SwapBody(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SwapBody(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetActorSpriteTint(void * jarg1, void * jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  RGB *arg2 = (RGB *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (RGB *)jarg2; 
  (arg1)->SetActorSpriteTint((RGB const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_SwapHead(void * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  uint32_t arg6 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  arg6 = (uint32_t)jarg6; 
  result = (bool)(arg1)->SwapHead((char const *)arg2,arg3,arg4,arg5,arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_GetDefaultEyeMaterialIndices(void * jarg1, void * jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  bool arg4 ;
  bool arg5 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int *)jarg2; 
  arg3 = (int *)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = jarg5 ? true : false; 
  (arg1)->GetDefaultEyeMaterialIndices(arg2,arg3,arg4,arg5);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_SetNgeFaceMaterial(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetNgeFaceMaterial((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_SetNgeEyeMaterial(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetNgeEyeMaterial(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_SetEyeMaterial(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->SetEyeMaterial(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterface_GetNumSkins(void * jarg1) {
  int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (int)((eqlib::CActorInterface const *)arg1)->GetNumSkins();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SwapNpcMaterials(void * jarg1, char * jarg2, char * jarg3, void * jarg4, void * jarg5) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  RGB *arg4 = (RGB *) 0 ;
  RGB *arg5 = (RGB *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (RGB *)jarg4; 
  arg5 = (RGB *)jarg5; 
  (arg1)->SwapNpcMaterials((char const *)arg2,(char const *)arg3,arg4,arg5);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterface_GetNumberOfBones(void * jarg1) {
  int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (int)((eqlib::CActorInterface const *)arg1)->GetNumberOfBones();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterface_GetNumberOfParticlePoints(void * jarg1) {
  int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (int)((eqlib::CActorInterface const *)arg1)->GetNumberOfParticlePoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_GetParticlePointData(void * jarg1, int jarg2, void * jarg3, void * jarg4, void * jarg5, void * jarg6, void * jarg7) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CXStr *arg3 = 0 ;
  int *arg4 = 0 ;
  eqlib::CVector3 *arg5 = 0 ;
  eqlib::CVector3 *arg6 = 0 ;
  eqlib::CVector3 *arg7 = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CXStr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr & is null", 0);
    return ;
  } 
  arg4 = (int *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "int & is null", 0);
    return ;
  } 
  arg5 = (eqlib::CVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return ;
  } 
  arg6 = (eqlib::CVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return ;
  } 
  arg7 = (eqlib::CVector3 *)jarg7;
  if (!arg7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return ;
  } 
  (arg1)->GetParticlePointData(arg2,*arg3,*arg4,*arg5,*arg6,*arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetParticlePointData(void * jarg1, int jarg2, void * jarg3, int jarg4, void * jarg5, void * jarg6, void * jarg7) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CXStr *arg3 = 0 ;
  int arg4 ;
  eqlib::CVector3 arg5 ;
  eqlib::CVector3 arg6 ;
  eqlib::CVector3 arg7 ;
  eqlib::CVector3 *argp5 ;
  eqlib::CVector3 *argp6 ;
  eqlib::CVector3 *argp7 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CXStr *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr & is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  argp5 = (eqlib::CVector3 *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CVector3", 0);
    return ;
  }
  arg5 = *argp5; 
  argp6 = (eqlib::CVector3 *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CVector3", 0);
    return ;
  }
  arg6 = *argp6; 
  argp7 = (eqlib::CVector3 *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::CVector3", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->SetParticlePointData(arg2,*arg3,arg4,SWIG_STD_MOVE(arg5),SWIG_STD_MOVE(arg6),SWIG_STD_MOVE(arg7));
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterface_GetNumberOfParticles(void * jarg1) {
  int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (int)(arg1)->GetNumberOfParticles();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_GetParticleData(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::SActorParticle *arg3 = (eqlib::SActorParticle *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::SActorParticle *)jarg3; 
  (arg1)->GetParticleData(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetParticleData(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::SActorParticle *arg3 = (eqlib::SActorParticle *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::SActorParticle *)jarg3; 
  (arg1)->SetParticleData(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_GetParticlePoint__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CParticlePointInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::CParticlePointInterface *)(arg1)->GetParticlePoint(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_GetParticlePoint__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CParticlePointInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (eqlib::CParticlePointInterface *)(arg1)->GetParticlePoint((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetStringSprite(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->SetStringSprite(arg2,(char const *)arg3,(char const *)arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetStringSpriteTint(void * jarg1, void * jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  RGB *arg2 = (RGB *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (RGB *)jarg2; 
  (arg1)->SetStringSpriteTint((RGB const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_EnumerateBones(void * jarg1, void * jarg2, int jarg3, unsigned int jarg4) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int (*arg2)(char const *) = (int (*)(char const *)) 0 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int (*)(char const *))jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->EnumerateBones(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_PutAllBonesInBoneGroup(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->PutAllBonesInBoneGroup(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetBone(void * jarg1, int jarg2, char * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetBone(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_ResetBone(void * jarg1, int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ResetBone(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_IsBoneSet(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((eqlib::CActorInterface const *)arg1)->IsBoneSet(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_GetAttachedActor(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CActorInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::CActorInterface *)((eqlib::CActorInterface const *)arg1)->GetAttachedActor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_HasAttachedActor(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (bool)((eqlib::CActorInterface const *)arg1)->HasAttachedActor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetAttachedActor__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  eqlib::CBoneInterface *arg2 = (eqlib::CBoneInterface *) 0 ;
  eqlib::CActorInterface *arg3 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (eqlib::CBoneInterface *)jarg2; 
  arg3 = (eqlib::CActorInterface *)jarg3; 
  (arg1)->SetAttachedActor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetAttachedActor__SWIG_1(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CActorInterface *arg3 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CActorInterface *)jarg3; 
  (arg1)->SetAttachedActor(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetAttachedActorSprite(void * jarg1, int jarg2, void * jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CActorInterface *arg3 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CActorInterface *)jarg3; 
  (arg1)->SetAttachedActorSprite(arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_GetBone__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  eqlib::CBoneInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (eqlib::CBoneInterface *)(arg1)->GetBone((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_GetBone__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CBoneInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::CBoneInterface *)(arg1)->GetBone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_GetBoneByIndex(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CBoneInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::CBoneInterface *)((eqlib::CActorInterface const *)arg1)->GetBoneByIndex(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActorInterface_GetBoneGroup(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CBoneGroupInterface *result = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::CBoneGroupInterface *)((eqlib::CActorInterface const *)arg1)->GetBoneGroup(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterface_PlayWeaponAnimation(void * jarg1, int jarg2, char * jarg3, char * jarg4, float jarg5, unsigned int jarg6, int jarg7, float jarg8) {
  int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  float arg5 ;
  bool arg6 ;
  int arg7 ;
  float arg8 ;
  int result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = (int)jarg7; 
  arg8 = (float)jarg8; 
  result = (int)(arg1)->PlayWeaponAnimation(arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_InitializeSkins(void * jarg1) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  (arg1)->InitializeSkins();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_PlayAttackParticle(void * jarg1) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  (arg1)->PlayAttackParticle();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_AddPointDefinition(void * jarg1, void * jarg2, int jarg3, void * jarg4, void * jarg5, void * jarg6) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  int arg3 ;
  eqlib::CVector3 *arg4 = 0 ;
  eqlib::CVector3 *arg5 = 0 ;
  eqlib::CVector3 *arg6 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr & is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  arg4 = (eqlib::CVector3 *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return ;
  } 
  arg5 = (eqlib::CVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return ;
  } 
  arg6 = (eqlib::CVector3 *)jarg6; 
  (arg1)->AddPointDefinition(*arg2,arg3,*arg4,*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_DeletePointDefinition(void * jarg1, void * jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr & is null", 0);
    return ;
  } 
  (arg1)->DeletePointDefinition(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_AddParticleDefinition(void * jarg1, void * jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  eqlib::SActorParticle *arg2 = (eqlib::SActorParticle *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (eqlib::SActorParticle *)jarg2; 
  (arg1)->AddParticleDefinition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_DeleteParticleDefinition(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->DeleteParticleDefinition(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_DisableAllParticles(void * jarg1) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  (arg1)->DisableAllParticles();
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterface_TestParticle(void * jarg1, int jarg2, char * jarg3, int jarg4, int jarg5) {
  int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int arg5 ;
  int result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (int)(arg1)->TestParticle(arg2,(char const *)arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetupAnimationParticles(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, void * jarg6) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  eqlib::CBoneGroupInterface *arg5 = (eqlib::CBoneGroupInterface *) 0 ;
  eqlib::CActorInterface *arg6 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (eqlib::CBoneGroupInterface *)jarg5; 
  arg6 = (eqlib::CActorInterface *)jarg6; 
  (arg1)->SetupAnimationParticles(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetupWeaponAnimationParticles(void * jarg1, int jarg2, int jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetupWeaponAnimationParticles(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_StartActorParticle(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  eqlib::CParticlePointInterface *arg3 = (eqlib::CParticlePointInterface *) 0 ;
  bool arg4 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::CParticlePointInterface *)jarg3; 
  arg4 = jarg4 ? true : false; 
  (arg1)->StartActorParticle(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetSpawnScaling(void * jarg1, int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetSpawnScaling(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_IsDPVSVisible(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (bool)(arg1)->IsDPVSVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetAlpha(void * jarg1, float jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAlpha(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterface_GetAlpha(void * jarg1) {
  float jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (float)((eqlib::CActorInterface const *)arg1)->GetAlpha();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_ResetParticleS(void * jarg1, int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->ResetParticleS(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_CastShadow(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->CastShadow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetParticleScaleFactor(void * jarg1, float jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetParticleScaleFactor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterface_GetParticleScaleFactor(void * jarg1) {
  float jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (float)((eqlib::CActorInterface const *)arg1)->GetParticleScaleFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetZOffset(void * jarg1, float jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetZOffset(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterface_GetZOffset(void * jarg1) {
  float jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (float)((eqlib::CActorInterface const *)arg1)->GetZOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterface_GetVerticalCameraOffset(void * jarg1) {
  float jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (float)((eqlib::CActorInterface const *)arg1)->GetVerticalCameraOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetDuplicateActor(void * jarg1, void * jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  (arg1)->SetDuplicateActor(arg2);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActorInterface_GetPitchOffset(void * jarg1) {
  float jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  float result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (float)((eqlib::CActorInterface const *)arg1)->GetPitchOffset();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_CreateActorParticle(void * jarg1, void * jarg2, unsigned int jarg3) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  eqlib::SActorParticle *arg2 = (eqlib::SActorParticle *) 0 ;
  bool arg3 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (eqlib::SActorParticle *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->CreateActorParticle(arg2,arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActorInterface_GetHighlightMode(void * jarg1) {
  int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (int)((eqlib::CActorInterface const *)arg1)->GetHighlightMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_SetHighlightMode(void * jarg1, int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetHighlightMode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_ShowParticlesWhenInvisible(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ShowParticlesWhenInvisible(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_ShouldShowParticlesWhenInvisible(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (bool)(arg1)->ShouldShowParticlesWhenInvisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_HasStaticCollisionMesh(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  result = (bool)((eqlib::CActorInterface const *)arg1)->HasStaticCollisionMesh();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_EnableDynamicBoundingSphereUpdates(void * jarg1, unsigned int jarg2) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->EnableDynamicBoundingSphereUpdates(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActorInterface_SwapMaterials(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SwapMaterials((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActorInterface_LoadMaterials(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  uint32_t arg2 ;
  eqlib::CVector3 *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  arg3 = (eqlib::CVector3 *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 const & is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  (arg1)->LoadMaterials(arg2,(eqlib::CVector3 const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CActorInterface(void * jarg1) {
  eqlib::CActorInterface *arg1 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CActorInterface *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_memoryPoolManagerType_set(void * jarg1, int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::EMemoryPoolManagerType arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (eqlib::EMemoryPoolManagerType)jarg2; 
  if (arg1) (arg1)->memoryPoolManagerType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActor_memoryPoolManagerType_get(void * jarg1) {
  int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::EMemoryPoolManagerType result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (eqlib::EMemoryPoolManagerType) ((arg1)->memoryPoolManagerType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bIsS3DCreated_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsS3DCreated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bIsS3DCreated_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bIsS3DCreated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bHasParentBone_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHasParentBone = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bHasParentBone_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bHasParentBone);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bUpdateScaledAmbient_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUpdateScaledAmbient = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bUpdateScaledAmbient_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bUpdateScaledAmbient);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_scaledAmbient_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scaledAmbient = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_scaledAmbient_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->scaledAmbient);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_scaledAmbientTarget_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scaledAmbientTarget = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_scaledAmbientTarget_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->scaledAmbientTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_particleScaleFactor_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->particleScaleFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_particleScaleFactor_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->particleScaleFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_collisionSphereScaleFactor_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->collisionSphereScaleFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_collisionSphereScaleFactor_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->collisionSphereScaleFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_updateAmbientTick_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->updateAmbientTick = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_updateAmbientTick_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (uint32_t) ((arg1)->updateAmbientTick);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_interpolateAmbientTick_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->interpolateAmbientTick = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_interpolateAmbientTick_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (uint32_t) ((arg1)->interpolateAmbientTick);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_pParentActor_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CActor *arg2 = (eqlib::CActor *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (eqlib::CActor *)jarg2; 
  if (arg1) (arg1)->pParentActor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_pParentActor_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CActor *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (eqlib::CActor *) ((arg1)->pParentActor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_pDPVSObject_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pDPVSObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_pDPVSObject_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  void *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (void *) ((arg1)->pDPVSObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_updateAmbientPosition_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  glm::vec3 arg2 ;
  glm::vec3 *argp2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  argp2 = (glm::vec3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null glm::vec3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->updateAmbientPosition = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_updateAmbientPosition_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  glm::vec3 result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result =  ((arg1)->updateAmbientPosition);
  jresult = new glm::vec3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_surfaceNormal_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  glm::vec3 arg2 ;
  glm::vec3 *argp2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  argp2 = (glm::vec3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null glm::vec3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->surfaceNormal = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_surfaceNormal_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  glm::vec3 result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result =  ((arg1)->surfaceNormal);
  jresult = new glm::vec3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_visibleIndex_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->visibleIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_visibleIndex_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (uint32_t) ((arg1)->visibleIndex);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_alpha_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->alpha = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_alpha_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->alpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bCastShadow_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bCastShadow = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bCastShadow_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bCastShadow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bNeverClip_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNeverClip = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bNeverClip_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bNeverClip);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bClientCreated_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bClientCreated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bClientCreated_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bClientCreated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_zOffset_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->zOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_zOffset_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->zOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_emitterScalingRadius_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->emitterScalingRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_emitterScalingRadius_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->emitterScalingRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_pDuplicateActor_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CActor *arg2 = (eqlib::CActor *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (eqlib::CActor *)jarg2; 
  if (arg1) (arg1)->pDuplicateActor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_pDuplicateActor_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CActor *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (eqlib::CActor *) ((arg1)->pDuplicateActor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bShowParticlesWhenInvisible_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowParticlesWhenInvisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bShowParticlesWhenInvisible_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bShowParticlesWhenInvisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_pAreaPortalVolumeList_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CAreaPortalVolumeList *arg2 = (eqlib::CAreaPortalVolumeList *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (eqlib::CAreaPortalVolumeList *)jarg2; 
  if (arg1) (arg1)->pAreaPortalVolumeList = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_pAreaPortalVolumeList_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CAreaPortalVolumeList *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (eqlib::CAreaPortalVolumeList *) ((arg1)->pAreaPortalVolumeList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_pActorApplicationData_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CActorApplicationData *arg2 = (eqlib::CActorApplicationData *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (eqlib::CActorApplicationData *)jarg2; 
  if (arg1) (arg1)->pActorApplicationData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_pActorApplicationData_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CActorApplicationData *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (eqlib::CActorApplicationData *) ((arg1)->pActorApplicationData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_actorType_set(void * jarg1, int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::EActorType arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (eqlib::EActorType)jarg2; 
  if (arg1) (arg1)->actorType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActor_actorType_get(void * jarg1) {
  int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::EActorType result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (eqlib::EActorType) ((arg1)->actorType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_pTerrainObject_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CTerrainObject *arg2 = (eqlib::CTerrainObject *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (eqlib::CTerrainObject *)jarg2; 
  if (arg1) (arg1)->pTerrainObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_pTerrainObject_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::CTerrainObject *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (eqlib::CTerrainObject *) ((arg1)->pTerrainObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_highlightData_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::SHighlightData *arg2 = (eqlib::SHighlightData *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (eqlib::SHighlightData *)jarg2; 
  if (arg1) (arg1)->highlightData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_highlightData_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  eqlib::SHighlightData *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (eqlib::SHighlightData *) ((arg1)->highlightData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_attachmentMtx_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  glm::mat4x4 arg2 ;
  glm::mat4x4 *argp2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  argp2 = (glm::mat4x4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null glm::mat4x4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->attachmentMtx = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_attachmentMtx_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  glm::mat4x4 result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result =  ((arg1)->attachmentMtx);
  jresult = new glm::mat4x4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bHasAttachSRT_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHasAttachSRT = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bHasAttachSRT_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bHasAttachSRT);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_bDisableDesignOverride_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisableDesignOverride = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_bDisableDesignOverride_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  bool result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (bool) ((arg1)->bDisableDesignOverride);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_pad_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint64_t *arg2 = (uint64_t *) (uint64_t *)0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  {
    size_t ii;
    uint64_t *b = (uint64_t *) arg1->pad;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((uint64_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_pad_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint64_t *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (uint64_t *)(uint64_t *) ((arg1)->pad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_positionMtx_set(void * jarg1, void * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  glm::mat4x4 arg2 ;
  glm::mat4x4 *argp2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  argp2 = (glm::mat4x4 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null glm::mat4x4", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->positionMtx = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CActor_positionMtx_get(void * jarg1) {
  void * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  glm::mat4x4 result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result =  ((arg1)->positionMtx);
  jresult = new glm::mat4x4(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_actorIndex_set(void * jarg1, int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->actorIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActor_actorIndex_get(void * jarg1) {
  int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  int result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (int) ((arg1)->actorIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_szActorTag_set(void * jarg1, char * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->szActorTag = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->szActorTag, (const char *)arg2);
    } else {
      arg1->szActorTag = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CActor_szActorTag_get(void * jarg1) {
  char * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (char *) ((arg1)->szActorTag);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_szActorName_set(void * jarg1, char * jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if (arg2) {
      arg1->szActorName = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->szActorName, (const char *)arg2);
    } else {
      arg1->szActorName = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CActor_szActorName_get(void * jarg1) {
  char * jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (char *) ((arg1)->szActorName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_pitchType_set(void * jarg1, int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->pitchType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActor_pitchType_get(void * jarg1) {
  int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  int result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (int) ((arg1)->pitchType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_flags_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_flags_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (uint32_t) ((arg1)->flags);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_scaleFactor_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scaleFactor = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_scaleFactor_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->scaleFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_boundingRadius_set(void * jarg1, float jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->boundingRadius = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CActor_boundingRadius_get(void * jarg1) {
  float jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  float result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (float) ((arg1)->boundingRadius);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_collisionRestrictionMask_set(void * jarg1, unsigned int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->collisionRestrictionMask = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CActor_collisionRestrictionMask_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (uint32_t) ((arg1)->collisionRestrictionMask);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CActor_collisionGroup_set(void * jarg1, int jarg2) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->collisionGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CActor_collisionGroup_get(void * jarg1) {
  int jresult ;
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  int result;
  
  arg1 = (eqlib::CActor *)jarg1; 
  result = (int) ((arg1)->collisionGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CActor(void * jarg1) {
  eqlib::CActor *arg1 = (eqlib::CActor *) 0 ;
  
  arg1 = (eqlib::CActor *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CObjectGroupStageInstance_pActor1_set(void * jarg1, void * jarg2) {
  eqlib::CObjectGroupStageInstance *arg1 = (eqlib::CObjectGroupStageInstance *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CObjectGroupStageInstance *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  if (arg1) (arg1)->pActor1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CObjectGroupStageInstance_pActor1_get(void * jarg1) {
  void * jresult ;
  eqlib::CObjectGroupStageInstance *arg1 = (eqlib::CObjectGroupStageInstance *) 0 ;
  eqlib::CActorInterface *result = 0 ;
  
  arg1 = (eqlib::CObjectGroupStageInstance *)jarg1; 
  result = (eqlib::CActorInterface *) ((arg1)->pActor1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CObjectGroupStageInstance_pActor2_set(void * jarg1, void * jarg2) {
  eqlib::CObjectGroupStageInstance *arg1 = (eqlib::CObjectGroupStageInstance *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CObjectGroupStageInstance *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  if (arg1) (arg1)->pActor2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CObjectGroupStageInstance_pActor2_get(void * jarg1) {
  void * jresult ;
  eqlib::CObjectGroupStageInstance *arg1 = (eqlib::CObjectGroupStageInstance *) 0 ;
  eqlib::CActorInterface *result = 0 ;
  
  arg1 = (eqlib::CObjectGroupStageInstance *)jarg1; 
  result = (eqlib::CActorInterface *) ((arg1)->pActor2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CObjectGroupStageInstance_pStage_set(void * jarg1, void * jarg2) {
  eqlib::CObjectGroupStageInstance *arg1 = (eqlib::CObjectGroupStageInstance *) 0 ;
  eqlib::CObjectGroupStage *arg2 = (eqlib::CObjectGroupStage *) 0 ;
  
  arg1 = (eqlib::CObjectGroupStageInstance *)jarg1; 
  arg2 = (eqlib::CObjectGroupStage *)jarg2; 
  if (arg1) (arg1)->pStage = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CObjectGroupStageInstance_pStage_get(void * jarg1) {
  void * jresult ;
  eqlib::CObjectGroupStageInstance *arg1 = (eqlib::CObjectGroupStageInstance *) 0 ;
  eqlib::CObjectGroupStage *result = 0 ;
  
  arg1 = (eqlib::CObjectGroupStageInstance *)jarg1; 
  result = (eqlib::CObjectGroupStage *) ((arg1)->pStage);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CObjectGroupStageInstance() {
  void * jresult ;
  eqlib::CObjectGroupStageInstance *result = 0 ;
  
  result = (eqlib::CObjectGroupStageInstance *)new eqlib::CObjectGroupStageInstance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CObjectGroupStageInstance(void * jarg1) {
  eqlib::CObjectGroupStageInstance *arg1 = (eqlib::CObjectGroupStageInstance *) 0 ;
  
  arg1 = (eqlib::CObjectGroupStageInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ARMOR_ID_set(void * jarg1, unsigned int jarg2) {
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ARMOR_ID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  result = (unsigned int) ((arg1)->ID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ARMOR_Var_set(void * jarg1, unsigned int jarg2) {
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Var = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ARMOR_Var_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  result = (unsigned int) ((arg1)->Var);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ARMOR_Material_set(void * jarg1, unsigned int jarg2) {
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->Material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ARMOR_Material_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  result = (unsigned int) ((arg1)->Material);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ARMOR_NewArmorID_set(void * jarg1, unsigned int jarg2) {
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->NewArmorID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ARMOR_NewArmorID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  result = (unsigned int) ((arg1)->NewArmorID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ARMOR_NewArmorType_set(void * jarg1, unsigned int jarg2) {
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->NewArmorType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ARMOR_NewArmorType_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  result = (unsigned int) ((arg1)->NewArmorType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ARMOR() {
  void * jresult ;
  eqlib::ARMOR *result = 0 ;
  
  result = (eqlib::ARMOR *)new eqlib::ARMOR();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ARMOR(void * jarg1) {
  eqlib::ARMOR *arg1 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::ARMOR *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmorProperties_type_set(void * jarg1, unsigned int jarg2) {
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArmorProperties_type_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  result = (uint32_t) ((arg1)->type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmorProperties_variation_set(void * jarg1, unsigned int jarg2) {
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->variation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArmorProperties_variation_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  result = (uint32_t) ((arg1)->variation);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmorProperties_material_set(void * jarg1, unsigned int jarg2) {
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->material = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArmorProperties_material_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  result = (uint32_t) ((arg1)->material);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmorProperties_newArmorID_set(void * jarg1, unsigned int jarg2) {
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->newArmorID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArmorProperties_newArmorID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  result = (uint32_t) ((arg1)->newArmorID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ArmorProperties_newArmorType_set(void * jarg1, unsigned int jarg2) {
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->newArmorType = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ArmorProperties_newArmorType_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  result = (uint32_t) ((arg1)->newArmorType);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ArmorProperties() {
  void * jresult ;
  eqlib::ArmorProperties *result = 0 ;
  
  result = (eqlib::ArmorProperties *)new eqlib::ArmorProperties();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ArmorProperties(void * jarg1) {
  eqlib::ArmorProperties *arg1 = (eqlib::ArmorProperties *) 0 ;
  
  arg1 = (eqlib::ArmorProperties *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Item_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) (eqlib::ARMOR *)0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  {
    size_t ii;
    eqlib::ARMOR *b = (eqlib::ARMOR *) arg1->Item;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((eqlib::ARMOR *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Item_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)(eqlib::ARMOR *) ((arg1)->Item);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Head_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Head = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Head_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Head);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Chest_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Chest = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Chest_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Chest);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Arms_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Arms = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Arms_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Arms);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Wrists_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Wrists = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Wrists_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Wrists);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Hands_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Hands = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Hands_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Hands);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Legs_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Legs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Legs_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Legs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Feet_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Feet = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Feet_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Feet);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Primary_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Primary = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Primary_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Primary);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQUIPMENT_Offhand_set(void * jarg1, void * jarg2) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *arg2 = (eqlib::ARMOR *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  arg2 = (eqlib::ARMOR *)jarg2; 
  if (arg1) (arg1)->Offhand = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQUIPMENT_Offhand_get(void * jarg1) {
  void * jresult ;
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  eqlib::ARMOR *result = 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  result = (eqlib::ARMOR *)& ((arg1)->Offhand);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQUIPMENT() {
  void * jresult ;
  eqlib::EQUIPMENT *result = 0 ;
  
  result = (eqlib::EQUIPMENT *)new eqlib::EQUIPMENT();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQUIPMENT(void * jarg1) {
  eqlib::EQUIPMENT *arg1 = (eqlib::EQUIPMENT *) 0 ;
  
  arg1 = (eqlib::EQUIPMENT *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActorClient_Reset(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  int result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (int)(arg1)->Reset((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorClient_IsActorUsingNewStyleModel(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (bool)(arg1)->IsActorUsingNewStyleModel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_LeftEyeMaterialIndex_set(void * jarg1, int jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LeftEyeMaterialIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActorClient_LeftEyeMaterialIndex_get(void * jarg1) {
  int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  int result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (int) ((arg1)->LeftEyeMaterialIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_RightEyeMaterialIndex_set(void * jarg1, int jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RightEyeMaterialIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActorClient_RightEyeMaterialIndex_get(void * jarg1) {
  int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  int result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (int) ((arg1)->RightEyeMaterialIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_pParticlePoints_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CParticlePointInterface **arg2 = (eqlib::CParticlePointInterface **) (eqlib::CParticlePointInterface **)0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::CParticlePointInterface **)jarg2; 
  {
    size_t ii;
    eqlib::CParticlePointInterface * *b = (eqlib::CParticlePointInterface * *) arg1->pParticlePoints;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((eqlib::CParticlePointInterface * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_pParticlePoints_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CParticlePointInterface **result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::CParticlePointInterface **)(eqlib::CParticlePointInterface **) ((arg1)->pParticlePoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_pLowerBones_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CBoneGroupInterface *arg2 = (eqlib::CBoneGroupInterface *) 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::CBoneGroupInterface *)jarg2; 
  if (arg1) (arg1)->pLowerBones = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_pLowerBones_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CBoneGroupInterface *result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::CBoneGroupInterface *) ((arg1)->pLowerBones);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_pUpperBones_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CBoneGroupInterface *arg2 = (eqlib::CBoneGroupInterface *) 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::CBoneGroupInterface *)jarg2; 
  if (arg1) (arg1)->pUpperBones = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_pUpperBones_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CBoneGroupInterface *result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::CBoneGroupInterface *) ((arg1)->pUpperBones);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_pActor_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  if (arg1) (arg1)->pActor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_pActor_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CActorInterface *result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::CActorInterface *) ((arg1)->pActor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_pLight_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CLightInterface *arg2 = (eqlib::CLightInterface *) 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::CLightInterface *)jarg2; 
  if (arg1) (arg1)->pLight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_pLight_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CLightInterface *result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::CLightInterface *) ((arg1)->pLight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_pActorAnimation_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::ActorAnimation *arg2 = (eqlib::ActorAnimation *) 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::ActorAnimation *)jarg2; 
  if (arg1) (arg1)->pActorAnimation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_pActorAnimation_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::ActorAnimation *result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::ActorAnimation *) ((arg1)->pActorAnimation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_StageInstances_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::TList< eqlib::CObjectGroupStageInstance > *arg2 = (eqlib::TList< eqlib::CObjectGroupStageInstance > *) 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::TList< eqlib::CObjectGroupStageInstance > *)jarg2; 
  if (arg1) (arg1)->StageInstances = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_StageInstances_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::TList< eqlib::CObjectGroupStageInstance > *result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::TList< eqlib::CObjectGroupStageInstance > *)& ((arg1)->StageInstances);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_bActiveTransition_set(void * jarg1, unsigned int jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bActiveTransition = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorClient_bActiveTransition_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (bool) ((arg1)->bActiveTransition);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_CurrentStage_set(void * jarg1, unsigned int jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->CurrentStage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorClient_CurrentStage_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (unsigned int) ((arg1)->CurrentStage);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_ZOffset_set(void * jarg1, float jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ZOffset = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_ActorClient_ZOffset_get(void * jarg1) {
  float jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  float result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (float) ((arg1)->ZOffset);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_AdjustedLoc_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CVector3 *arg2 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2; 
  if (arg1) (arg1)->AdjustedLoc = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_AdjustedLoc_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CVector3 *result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::CVector3 *)& ((arg1)->AdjustedLoc);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_bReplacedStaticObject_set(void * jarg1, unsigned int jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bReplacedStaticObject = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorClient_bReplacedStaticObject_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (bool) ((arg1)->bReplacedStaticObject);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_PartialFaceNumber_set(void * jarg1, int jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PartialFaceNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActorClient_PartialFaceNumber_get(void * jarg1) {
  int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  int result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (int) ((arg1)->PartialFaceNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_bNewArmorDisabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bNewArmorDisabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorClient_bNewArmorDisabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  bool result;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (bool) ((arg1)->bNewArmorDisabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorClient_pApplicationData_set(void * jarg1, void * jarg2) {
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CActorApplicationData *arg2 = (eqlib::CActorApplicationData *) 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  arg2 = (eqlib::CActorApplicationData *)jarg2; 
  if (arg1) (arg1)->pApplicationData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_pApplicationData_get(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CActorApplicationData *result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::CActorApplicationData *) ((arg1)->pApplicationData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ActorClient_getter_pcactorex(void * jarg1) {
  void * jresult ;
  eqlib::ActorClient *arg1 = (eqlib::ActorClient *) 0 ;
  eqlib::CActorInterface **result = 0 ;
  
  arg1 = (eqlib::ActorClient *)jarg1; 
  result = (eqlib::CActorInterface **) &(arg1)->getter_pcactorex();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorTagInfo_actorTagID_set(void * jarg1, unsigned int jarg2) {
  eqlib::ActorTagInfo *arg1 = (eqlib::ActorTagInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ActorTagInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->actorTagID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorTagInfo_actorTagID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorTagInfo *arg1 = (eqlib::ActorTagInfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ActorTagInfo *)jarg1; 
  result = (uint32_t) ((arg1)->actorTagID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorTagInfo_type_set(void * jarg1, unsigned int jarg2) {
  eqlib::ActorTagInfo *arg1 = (eqlib::ActorTagInfo *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::ActorTagInfo *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ActorTagInfo_type_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ActorTagInfo *arg1 = (eqlib::ActorTagInfo *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::ActorTagInfo *)jarg1; 
  result = (uint32_t) ((arg1)->type);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ActorTagInfo_skill_set(void * jarg1, int jarg2) {
  eqlib::ActorTagInfo *arg1 = (eqlib::ActorTagInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ActorTagInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->skill = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ActorTagInfo_skill_get(void * jarg1) {
  int jresult ;
  eqlib::ActorTagInfo *arg1 = (eqlib::ActorTagInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::ActorTagInfo *)jarg1; 
  result = (int) ((arg1)->skill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActorTagInfo() {
  void * jresult ;
  eqlib::ActorTagInfo *result = 0 ;
  
  result = (eqlib::ActorTagInfo *)new eqlib::ActorTagInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ActorTagInfo(void * jarg1) {
  eqlib::ActorTagInfo *arg1 = (eqlib::ActorTagInfo *) 0 ;
  
  arg1 = (eqlib::ActorTagInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ActorTagManager() {
  void * jresult ;
  eqlib::ActorTagManager *result = 0 ;
  
  result = (eqlib::ActorTagManager *)new eqlib::ActorTagManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ActorTagManager(void * jarg1) {
  eqlib::ActorTagManager *arg1 = (eqlib::ActorTagManager *) 0 ;
  
  arg1 = (eqlib::ActorTagManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenWndManager_ScreenRecord_pWnd_set(void * jarg1, void * jarg2) {
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  eqlib::CSidlScreenWnd **arg2 = (eqlib::CSidlScreenWnd **) 0 ;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  arg2 = (eqlib::CSidlScreenWnd **)jarg2; 
  if (arg1) (arg1)->pWnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_ScreenRecord_pWnd_get(void * jarg1) {
  void * jresult ;
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  eqlib::CSidlScreenWnd **result = 0 ;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  result = (eqlib::CSidlScreenWnd **) ((arg1)->pWnd);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenWndManager_ScreenRecord_activate_set(void * jarg1, void * jarg2) {
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  eqlib::ScreenWndManager::Callback arg2 = (eqlib::ScreenWndManager::Callback) 0 ;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  arg2 = (eqlib::ScreenWndManager::Callback)jarg2; 
  if (arg1) (arg1)->activate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_ScreenRecord_activate_get(void * jarg1) {
  void * jresult ;
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  eqlib::ScreenWndManager::Callback result;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  result = (eqlib::ScreenWndManager::Callback) ((arg1)->activate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenWndManager_ScreenRecord_deactivate_set(void * jarg1, void * jarg2) {
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  eqlib::ScreenWndManager::Callback arg2 = (eqlib::ScreenWndManager::Callback) 0 ;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  arg2 = (eqlib::ScreenWndManager::Callback)jarg2; 
  if (arg1) (arg1)->deactivate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_ScreenRecord_deactivate_get(void * jarg1) {
  void * jresult ;
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  eqlib::ScreenWndManager::Callback result;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  result = (eqlib::ScreenWndManager::Callback) ((arg1)->deactivate);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenWndManager_ScreenRecord_clean_set(void * jarg1, void * jarg2) {
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  eqlib::ScreenWndManager::Callback arg2 = (eqlib::ScreenWndManager::Callback) 0 ;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  arg2 = (eqlib::ScreenWndManager::Callback)jarg2; 
  if (arg1) (arg1)->clean = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_ScreenRecord_clean_get(void * jarg1) {
  void * jresult ;
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  eqlib::ScreenWndManager::Callback result;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  result = (eqlib::ScreenWndManager::Callback) ((arg1)->clean);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScreenWndManager_ScreenRecord() {
  void * jresult ;
  eqlib::ScreenWndManager::ScreenRecord *result = 0 ;
  
  result = (eqlib::ScreenWndManager::ScreenRecord *)new eqlib::ScreenWndManager::ScreenRecord();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScreenWndManager_ScreenRecord(void * jarg1) {
  eqlib::ScreenWndManager::ScreenRecord *arg1 = (eqlib::ScreenWndManager::ScreenRecord *) 0 ;
  
  arg1 = (eqlib::ScreenWndManager::ScreenRecord *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_FindScreenRecordByScreenName(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::CXStr *arg2 = 0 ;
  eqlib::ScreenWndManager::ScreenRecord *result = 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CXStr const & is null", 0);
    return 0;
  } 
  result = (eqlib::ScreenWndManager::ScreenRecord *)(arg1)->FindScreenRecordByScreenName((eqlib::CXStr const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenWndManager_screens_set(void * jarg1, void * jarg2) {
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::ArrayClass< eqlib::ScreenWndManager::ScreenRecord > *arg2 = (eqlib::ArrayClass< eqlib::ScreenWndManager::ScreenRecord > *) 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  arg2 = (eqlib::ArrayClass< eqlib::ScreenWndManager::ScreenRecord > *)jarg2; 
  if (arg1) (arg1)->screens = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_screens_get(void * jarg1) {
  void * jresult ;
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::ArrayClass< eqlib::ScreenWndManager::ScreenRecord > *result = 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  result = (eqlib::ArrayClass< eqlib::ScreenWndManager::ScreenRecord > *)& ((arg1)->screens);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenWndManager_screensHash_set(void * jarg1, void * jarg2) {
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::HashTable< int,eqlib::CXStr > *arg2 = (eqlib::HashTable< int,eqlib::CXStr > *) 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  arg2 = (eqlib::HashTable< int,eqlib::CXStr > *)jarg2; 
  if (arg1) (arg1)->screensHash = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_screensHash_get(void * jarg1) {
  void * jresult ;
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::HashTable< int,eqlib::CXStr > *result = 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  result = (eqlib::HashTable< int,eqlib::CXStr > *)& ((arg1)->screensHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenWndManager_createdScreens_set(void * jarg1, void * jarg2) {
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::ArrayClass< eqlib::CSidlScreenWnd * > *arg2 = (eqlib::ArrayClass< eqlib::CSidlScreenWnd * > *) 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  arg2 = (eqlib::ArrayClass< eqlib::CSidlScreenWnd * > *)jarg2; 
  if (arg1) (arg1)->createdScreens = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_createdScreens_get(void * jarg1) {
  void * jresult ;
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::ArrayClass< eqlib::CSidlScreenWnd * > *result = 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  result = (eqlib::ArrayClass< eqlib::CSidlScreenWnd * > *)& ((arg1)->createdScreens);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ScreenWndManager_createdScreensHash_set(void * jarg1, void * jarg2) {
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::HashTable< eqlib::CSidlScreenWnd *,eqlib::CXStr > *arg2 = (eqlib::HashTable< eqlib::CSidlScreenWnd *,eqlib::CXStr > *) 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  arg2 = (eqlib::HashTable< eqlib::CSidlScreenWnd *,eqlib::CXStr > *)jarg2; 
  if (arg1) (arg1)->createdScreensHash = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ScreenWndManager_createdScreensHash_get(void * jarg1) {
  void * jresult ;
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  eqlib::HashTable< eqlib::CSidlScreenWnd *,eqlib::CXStr > *result = 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  result = (eqlib::HashTable< eqlib::CSidlScreenWnd *,eqlib::CXStr > *)& ((arg1)->createdScreensHash);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ScreenWndManager() {
  void * jresult ;
  eqlib::ScreenWndManager *result = 0 ;
  
  result = (eqlib::ScreenWndManager *)new eqlib::ScreenWndManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ScreenWndManager(void * jarg1) {
  eqlib::ScreenWndManager *arg1 = (eqlib::ScreenWndManager *) 0 ;
  
  arg1 = (eqlib::ScreenWndManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_GetFloorHeight__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, void * jarg6, void * jarg7, int jarg8, float jarg9) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  eqlib::CVector3 *arg6 = 0 ;
  eqlib::CActorApplicationData *arg7 = (eqlib::CActorApplicationData *) 0 ;
  eqlib::EActorType arg8 ;
  float arg9 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (eqlib::CVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 const & is null", 0);
    return 0;
  } 
  arg7 = (eqlib::CActorApplicationData *)jarg7; 
  arg8 = (eqlib::EActorType)jarg8; 
  arg9 = (float)jarg9; 
  result = (float)(arg1)->GetFloorHeight(arg2,arg3,arg4,arg5,(eqlib::CVector3 const &)*arg6,arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_GetFloorHeight__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, void * jarg6, void * jarg7, int jarg8) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  eqlib::CVector3 *arg6 = 0 ;
  eqlib::CActorApplicationData *arg7 = (eqlib::CActorApplicationData *) 0 ;
  eqlib::EActorType arg8 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (eqlib::CVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 const & is null", 0);
    return 0;
  } 
  arg7 = (eqlib::CActorApplicationData *)jarg7; 
  arg8 = (eqlib::EActorType)jarg8; 
  result = (float)(arg1)->GetFloorHeight(arg2,arg3,arg4,arg5,(eqlib::CVector3 const &)*arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_GetFloorHeight__SWIG_2(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, void * jarg6, void * jarg7) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  eqlib::CVector3 *arg6 = 0 ;
  eqlib::CActorApplicationData *arg7 = (eqlib::CActorApplicationData *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (eqlib::CVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 const & is null", 0);
    return 0;
  } 
  arg7 = (eqlib::CActorApplicationData *)jarg7; 
  result = (float)(arg1)->GetFloorHeight(arg2,arg3,arg4,arg5,(eqlib::CVector3 const &)*arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_GetFloorHeight__SWIG_3(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, void * jarg6) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  eqlib::CVector3 *arg6 = 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (eqlib::CVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 const & is null", 0);
    return 0;
  } 
  result = (float)(arg1)->GetFloorHeight(arg2,arg3,arg4,arg5,(eqlib::CVector3 const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_GetFloorHeight__SWIG_4(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  result = (float)(arg1)->GetFloorHeight(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_GetFloorHeight__SWIG_5(void * jarg1, float jarg2, float jarg3, float jarg4) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  result = (float)(arg1)->GetFloorHeight(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_GetClickedActor(void * jarg1, int jarg2, int jarg3, unsigned int jarg4, void * jarg5, void * jarg6) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  eqlib::CVector3 *arg5 = 0 ;
  eqlib::CVector3 *arg6 = 0 ;
  eqlib::CActorInterface *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  arg5 = (eqlib::CVector3 *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return 0;
  } 
  arg6 = (eqlib::CVector3 *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::CVector3 & is null", 0);
    return 0;
  } 
  result = (eqlib::CActorInterface *)(arg1)->GetClickedActor(arg2,arg3,arg4,*arg5,*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_ReloadUI__SWIG_0(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ReloadUI(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_ReloadUI__SWIG_1(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->ReloadUI(arg2,arg3);
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_TrueDistance(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  arg3 = (float)jarg3; 
  arg4 = (float)jarg4; 
  arg5 = (float)jarg5; 
  arg6 = (float)jarg6; 
  arg7 = (float)jarg7; 
  arg8 = (float)jarg8; 
  result = (float)(arg1)->TrueDistance(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_SetViewActor(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  (arg1)->SetViewActor(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_ToggleScreenshotMode(void * jarg1) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  (arg1)->ToggleScreenshotMode();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_GetUserDefinedColor(int jarg1) {
  void * jresult ;
  int arg1 ;
  COLORREF result;
  
  arg1 = (int)jarg1; 
  result = eqlib::CDisplay::GetUserDefinedColor(arg1);
  jresult = new COLORREF(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_InitCharSelectUI(void * jarg1) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  (arg1)->InitCharSelectUI();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_RealRender_World(void * jarg1) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  (arg1)->RealRender_World();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_CleanGameUI(void * jarg1) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  (arg1)->CleanGameUI();
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_cameraType_set(void * jarg1) {
  int *arg1 = (int *) 0 ;
  
  arg1 = (int *)jarg1; 
  eqlib::CDisplay::cameraType = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_cameraType_get() {
  void * jresult ;
  int *result = 0 ;
  
  result = (int *)eqlib::CDisplay::cameraType;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_ErrorFlag_set(void * jarg1, int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ErrorFlag = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDisplay_ErrorFlag_get(void * jarg1) {
  int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (int) ((arg1)->ErrorFlag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_BFog_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->BFog = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_BFog_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->BFog);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bMoveAnims_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->bMoveAnims = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_bMoveAnims_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->bMoveAnims);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_Yon_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Yon = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_Yon_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->Yon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_AmbientLight_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->AmbientLight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_AmbientLight_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->AmbientLight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_DragItem_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->DragItem = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_DragItem_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->DragItem);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_DragMoney_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->DragMoney = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_DragMoney_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->DragMoney);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_DragHotButton_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->DragHotButton = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_DragHotButton_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->DragHotButton);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bInRenderLoop_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bInRenderLoop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bInRenderLoop_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bInRenderLoop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bHideLootedCorpses_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHideLootedCorpses = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bHideLootedCorpses_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bHideLootedCorpses);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_LastTeleportAreaTag_set(void * jarg1, char * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LastTeleportAreaTag, (const char *)arg2, 0x100-1);
      arg1->LastTeleportAreaTag[0x100-1] = 0;
    } else {
      arg1->LastTeleportAreaTag[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CDisplay_LastTeleportAreaTag_get(void * jarg1) {
  char * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (char *)(char *) ((arg1)->LastTeleportAreaTag);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_pCamera_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CCameraInterface *arg2 = (eqlib::CCameraInterface *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::CCameraInterface *)jarg2; 
  if (arg1) (arg1)->pCamera = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_pCamera_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CCameraInterface *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::CCameraInterface *) ((arg1)->pCamera);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_CamPos_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CVector3 *arg2 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2; 
  if (arg1) (arg1)->CamPos = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_CamPos_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CVector3 *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::CVector3 *) ((arg1)->CamPos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_CamOrientation_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CVector3 *arg2 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::CVector3 *)jarg2; 
  if (arg1) (arg1)->CamOrientation = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_CamOrientation_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CVector3 *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::CVector3 *) ((arg1)->CamOrientation);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_WadFileLoadScreen_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::SWadFile *arg2 = (eqlib::SWadFile *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::SWadFile *)jarg2; 
  if (arg1) (arg1)->WadFileLoadScreen = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_WadFileLoadScreen_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::SWadFile *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::SWadFile *) ((arg1)->WadFileLoadScreen);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_NewPCModelsLoaded_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->NewPCModelsLoaded = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_NewPCModelsLoaded_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->NewPCModelsLoaded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bHorsesLoaded_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHorsesLoaded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bHorsesLoaded_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bHorsesLoaded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_pActorTagManager_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::ActorTagManager *arg2 = (eqlib::ActorTagManager *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::ActorTagManager *)jarg2; 
  if (arg1) (arg1)->pActorTagManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_pActorTagManager_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::ActorTagManager *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::ActorTagManager *) ((arg1)->pActorTagManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_fogEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fogEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_fogEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->fogEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_fogStartDistance_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fogStartDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_fogStartDistance_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->fogStartDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_fogEndDistance_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fogEndDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_fogEndDistance_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->fogEndDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_fogDensity_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fogDensity = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_fogDensity_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->fogDensity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_fogRed_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->fogRed = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_fogRed_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->fogRed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_fogGreen_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->fogGreen = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_fogGreen_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->fogGreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_fogBlue_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->fogBlue = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_fogBlue_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->fogBlue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_saveRed_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->saveRed = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_saveRed_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint32_t) ((arg1)->saveRed);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_saveGreen_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->saveGreen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_saveGreen_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint32_t) ((arg1)->saveGreen);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_saveBlue_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->saveBlue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_saveBlue_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint32_t) ((arg1)->saveBlue);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_dayPeriod_set(void * jarg1, unsigned char jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->dayPeriod = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_CDisplay_dayPeriod_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t) ((arg1)->dayPeriod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_TimeStamp_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->TimeStamp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_TimeStamp_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint32_t) ((arg1)->TimeStamp);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bRain_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRain = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bRain_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bRain);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bRainScreen_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRainScreen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bRainScreen_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bRainScreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_numUserLights_set(void * jarg1, int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numUserLights = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDisplay_numUserLights_get(void * jarg1) {
  int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (int) ((arg1)->numUserLights);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_userLightDef_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CLightDefinitionInterface **arg2 = (eqlib::CLightDefinitionInterface **) (eqlib::CLightDefinitionInterface **)0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::CLightDefinitionInterface **)jarg2; 
  {
    size_t ii;
    eqlib::CLightDefinitionInterface * *b = (eqlib::CLightDefinitionInterface * *) arg1->userLightDef;
    for (ii = 0; ii < (size_t)2500; ii++) b[ii] = *((eqlib::CLightDefinitionInterface * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_userLightDef_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CLightDefinitionInterface **result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::CLightDefinitionInterface **)(eqlib::CLightDefinitionInterface **) ((arg1)->userLightDef);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_tempLightDef_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CLightDefinitionInterface *arg2 = (eqlib::CLightDefinitionInterface *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::CLightDefinitionInterface *)jarg2; 
  if (arg1) (arg1)->tempLightDef = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_tempLightDef_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::CLightDefinitionInterface *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::CLightDefinitionInterface *) ((arg1)->tempLightDef);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_moreDisplayInterfaces_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  void **arg2 = (void **) (void **)0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (void **)jarg2; 
  {
    size_t ii;
    void * *b = (void * *) arg1->moreDisplayInterfaces;
    for (ii = 0; ii < (size_t)25; ii++) b[ii] = *((void * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_moreDisplayInterfaces_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  void **result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (void **)(void **) ((arg1)->moreDisplayInterfaces);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_timeLastArrival_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->timeLastArrival = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_timeLastArrival_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint32_t) ((arg1)->timeLastArrival);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_scaleShield_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scaleShield = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_scaleShield_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->scaleShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_scalePrimary_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scalePrimary = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_scalePrimary_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->scalePrimary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_scaleSecondary_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->scaleSecondary = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_scaleSecondary_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->scaleSecondary);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_indoorEnvironment_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->indoorEnvironment = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_indoorEnvironment_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->indoorEnvironment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_hGameWindow_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->hGameWindow = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_hGameWindow_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  HWND result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result =  ((arg1)->hGameWindow);
  jresult = new HWND(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_viewAngle_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->viewAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_viewAngle_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->viewAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_aspectRatio_set(void * jarg1, float jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->aspectRatio = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CDisplay_aspectRatio_get(void * jarg1) {
  float jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  float result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (float) ((arg1)->aspectRatio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_titleOverlayIndex_set(void * jarg1, int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->titleOverlayIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDisplay_titleOverlayIndex_get(void * jarg1) {
  int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (int) ((arg1)->titleOverlayIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_nearClipPlane_set(void * jarg1, int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->nearClipPlane = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDisplay_nearClipPlane_get(void * jarg1) {
  int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (int) ((arg1)->nearClipPlane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_palette_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  PALETTEENTRY *arg2 = (PALETTEENTRY *) (PALETTEENTRY *)0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (PALETTEENTRY *)jarg2; 
  {
    size_t ii;
    PALETTEENTRY *b = (PALETTEENTRY *) arg1->palette;
    for (ii = 0; ii < (size_t)256; ii++) b[ii] = *((PALETTEENTRY *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_palette_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  PALETTEENTRY *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (PALETTEENTRY *)(PALETTEENTRY *) ((arg1)->palette);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_padding_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t *arg2 = (uint8_t *) (uint8_t *)0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (uint8_t *)jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->padding;
    for (ii = 0; ii < (size_t)0x2d6a-0x2d00; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_padding_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->padding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_NpcNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->NpcNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_NpcNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->NpcNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bShowPetNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowPetNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bShowPetNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bShowPetNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bShowMercNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowMercNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bShowMercNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bShowMercNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bShowPetOwnerNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowPetOwnerNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bShowPetOwnerNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bShowPetOwnerNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bShowMercOwnerNames_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowMercOwnerNames = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bShowMercOwnerNames_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bShowMercOwnerNames);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bAdvancedLightingEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAdvancedLightingEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bAdvancedLightingEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bAdvancedLightingEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bPostEffectsEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bPostEffectsEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bPostEffectsEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bPostEffectsEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bBloomEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bBloomEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bBloomEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bBloomEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bShadowsEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShadowsEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bShadowsEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bShadowsEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bWaterSwapEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bWaterSwapEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bWaterSwapEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bWaterSwapEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_b20PixelShadersEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->b20PixelShadersEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_b20PixelShadersEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->b20PixelShadersEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bVertexShadersEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bVertexShadersEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bVertexShadersEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bVertexShadersEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bWindowedGamma_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bWindowedGamma = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bWindowedGamma_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bWindowedGamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_bWindowedIncreasedGamma_set(void * jarg1, unsigned int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bWindowedIncreasedGamma = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CDisplay_bWindowedIncreasedGamma_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  bool result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (bool) ((arg1)->bWindowedIncreasedGamma);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_ActorClipPlane_set(void * jarg1, int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ActorClipPlane = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDisplay_ActorClipPlane_get(void * jarg1) {
  int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (int) ((arg1)->ActorClipPlane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_ShadowClipPlane_set(void * jarg1, int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ShadowClipPlane = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDisplay_ShadowClipPlane_get(void * jarg1) {
  int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (int) ((arg1)->ShadowClipPlane);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_Unknown2d80_set(void * jarg1, int jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown2d80 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CDisplay_Unknown2d80_get(void * jarg1) {
  int jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  int result;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (int) ((arg1)->Unknown2d80);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_gameScreens_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::ScreenWndManager *arg2 = (eqlib::ScreenWndManager *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::ScreenWndManager *)jarg2; 
  if (arg1) (arg1)->gameScreens = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_gameScreens_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::ScreenWndManager *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::ScreenWndManager *)& ((arg1)->gameScreens);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CDisplay_charselectScreens_set(void * jarg1, void * jarg2) {
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::ScreenWndManager *arg2 = (eqlib::ScreenWndManager *) 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  arg2 = (eqlib::ScreenWndManager *)jarg2; 
  if (arg1) (arg1)->charselectScreens = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CDisplay_charselectScreens_get(void * jarg1) {
  void * jresult ;
  eqlib::CDisplay *arg1 = (eqlib::CDisplay *) 0 ;
  eqlib::ScreenWndManager *result = 0 ;
  
  arg1 = (eqlib::CDisplay *)jarg1; 
  result = (eqlib::ScreenWndManager *)& ((arg1)->charselectScreens);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AggroMeterListEntry_Reset(void * jarg1) {
  eqlib::AggroMeterListEntry *arg1 = (eqlib::AggroMeterListEntry *) 0 ;
  
  arg1 = (eqlib::AggroMeterListEntry *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AggroMeterListEntry_AggroPct_set(void * jarg1, unsigned short jarg2) {
  eqlib::AggroMeterListEntry *arg1 = (eqlib::AggroMeterListEntry *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (eqlib::AggroMeterListEntry *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->AggroPct = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_AggroMeterListEntry_AggroPct_get(void * jarg1) {
  unsigned short jresult ;
  eqlib::AggroMeterListEntry *arg1 = (eqlib::AggroMeterListEntry *) 0 ;
  uint16_t result;
  
  arg1 = (eqlib::AggroMeterListEntry *)jarg1; 
  result = (uint16_t) ((arg1)->AggroPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AggroMeterListEntry() {
  void * jresult ;
  eqlib::AggroMeterListEntry *result = 0 ;
  
  result = (eqlib::AggroMeterListEntry *)new eqlib::AggroMeterListEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AggroMeterListEntry(void * jarg1) {
  eqlib::AggroMeterListEntry *arg1 = (eqlib::AggroMeterListEntry *) 0 ;
  
  arg1 = (eqlib::AggroMeterListEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_AGGRO_METER_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_AGGRO_METER_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AggroMeterManagerClient_Instance() {
  void * jresult ;
  eqlib::AggroMeterManagerClient *result = 0 ;
  
  result = (eqlib::AggroMeterManagerClient *) &eqlib::AggroMeterManagerClient::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AggroMeterManagerClient_aggroData_set(void * jarg1, void * jarg2) {
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  eqlib::AggroMeterListEntry *arg2 = (eqlib::AggroMeterListEntry *) (eqlib::AggroMeterListEntry *)0 ;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  arg2 = (eqlib::AggroMeterListEntry *)jarg2; 
  {
    size_t ii;
    eqlib::AggroMeterListEntry *b = (eqlib::AggroMeterListEntry *) arg1->aggroData;
    for (ii = 0; ii < (size_t)eqlib::MAX_AGGRO_METER_SIZE; ii++) b[ii] = *((eqlib::AggroMeterListEntry *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AggroMeterManagerClient_aggroData_get(void * jarg1) {
  void * jresult ;
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  eqlib::AggroMeterListEntry *result = 0 ;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  result = (eqlib::AggroMeterListEntry *)(eqlib::AggroMeterListEntry *) ((arg1)->aggroData);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AggroMeterManagerClient_AggroLockID_set(void * jarg1, unsigned int jarg2) {
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AggroLockID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AggroMeterManagerClient_AggroLockID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  result = (uint32_t) ((arg1)->AggroLockID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AggroMeterManagerClient_AggroTargetID_set(void * jarg1, unsigned int jarg2) {
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AggroTargetID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AggroMeterManagerClient_AggroTargetID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  result = (uint32_t) ((arg1)->AggroTargetID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AggroMeterManagerClient_AggroSecondaryID_set(void * jarg1, unsigned int jarg2) {
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AggroSecondaryID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AggroMeterManagerClient_AggroSecondaryID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  result = (uint32_t) ((arg1)->AggroSecondaryID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AggroMeterManagerClient() {
  void * jresult ;
  eqlib::AggroMeterManagerClient *result = 0 ;
  
  result = (eqlib::AggroMeterManagerClient *)new eqlib::AggroMeterManagerClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AggroMeterManagerClient(void * jarg1) {
  eqlib::AggroMeterManagerClient *arg1 = (eqlib::AggroMeterManagerClient *) 0 ;
  
  arg1 = (eqlib::AggroMeterManagerClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroData_AggroMostHatedName_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache_AggroData *arg1 = (eqlib::LabelCache_AggroData *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache_AggroData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->AggroMostHatedName;
    for (ii = 0; ii < (size_t)64; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_AggroData_AggroMostHatedName_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache_AggroData *arg1 = (eqlib::LabelCache_AggroData *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache_AggroData *)jarg1; 
  result = (int *)(int *) ((arg1)->AggroMostHatedName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroData_AggroHatePct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache_AggroData *arg1 = (eqlib::LabelCache_AggroData *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache_AggroData *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->AggroHatePct;
    for (ii = 0; ii < (size_t)eqlib::MAX_AGGRO_METER_SIZE; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_AggroData_AggroHatePct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache_AggroData *arg1 = (eqlib::LabelCache_AggroData *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache_AggroData *)jarg1; 
  result = (int *)(int *) ((arg1)->AggroHatePct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroData_AggroMyHatePct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache_AggroData *arg1 = (eqlib::LabelCache_AggroData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache_AggroData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AggroMyHatePct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_AggroData_AggroMyHatePct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache_AggroData *arg1 = (eqlib::LabelCache_AggroData *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache_AggroData *)jarg1; 
  result = (int) ((arg1)->AggroMyHatePct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LabelCache_AggroData() {
  void * jresult ;
  eqlib::LabelCache_AggroData *result = 0 ;
  
  result = (eqlib::LabelCache_AggroData *)new eqlib::LabelCache_AggroData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LabelCache_AggroData(void * jarg1) {
  eqlib::LabelCache_AggroData *arg1 = (eqlib::LabelCache_AggroData *) 0 ;
  
  arg1 = (eqlib::LabelCache_AggroData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Name_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 64-1);
      arg1->Name[64-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_LastName_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LastName, (const char *)arg2, 64-1);
      arg1->LastName[64-1] = 0;
    } else {
      arg1->LastName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_LastName_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->LastName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Level_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Level = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Level_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Class_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Class, (const char *)arg2, 64-1);
      arg1->Class[64-1] = 0;
    } else {
      arg1->Class[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_Class_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->Class);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Title_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Title, (const char *)arg2, 64-1);
      arg1->Title[64-1] = 0;
    } else {
      arg1->Title[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_Title_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->Title);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Deity_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Deity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Deity_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Deity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Str_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Str = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Str_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Str);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Sta_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Sta = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Sta_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Sta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Dex_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Dex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Dex_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Dex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Agi_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Agi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Agi_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Agi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Wis_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Wis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Wis_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Wis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Int_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Int = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Int_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Int);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Cha_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Cha = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Cha_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Cha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ResistPoison_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistPoison = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ResistPoison_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ResistPoison);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ResistDisease_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistDisease = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ResistDisease_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ResistDisease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ResistCorruption_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistCorruption = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ResistCorruption_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ResistCorruption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ResistFire_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistFire = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ResistFire_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ResistFire);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ResistCold_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistCold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ResistCold_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ResistCold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ResistMagic_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ResistMagic = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ResistMagic_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ResistMagic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseStr_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseStr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseStr_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseStr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseSta_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseSta = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseSta_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseSta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseDex_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseDex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseDex_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseDex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseAgi_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseAgi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseAgi_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseAgi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseWis_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseWis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseWis_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseWis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseInt_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseInt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseInt_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseInt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseCha_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseCha = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseCha_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseCha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseResistPoison_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseResistPoison = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseResistPoison_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseResistPoison);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseResistDisease_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseResistDisease = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseResistDisease_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseResistDisease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseResistCorruption_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseResistCorruption = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseResistCorruption_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseResistCorruption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseResistFire_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseResistFire = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseResistFire_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseResistFire);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseResistCold_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseResistCold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseResistCold_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseResistCold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BaseResistMagic_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BaseResistMagic = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_BaseResistMagic_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->BaseResistMagic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicStr_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicStr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicStr_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicStr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicSta_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicSta = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicSta_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicSta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicDex_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicDex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicDex_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicDex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicAgi_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicAgi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicAgi_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicAgi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicWis_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicWis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicWis_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicWis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicInt_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicInt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicInt_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicInt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicCha_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicCha = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicCha_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicCha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicResistPoison_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicResistPoison = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicResistPoison_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicResistPoison);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicResistDisease_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicResistDisease = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicResistDisease_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicResistDisease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicResistCorruption_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicResistCorruption = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicResistCorruption_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicResistCorruption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicResistFire_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicResistFire = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicResistFire_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicResistFire);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicResistCold_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicResistCold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicResistCold_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicResistCold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HeroicResistMagic_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HeroicResistMagic = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HeroicResistMagic_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HeroicResistMagic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxStr_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxStr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxStr_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxStr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxSta_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxSta = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxSta_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxSta);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxDex_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxDex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxDex_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxDex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxAgi_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxAgi = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxAgi_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxAgi);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxWis_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxWis = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxWis_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxWis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxInt_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxInt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxInt_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxInt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxCha_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxCha = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxCha_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxCha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxResistPoison_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxResistPoison = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxResistPoison_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxResistPoison);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxResistDisease_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxResistDisease = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxResistDisease_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxResistDisease);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxResistCorruption_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxResistCorruption = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxResistCorruption_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxResistCorruption);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxResistFire_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxResistFire = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxResistFire_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxResistFire);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxResistCold_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxResistCold = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxResistCold_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxResistCold);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxResistMagic_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxResistMagic = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxResistMagic_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxResistMagic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HP_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HP = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HP_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxHP_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxHP = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxHP_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxHP);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HPPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HPPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HPPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HPPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Mana_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Mana = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Mana_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Mana);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxMana_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxMana = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxMana_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxMana);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ManaPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ManaPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ManaPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ManaPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Endurance_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Endurance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Endurance_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Endurance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxEndurance_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxEndurance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxEndurance_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxEndurance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_EndurancePct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EndurancePct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_EndurancePct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->EndurancePct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AC_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AC = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_AC_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->AC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Attack_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Attack = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Attack_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Attack);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Weight_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Weight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Weight_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_MaxWeight_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxWeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_MaxWeight_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->MaxWeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ExpPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ExpPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ExpPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ExpPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AAExpPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AAExpPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_AAExpPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->AAExpPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AAPoints_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AAPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_AAPoints_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->AAPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AASiphon_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AASiphon = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_AASiphon_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->AASiphon);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Haste_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Haste = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Haste_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Haste);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HPRegen_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HPRegen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HPRegen_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HPRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ManaRegen_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ManaRegen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_ManaRegen_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->ManaRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_EnduranceRegen_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnduranceRegen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_EnduranceRegen_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->EnduranceRegen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SpellShield_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellShield = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SpellShield_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SpellShield);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_CombatEfficiency_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CombatEfficiency = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_CombatEfficiency_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->CombatEfficiency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Shielding_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Shielding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Shielding_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Shielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_DmgShielding_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DmgShielding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_DmgShielding_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->DmgShielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_DoTShielding_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DoTShielding = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_DoTShielding_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->DoTShielding);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_DmgShieldMitigation_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DmgShieldMitigation = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_DmgShieldMitigation_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->DmgShieldMitigation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Avoidance_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Avoidance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Avoidance_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Avoidance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AccuracyBonus_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AccuracyBonus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_AccuracyBonus_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->AccuracyBonus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_StunResist_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StunResist = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_StunResist_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->StunResist);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_StrikeThrough_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->StrikeThrough = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_StrikeThrough_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->StrikeThrough);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_HealAmount_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->HealAmount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_HealAmount_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->HealAmount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SpellDamage_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellDamage = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SpellDamage_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SpellDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Clairvoyance_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Clairvoyance = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_Clairvoyance_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->Clairvoyance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgBash_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgBash = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgBash_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgBash);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgBackstab_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgBackstab = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgBackstab_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgBackstab);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgDragonPunch_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgDragonPunch = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgDragonPunch_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgDragonPunch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgEagleStrike_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgEagleStrike = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgEagleStrike_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgEagleStrike);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgFlyingKick_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgFlyingKick = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgFlyingKick_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgFlyingKick);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgKick_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgKick = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgKick_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgKick);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgRoundKick_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgRoundKick = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgRoundKick_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgRoundKick);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgTigerClaw_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgTigerClaw = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgTigerClaw_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgTigerClaw);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SkillDmgFrenzy_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SkillDmgFrenzy = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SkillDmgFrenzy_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SkillDmgFrenzy);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_CurrentLoyaltyVelocity_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrentLoyaltyVelocity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_CurrentLoyaltyVelocity_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->CurrentLoyaltyVelocity);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_LoyaltyTokens_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LoyaltyTokens = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_LoyaltyTokens_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->LoyaltyTokens);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_TargetName_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->TargetName, (const char *)arg2, 256-1);
      arg1->TargetName[256-1] = 0;
    } else {
      arg1->TargetName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_TargetName_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->TargetName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_TargetHPPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TargetHPPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_TargetHPPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->TargetHPPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_PetName_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->PetName, (const char *)arg2, 128-1);
      arg1->PetName[128-1] = 0;
    } else {
      arg1->PetName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_PetName_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->PetName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_PetHPPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PetHPPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_PetHPPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->PetHPPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_PetTargetHPPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PetTargetHPPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_PetTargetHPPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->PetTargetHPPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_GroupName_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char (*arg2)[64] = (char (*)[64]) (char (*)[64])0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char (*)[64])jarg2; 
  {
    char (*inp)[64] = (char (*)[64])(arg2);
    char (*dest)[64] = (char (*)[64])(arg1->GroupName);
    size_t ii = 0;
    for (; ii < eqlib::MAX_GROUP_SIZE-1; ++ii) {
      char *ip = inp[ii];
      char *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 64; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_GroupName_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char (*result)[64] = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char (*)[64])(char (*)[64]) ((arg1)->GroupName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_GroupHPPct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->GroupHPPct;
    for (ii = 0; ii < (size_t)eqlib::MAX_GROUP_SIZE-1; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_GroupHPPct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->GroupHPPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_GroupPetHPPct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->GroupPetHPPct;
    for (ii = 0; ii < (size_t)eqlib::MAX_GROUP_SIZE-1; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_GroupPetHPPct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->GroupPetHPPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_GroupManaPct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->GroupManaPct;
    for (ii = 0; ii < (size_t)eqlib::MAX_GROUP_SIZE-1; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_GroupManaPct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->GroupManaPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_GroupSTAPct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->GroupSTAPct;
    for (ii = 0; ii < (size_t)eqlib::MAX_GROUP_SIZE-1; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_GroupSTAPct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->GroupSTAPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Buff_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Buff;
    for (ii = 0; ii < (size_t)15; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_Buff_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->Buff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_BardBuff_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->BardBuff;
    for (ii = 0; ii < (size_t)6; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_BardBuff_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->BardBuff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_PetBuff_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->PetBuff;
    for (ii = 0; ii < (size_t)30; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_PetBuff_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->PetBuff);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_Spell_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Spell;
    for (ii = 0; ii < (size_t)10; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_Spell_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->Spell);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SongTitle_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->SongTitle, (const char *)arg2, 512-1);
      arg1->SongTitle[512-1] = 0;
    } else {
      arg1->SongTitle[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_SongTitle_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->SongTitle);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SongDurationMin_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SongDurationMin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SongDurationMin_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SongDurationMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SongDurationSec_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SongDurationSec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SongDurationSec_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SongDurationSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SongCurrentMin_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SongCurrentMin = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SongCurrentMin_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SongCurrentMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SongCurrentSec_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SongCurrentSec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_SongCurrentSec_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->SongCurrentSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_GroupLeaderExpPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->GroupLeaderExpPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_GroupLeaderExpPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->GroupLeaderExpPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_RaidLeaderExPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RaidLeaderExPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_RaidLeaderExPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->RaidLeaderExPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_TargetOfTargetName_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->TargetOfTargetName, (const char *)arg2, 64-1);
      arg1->TargetOfTargetName[64-1] = 0;
    } else {
      arg1->TargetOfTargetName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_TargetOfTargetName_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->TargetOfTargetName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ExtendedTargetHPPct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->ExtendedTargetHPPct;
    for (ii = 0; ii < (size_t)MAX_EXTENDED_TARGET_SIZE; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_ExtendedTargetHPPct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->ExtendedTargetHPPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ExtendedTargetManaPct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->ExtendedTargetManaPct;
    for (ii = 0; ii < (size_t)MAX_EXTENDED_TARGET_SIZE; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_ExtendedTargetManaPct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->ExtendedTargetManaPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_ExtendedTargetEndurancePct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->ExtendedTargetEndurancePct;
    for (ii = 0; ii < (size_t)MAX_EXTENDED_TARGET_SIZE; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_ExtendedTargetEndurancePct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->ExtendedTargetEndurancePct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroTargetName_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AggroTargetName, (const char *)arg2, 64-1);
      arg1->AggroTargetName[64-1] = 0;
    } else {
      arg1->AggroTargetName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_AggroTargetName_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->AggroTargetName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroMostHatedName_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AggroMostHatedName, (const char *)arg2, 64-1);
      arg1->AggroMostHatedName[64-1] = 0;
    } else {
      arg1->AggroMostHatedName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_AggroMostHatedName_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->AggroMostHatedName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroMostHatedNameNoLock_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AggroMostHatedNameNoLock, (const char *)arg2, 64-1);
      arg1->AggroMostHatedNameNoLock[64-1] = 0;
    } else {
      arg1->AggroMostHatedNameNoLock[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_AggroMostHatedNameNoLock_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->AggroMostHatedNameNoLock);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroHatePct_set(void * jarg1, void * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->AggroHatePct;
    for (ii = 0; ii < (size_t)eqlib::MAX_AGGRO_METER_SIZE; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_LabelCache_AggroHatePct_get(void * jarg1) {
  void * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int *)(int *) ((arg1)->AggroHatePct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroMyHatePct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AggroMyHatePct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_AggroMyHatePct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->AggroMyHatePct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_AggroMostHatedPct_set(void * jarg1, int jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AggroMostHatedPct = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_LabelCache_AggroMostHatedPct_get(void * jarg1) {
  int jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  int result;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (int) ((arg1)->AggroMostHatedPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_LabelCache_SubscriptionDaysLeft_set(void * jarg1, char * jarg2) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->SubscriptionDaysLeft, (const char *)arg2, 128-1);
      arg1->SubscriptionDaysLeft[128-1] = 0;
    } else {
      arg1->SubscriptionDaysLeft[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_LabelCache_SubscriptionDaysLeft_get(void * jarg1) {
  char * jresult ;
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  result = (char *)(char *) ((arg1)->SubscriptionDaysLeft);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LabelCache() {
  void * jresult ;
  eqlib::LabelCache *result = 0 ;
  
  result = (eqlib::LabelCache *)new eqlib::LabelCache();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LabelCache(void * jarg1) {
  eqlib::LabelCache *arg1 = (eqlib::LabelCache *) 0 ;
  
  arg1 = (eqlib::LabelCache *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_pPrev_set(void * jarg1, void * jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::EQGroundItem *arg2 = (eqlib::EQGroundItem *) 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (eqlib::EQGroundItem *)jarg2; 
  if (arg1) (arg1)->pPrev = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItem_pPrev_get(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::EQGroundItem *result = 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (eqlib::EQGroundItem *) ((arg1)->pPrev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_pNext_set(void * jarg1, void * jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::EQGroundItem *arg2 = (eqlib::EQGroundItem *) 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (eqlib::EQGroundItem *)jarg2; 
  if (arg1) (arg1)->pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItem_pNext_get(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::EQGroundItem *result = 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (eqlib::EQGroundItem *) ((arg1)->pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Item_set(void * jarg1, void * jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::ItemPtr *arg2 = (eqlib::ItemPtr *) 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2; 
  if (arg1) (arg1)->Item = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItem_Item_get(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::ItemPtr *result = 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (eqlib::ItemPtr *)& ((arg1)->Item);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_DropID_set(void * jarg1, int jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DropID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGroundItem_DropID_get(void * jarg1) {
  int jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (int) ((arg1)->DropID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_ZoneID_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->ZoneID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGroundItem_ZoneID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (DWORD) ((arg1)->ZoneID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_DropSubID_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->DropSubID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQGroundItem_DropSubID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (DWORD) ((arg1)->DropSubID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_pActor_set(void * jarg1, void * jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  if (arg1) (arg1)->pActor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItem_pActor_get(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::CActorInterface *result = 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (eqlib::CActorInterface *) ((arg1)->pActor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Name_set(void * jarg1, char * jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, eqlib::EQ_MAX_NAME-1);
      arg1->Name[eqlib::EQ_MAX_NAME-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQGroundItem_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Expires_set(void * jarg1, int jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  long arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->Expires = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGroundItem_Expires_get(void * jarg1) {
  int jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  long result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (long) ((arg1)->Expires);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Heading_set(void * jarg1, float jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGroundItem_Heading_get(void * jarg1) {
  float jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (float) ((arg1)->Heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Pitch_set(void * jarg1, float jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Pitch = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGroundItem_Pitch_get(void * jarg1) {
  float jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (float) ((arg1)->Pitch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Roll_set(void * jarg1, float jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Roll = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGroundItem_Roll_get(void * jarg1) {
  float jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (float) ((arg1)->Roll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Scale_set(void * jarg1, float jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGroundItem_Scale_get(void * jarg1) {
  float jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (float) ((arg1)->Scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Y_set(void * jarg1, float jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGroundItem_Y_get(void * jarg1) {
  float jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_X_set(void * jarg1, float jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGroundItem_X_get(void * jarg1) {
  float jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Z_set(void * jarg1, float jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQGroundItem_Z_get(void * jarg1) {
  float jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_Weight_set(void * jarg1, int jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Weight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQGroundItem_Weight_get(void * jarg1) {
  int jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  int result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (int) ((arg1)->Weight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItem_get_ID(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > result;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = ((eqlib::EQGroundItem const *)arg1)->get_ID();
  jresult = new eqlib::ItemPtr(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_set_ID(void * jarg1, void * jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  SwigValueWrapper< VePointer< eqlib::ItemClient > > arg2 ;
  eqlib::ItemPtr *argp2 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  argp2 = (eqlib::ItemPtr *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqlib::ItemPtr", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->set_ID(SWIG_STD_MOVE(arg2));
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItem_pContents_set(void * jarg1, void * jarg2) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::ItemPtr *arg2 = (eqlib::ItemPtr *) 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  arg2 = (eqlib::ItemPtr *)jarg2; 
  if (arg1) (arg1)->pContents = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItem_pContents_get(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::ItemPtr *result = 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (eqlib::ItemPtr *)& ((arg1)->pContents);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItem_getter_pSwitch(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  eqlib::CActorInterface **result = 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  result = (eqlib::CActorInterface **) &(arg1)->getter_pSwitch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQGroundItem() {
  void * jresult ;
  eqlib::EQGroundItem *result = 0 ;
  
  result = (eqlib::EQGroundItem *)new eqlib::EQGroundItem();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQGroundItem(void * jarg1) {
  eqlib::EQGroundItem *arg1 = (eqlib::EQGroundItem *) 0 ;
  
  arg1 = (eqlib::EQGroundItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQGroundItemListManager_Top_set(void * jarg1, void * jarg2) {
  eqlib::EQGroundItemListManager *arg1 = (eqlib::EQGroundItemListManager *) 0 ;
  eqlib::EQGroundItem *arg2 = (eqlib::EQGroundItem *) 0 ;
  
  arg1 = (eqlib::EQGroundItemListManager *)jarg1; 
  arg2 = (eqlib::EQGroundItem *)jarg2; 
  if (arg1) (arg1)->Top = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItemListManager_Top_get(void * jarg1) {
  void * jresult ;
  eqlib::EQGroundItemListManager *arg1 = (eqlib::EQGroundItemListManager *) 0 ;
  eqlib::EQGroundItem *result = 0 ;
  
  arg1 = (eqlib::EQGroundItemListManager *)jarg1; 
  result = (eqlib::EQGroundItem *) ((arg1)->Top);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQGroundItemListManager_Instance() {
  void * jresult ;
  eqlib::EQGroundItemListManager *result = 0 ;
  
  result = (eqlib::EQGroundItemListManager *) &eqlib::EQGroundItemListManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQGroundItemListManager() {
  void * jresult ;
  eqlib::EQGroundItemListManager *result = 0 ;
  
  result = (eqlib::EQGroundItemListManager *)new eqlib::EQGroundItemListManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQGroundItemListManager(void * jarg1) {
  eqlib::EQGroundItemListManager *arg1 = (eqlib::EQGroundItemListManager *) 0 ;
  
  arg1 = (eqlib::EQGroundItemListManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBroadcast_Get() {
  void * jresult ;
  eqlib::CBroadcast *result = 0 ;
  
  result = (eqlib::CBroadcast *)eqlib::CBroadcast::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_DisplayText(void * jarg1, char * jarg2, int jarg3, int jarg4, int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  UINT arg6 ;
  UINT arg7 ;
  UINT arg8 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (UINT)jarg6; 
  arg7 = (UINT)jarg7; 
  arg8 = (UINT)jarg8; 
  (arg1)->DisplayText((char const *)arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_TextObject_set(void * jarg1, void * jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  eqlib::CTextObjectInterface *arg2 = (eqlib::CTextObjectInterface *) 0 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (eqlib::CTextObjectInterface *)jarg2; 
  if (arg1) (arg1)->TextObject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CBroadcast_TextObject_get(void * jarg1) {
  void * jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  eqlib::CTextObjectInterface *result = 0 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (eqlib::CTextObjectInterface *) ((arg1)->TextObject);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_bBroadcastActive_set(void * jarg1, unsigned int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bBroadcastActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBroadcast_bBroadcastActive_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  bool result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (bool) ((arg1)->bBroadcastActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_bFadingOut_set(void * jarg1, unsigned int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bFadingOut = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBroadcast_bFadingOut_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  bool result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (bool) ((arg1)->bFadingOut);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_bFadingIn_set(void * jarg1, unsigned int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bFadingIn = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBroadcast_bFadingIn_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  bool result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (bool) ((arg1)->bFadingIn);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_StartTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->StartTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBroadcast_StartTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (UINT) ((arg1)->StartTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_FadeInTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->FadeInTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBroadcast_FadeInTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (UINT) ((arg1)->FadeInTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_EndTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->EndTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBroadcast_EndTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (UINT) ((arg1)->EndTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_FadeOutTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->FadeOutTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBroadcast_FadeOutTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (UINT) ((arg1)->FadeOutTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_DisplayTime_set(void * jarg1, unsigned int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->DisplayTime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CBroadcast_DisplayTime_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  UINT result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (UINT) ((arg1)->DisplayTime);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_BroadcastColor_set(void * jarg1, int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BroadcastColor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBroadcast_BroadcastColor_get(void * jarg1) {
  int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  int result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (int) ((arg1)->BroadcastColor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_CurrentPriority_set(void * jarg1, int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurrentPriority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBroadcast_CurrentPriority_get(void * jarg1) {
  int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  int result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (int) ((arg1)->CurrentPriority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CBroadcast_MaxAlpha_set(void * jarg1, int jarg2) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxAlpha = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CBroadcast_MaxAlpha_get(void * jarg1) {
  int jresult ;
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  int result;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  result = (int) ((arg1)->MaxAlpha);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CBroadcast() {
  void * jresult ;
  eqlib::CBroadcast *result = 0 ;
  
  result = (eqlib::CBroadcast *)new eqlib::CBroadcast();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CBroadcast(void * jarg1) {
  eqlib::CBroadcast *arg1 = (eqlib::CBroadcast *) 0 ;
  
  arg1 = (eqlib::CBroadcast *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChatManagerClient() {
  void * jresult ;
  eqlib::ChatManagerClient *result = 0 ;
  
  result = (eqlib::ChatManagerClient *)new eqlib::ChatManagerClient();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChatManagerClient(void * jarg1) {
  eqlib::ChatManagerClient *arg1 = (eqlib::ChatManagerClient *) 0 ;
  
  arg1 = (eqlib::ChatManagerClient *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResolutionUpdateData_Width_set(void * jarg1, int jarg2) {
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Width = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResolutionUpdateData_Width_get(void * jarg1) {
  int jresult ;
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int result;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  result = (int) ((arg1)->Width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResolutionUpdateData_Height_set(void * jarg1, int jarg2) {
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Height = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResolutionUpdateData_Height_get(void * jarg1) {
  int jresult ;
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int result;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  result = (int) ((arg1)->Height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResolutionUpdateData_BitsPerPixel_set(void * jarg1, int jarg2) {
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->BitsPerPixel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResolutionUpdateData_BitsPerPixel_get(void * jarg1) {
  int jresult ;
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int result;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  result = (int) ((arg1)->BitsPerPixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResolutionUpdateData_RefreshRate_set(void * jarg1, int jarg2) {
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RefreshRate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ResolutionUpdateData_RefreshRate_get(void * jarg1) {
  int jresult ;
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int result;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  result = (int) ((arg1)->RefreshRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResolutionUpdateData_bFullscreen_set(void * jarg1, unsigned int jarg2) {
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bFullscreen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ResolutionUpdateData_bFullscreen_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  bool result;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  result = (bool) ((arg1)->bFullscreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResolutionUpdateData_Set__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, unsigned int jarg6) {
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->Set(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_ResolutionUpdateData_Set__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->Set(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ResolutionUpdateData() {
  void * jresult ;
  eqlib::ResolutionUpdateData *result = 0 ;
  
  result = (eqlib::ResolutionUpdateData *)new eqlib::ResolutionUpdateData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ResolutionUpdateData(void * jarg1) {
  eqlib::ResolutionUpdateData *arg1 = (eqlib::ResolutionUpdateData *) 0 ;
  
  arg1 = (eqlib::ResolutionUpdateData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SDeviceInfo_Name_set(void * jarg1, char * jarg2) {
  eqlib::SDeviceInfo *arg1 = (eqlib::SDeviceInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SDeviceInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 0x80-1);
      arg1->Name[0x80-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SDeviceInfo_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::SDeviceInfo *arg1 = (eqlib::SDeviceInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SDeviceInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SDeviceInfo() {
  void * jresult ;
  eqlib::SDeviceInfo *result = 0 ;
  
  result = (eqlib::SDeviceInfo *)new eqlib::SDeviceInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SDeviceInfo(void * jarg1) {
  eqlib::SDeviceInfo *arg1 = (eqlib::SDeviceInfo *) 0 ;
  
  arg1 = (eqlib::SDeviceInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_vfTable_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->vfTable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_vfTable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (DWORD) ((arg1)->vfTable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_bIsFullscreen_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsFullscreen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_bIsFullscreen_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (bool) ((arg1)->bIsFullscreen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_FullscreenBitsPerPixel_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FullscreenBitsPerPixel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_FullscreenBitsPerPixel_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->FullscreenBitsPerPixel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_FullscreenRefreshRate_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FullscreenRefreshRate = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_FullscreenRefreshRate_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->FullscreenRefreshRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_FullscreenWidth_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FullscreenWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_FullscreenWidth_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->FullscreenWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_FullscreenHeight_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FullscreenHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_FullscreenHeight_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->FullscreenHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_WindowedWidth_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WindowedWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_WindowedWidth_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->WindowedWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_WindowedHeight_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WindowedHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_WindowedHeight_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->WindowedHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_WindowOffsetX_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WindowOffsetX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_WindowOffsetX_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->WindowOffsetX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_WindowOffsetY_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->WindowOffsetY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_WindowOffsetY_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->WindowOffsetY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_RestoredWidth_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RestoredWidth = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_RestoredWidth_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->RestoredWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_RestoredHeight_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RestoredHeight = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_RestoredHeight_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->RestoredHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_RestoredOffsetX_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RestoredOffsetX = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_RestoredOffsetX_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->RestoredOffsetX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_RestoredOffsetY_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RestoredOffsetY = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_RestoredOffsetY_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->RestoredOffsetY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_DeviceTable_set(void * jarg1, void * jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  eqlib::SDeviceInfo *arg2 = (eqlib::SDeviceInfo *) (eqlib::SDeviceInfo *)0 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (eqlib::SDeviceInfo *)jarg2; 
  {
    size_t ii;
    eqlib::SDeviceInfo *b = (eqlib::SDeviceInfo *) arg1->DeviceTable;
    for (ii = 0; ii < (size_t)0x10; ii++) b[ii] = *((eqlib::SDeviceInfo *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CResolutionHandlerBase_DeviceTable_get(void * jarg1) {
  void * jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  eqlib::SDeviceInfo *result = 0 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (eqlib::SDeviceInfo *)(eqlib::SDeviceInfo *) ((arg1)->DeviceTable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_DeviceCount_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DeviceCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_DeviceCount_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  int result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (int) ((arg1)->DeviceCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_DeviceIndex_set(void * jarg1, int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  long arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->DeviceIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CResolutionHandlerBase_DeviceIndex_get(void * jarg1) {
  int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  long result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (long) ((arg1)->DeviceIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_bUseD3DTextureCompression_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUseD3DTextureCompression = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_bUseD3DTextureCompression_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (bool) ((arg1)->bUseD3DTextureCompression);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_bResizable_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bResizable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_bResizable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (bool) ((arg1)->bResizable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_bMaximized_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bMaximized = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_bMaximized_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (bool) ((arg1)->bMaximized);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_bAlwaysOnTop_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAlwaysOnTop = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_bAlwaysOnTop_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (bool) ((arg1)->bAlwaysOnTop);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_bActive_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_bActive_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (bool) ((arg1)->bActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_ActiveThreadID_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  UINT arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->ActiveThreadID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_ActiveThreadID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  UINT result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (UINT) ((arg1)->ActiveThreadID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_ActiveWnd_set(void * jarg1, void * jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  HWND arg2 ;
  HWND *argp2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  argp2 = (HWND *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null HWND", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->ActiveWnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CResolutionHandlerBase_ActiveWnd_get(void * jarg1) {
  void * jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  HWND result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result =  ((arg1)->ActiveWnd);
  jresult = new HWND(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandlerBase_bChangingScreenResolutions_set(void * jarg1, unsigned int jarg2) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bChangingScreenResolutions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandlerBase_bChangingScreenResolutions_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  bool result;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  result = (bool) ((arg1)->bChangingScreenResolutions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CResolutionHandlerBase() {
  void * jresult ;
  eqlib::CResolutionHandlerBase *result = 0 ;
  
  result = (eqlib::CResolutionHandlerBase *)new eqlib::CResolutionHandlerBase();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CResolutionHandlerBase(void * jarg1) {
  eqlib::CResolutionHandlerBase *arg1 = (eqlib::CResolutionHandlerBase *) 0 ;
  
  arg1 = (eqlib::CResolutionHandlerBase *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CResolutionHandler_UpdateResolution(void * jarg1, void * jarg2) {
  eqlib::CResolutionHandler *arg1 = (eqlib::CResolutionHandler *) 0 ;
  eqlib::ResolutionUpdateData *arg2 = 0 ;
  
  arg1 = (eqlib::CResolutionHandler *)jarg1; 
  arg2 = (eqlib::ResolutionUpdateData *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::ResolutionUpdateData & is null", 0);
    return ;
  } 
  (arg1)->UpdateResolution(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CResolutionHandler_GetWindowedStyle(void * jarg1) {
  unsigned int jresult ;
  eqlib::CResolutionHandler *arg1 = (eqlib::CResolutionHandler *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::CResolutionHandler *)jarg1; 
  result = (DWORD)((eqlib::CResolutionHandler const *)arg1)->GetWindowedStyle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CResolutionHandler() {
  void * jresult ;
  eqlib::CResolutionHandler *result = 0 ;
  
  result = (eqlib::CResolutionHandler *)new eqlib::CResolutionHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CResolutionHandler(void * jarg1) {
  eqlib::CResolutionHandler *arg1 = (eqlib::CResolutionHandler *) 0 ;
  
  arg1 = (eqlib::CResolutionHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_Type_set(void * jarg1, int jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::TaskType arg2 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (eqlib::TaskType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskElement_Type_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::TaskType result;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (eqlib::TaskType) ((arg1)->Type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_GroupType_set(void * jarg1, int jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::TaskGroupType arg2 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (eqlib::TaskGroupType)jarg2; 
  if (arg1) (arg1)->GroupType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskElement_GroupType_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::TaskGroupType result;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (eqlib::TaskGroupType) ((arg1)->GroupType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_TargetName_set(void * jarg1, char * jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->TargetName, (const char *)arg2, 0x40-1);
      arg1->TargetName[0x40-1] = 0;
    } else {
      arg1->TargetName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskElement_TargetName_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (char *)(char *) ((arg1)->TargetName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_ZoneID_set(void * jarg1, char * jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ZoneID, (const char *)arg2, 0x40-1);
      arg1->ZoneID[0x40-1] = 0;
    } else {
      arg1->ZoneID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskElement_ZoneID_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (char *)(char *) ((arg1)->ZoneID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_TargetZoneID_set(void * jarg1, char * jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->TargetZoneID, (const char *)arg2, 0x40-1);
      arg1->TargetZoneID[0x40-1] = 0;
    } else {
      arg1->TargetZoneID[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskElement_TargetZoneID_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (char *)(char *) ((arg1)->TargetZoneID);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_RequiredCount_set(void * jarg1, int jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RequiredCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskElement_RequiredCount_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (int) ((arg1)->RequiredCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_bOptional_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bOptional = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTaskElement_bOptional_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (bool) ((arg1)->bOptional);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_ElementGroup_set(void * jarg1, int jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ElementGroup = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskElement_ElementGroup_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (int) ((arg1)->ElementGroup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_DZSwitchID_set(void * jarg1, int jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DZSwitchID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskElement_DZSwitchID_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (int) ((arg1)->DZSwitchID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_ElementDescriptionOverride_set(void * jarg1, char * jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ElementDescriptionOverride, (const char *)arg2, 0x80-1);
      arg1->ElementDescriptionOverride[0x80-1] = 0;
    } else {
      arg1->ElementDescriptionOverride[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskElement_ElementDescriptionOverride_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (char *)(char *) ((arg1)->ElementDescriptionOverride);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_ItemNameList_set(void * jarg1, void * jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::CXStr *arg2 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2; 
  if (arg1) (arg1)->ItemNameList = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskElement_ItemNameList_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (eqlib::CXStr *)& ((arg1)->ItemNameList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_SkillIDList_set(void * jarg1, void * jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::CXStr *arg2 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2; 
  if (arg1) (arg1)->SkillIDList = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskElement_SkillIDList_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (eqlib::CXStr *)& ((arg1)->SkillIDList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskElement_SpellIDList_set(void * jarg1, void * jarg2) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::CXStr *arg2 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2; 
  if (arg1) (arg1)->SpellIDList = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskElement_SpellIDList_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  result = (eqlib::CXStr *)& ((arg1)->SpellIDList);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CTaskElement() {
  void * jresult ;
  eqlib::CTaskElement *result = 0 ;
  
  result = (eqlib::CTaskElement *)new eqlib::CTaskElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTaskElement(void * jarg1) {
  eqlib::CTaskElement *arg1 = (eqlib::CTaskElement *) 0 ;
  
  arg1 = (eqlib::CTaskElement *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_TASK_ELEMENTS_get() {
  int jresult ;
  int result;
  
  result = (int)(int)eqlib::MAX_TASK_ELEMENTS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTaskEntry_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::CTaskEntry_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_TaskID_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TaskID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_TaskID_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (int) ((arg1)->TaskID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_RewardAdjustment_set(void * jarg1, float jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->RewardAdjustment = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CTaskEntry_RewardAdjustment_get(void * jarg1) {
  float jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  float result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (float) ((arg1)->RewardAdjustment);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_TaskTitle_set(void * jarg1, char * jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->TaskTitle, (const char *)arg2, 64-1);
      arg1->TaskTitle[64-1] = 0;
    } else {
      arg1->TaskTitle[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskEntry_TaskTitle_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (char *)(char *) ((arg1)->TaskTitle);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_DurationSeconds_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DurationSeconds = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_DurationSeconds_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (int) ((arg1)->DurationSeconds);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_DurationCode_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DurationCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_DurationCode_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (int) ((arg1)->DurationCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_StartText_set(void * jarg1, char * jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->StartText, (const char *)arg2, 4000-1);
      arg1->StartText[4000-1] = 0;
    } else {
      arg1->StartText[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskEntry_StartText_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (char *)(char *) ((arg1)->StartText);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_bShowReward_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bShowReward = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTaskEntry_bShowReward_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (bool) ((arg1)->bShowReward);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_RewardCash_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RewardCash = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_RewardCash_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (int) ((arg1)->RewardCash);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_RewardExp_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RewardExp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_RewardExp_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (int) ((arg1)->RewardExp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_RewardPoints_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RewardPoints = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_RewardPoints_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (int) ((arg1)->RewardPoints);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_RewardFactionName_set(void * jarg1, char * jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->RewardFactionName, (const char *)arg2, 96-1);
      arg1->RewardFactionName[96-1] = 0;
    } else {
      arg1->RewardFactionName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskEntry_RewardFactionName_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (char *)(char *) ((arg1)->RewardFactionName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_RewardFactionAmount_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RewardFactionAmount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_RewardFactionAmount_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (int) ((arg1)->RewardFactionAmount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_RewardItemTag_set(void * jarg1, void * jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqlib::CXStr *arg2 = (eqlib::CXStr *) 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (eqlib::CXStr *)jarg2; 
  if (arg1) (arg1)->RewardItemTag = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskEntry_RewardItemTag_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqlib::CXStr *result = 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (eqlib::CXStr *)& ((arg1)->RewardItemTag);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_Elements_set(void * jarg1, void * jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqlib::CTaskElement *arg2 = (eqlib::CTaskElement *) (eqlib::CTaskElement *)0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (eqlib::CTaskElement *)jarg2; 
  {
    size_t ii;
    eqlib::CTaskElement *b = (eqlib::CTaskElement *) arg1->Elements;
    for (ii = 0; ii < (size_t)eqlib::MAX_TASK_ELEMENTS; ii++) b[ii] = *((eqlib::CTaskElement *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskEntry_Elements_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqlib::CTaskElement *result = 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (eqlib::CTaskElement *)(eqlib::CTaskElement *) ((arg1)->Elements);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_TaskSystem_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqlib::TaskSystemType arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (eqlib::TaskSystemType)jarg2; 
  if (arg1) (arg1)->TaskSystem = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_TaskSystem_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqlib::TaskSystemType result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (eqlib::TaskSystemType) ((arg1)->TaskSystem);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_PointType_set(void * jarg1, int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->PointType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskEntry_PointType_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (int) ((arg1)->PointType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_StartTextCompiled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->StartTextCompiled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTaskEntry_StartTextCompiled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (bool) ((arg1)->StartTextCompiled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_RawStartText_set(void * jarg1, char * jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->RawStartText, (const char *)arg2, 4000-1);
      arg1->RawStartText[4000-1] = 0;
    } else {
      arg1->RawStartText[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskEntry_RawStartText_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (char *)(char *) ((arg1)->RawStartText);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_bElementsReceived_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bElementsReceived = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTaskEntry_bElementsReceived_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (bool) ((arg1)->bElementsReceived);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_TimeCompleted_set(void * jarg1, void * jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqtime_t arg2 ;
  eqtime_t *argp2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  argp2 = (eqtime_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqtime_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TimeCompleted = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskEntry_TimeCompleted_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqtime_t result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result =  ((arg1)->TimeCompleted);
  jresult = new eqtime_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_MonsterTemplates_set(void * jarg1, void * jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqlib::ArrayClass< MonsterMissionTemplate > *arg2 = (eqlib::ArrayClass< MonsterMissionTemplate > *) 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = (eqlib::ArrayClass< MonsterMissionTemplate > *)jarg2; 
  if (arg1) (arg1)->MonsterTemplates = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskEntry_MonsterTemplates_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  eqlib::ArrayClass< MonsterMissionTemplate > *result = 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (eqlib::ArrayClass< MonsterMissionTemplate > *)& ((arg1)->MonsterTemplates);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_bTemplateSelectionLocked_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTemplateSelectionLocked = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTaskEntry_bTemplateSelectionLocked_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (bool) ((arg1)->bTemplateSelectionLocked);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskEntry_bHasRewardSet_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHasRewardSet = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTaskEntry_bHasRewardSet_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  result = (bool) ((arg1)->bHasRewardSet);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CTaskEntry() {
  void * jresult ;
  eqlib::CTaskEntry *result = 0 ;
  
  result = (eqlib::CTaskEntry *)new eqlib::CTaskEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTaskEntry(void * jarg1) {
  eqlib::CTaskEntry *arg1 = (eqlib::CTaskEntry *) 0 ;
  
  arg1 = (eqlib::CTaskEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedTaskClientPlayerInfo_Name_set(void * jarg1, char * jarg2) {
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 0x40-1);
      arg1->Name[0x40-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SharedTaskClientPlayerInfo_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedTaskClientPlayerInfo_TemplateID_set(void * jarg1, int jarg2) {
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->TemplateID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedTaskClientPlayerInfo_TemplateID_get(void * jarg1) {
  int jresult ;
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  result = (int) ((arg1)->TemplateID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedTaskClientPlayerInfo_m_role_set(void * jarg1, int jarg2) {
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  eqlib::SharedTaskPlayerRole arg2 ;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  arg2 = (eqlib::SharedTaskPlayerRole)jarg2; 
  if (arg1) (arg1)->m_role = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SharedTaskClientPlayerInfo_m_role_get(void * jarg1) {
  int jresult ;
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  eqlib::SharedTaskPlayerRole result;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  result = (eqlib::SharedTaskPlayerRole) ((arg1)->m_role);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SharedTaskClientPlayerInfo_pNext_set(void * jarg1, void * jarg2) {
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  eqlib::SharedTaskClientPlayerInfo *arg2 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  arg2 = (eqlib::SharedTaskClientPlayerInfo *)jarg2; 
  if (arg1) (arg1)->pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SharedTaskClientPlayerInfo_pNext_get(void * jarg1) {
  void * jresult ;
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  eqlib::SharedTaskClientPlayerInfo *result = 0 ;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  result = (eqlib::SharedTaskClientPlayerInfo *) ((arg1)->pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SharedTaskClientPlayerInfo() {
  void * jresult ;
  eqlib::SharedTaskClientPlayerInfo *result = 0 ;
  
  result = (eqlib::SharedTaskClientPlayerInfo *)new eqlib::SharedTaskClientPlayerInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SharedTaskClientPlayerInfo(void * jarg1) {
  eqlib::SharedTaskClientPlayerInfo *arg1 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  
  arg1 = (eqlib::SharedTaskClientPlayerInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_TASK_ENTRIES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_TASK_ENTRIES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_QUEST_ENTRIES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_QUEST_ENTRIES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_SHARED_TASK_ENTRIES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_SHARED_TASK_ENTRIES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_QUEST_HISTORY_ENTRIES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_QUEST_HISTORY_ENTRIES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_TaskEntries_set(void * jarg1, void * jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *arg2 = (eqlib::CTaskEntry *) (eqlib::CTaskEntry *)0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (eqlib::CTaskEntry *)jarg2; 
  {
    size_t ii;
    eqlib::CTaskEntry *b = (eqlib::CTaskEntry *) arg1->TaskEntries;
    for (ii = 0; ii < (size_t)eqlib::MAX_TASK_ENTRIES; ii++) b[ii] = *((eqlib::CTaskEntry *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_TaskEntries_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (eqlib::CTaskEntry *)(eqlib::CTaskEntry *) ((arg1)->TaskEntries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_QuestEntries_set(void * jarg1, void * jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *arg2 = (eqlib::CTaskEntry *) (eqlib::CTaskEntry *)0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (eqlib::CTaskEntry *)jarg2; 
  {
    size_t ii;
    eqlib::CTaskEntry *b = (eqlib::CTaskEntry *) arg1->QuestEntries;
    for (ii = 0; ii < (size_t)eqlib::MAX_QUEST_ENTRIES; ii++) b[ii] = *((eqlib::CTaskEntry *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_QuestEntries_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (eqlib::CTaskEntry *)(eqlib::CTaskEntry *) ((arg1)->QuestEntries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_SharedTaskEntries_set(void * jarg1, void * jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *arg2 = (eqlib::CTaskEntry *) (eqlib::CTaskEntry *)0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (eqlib::CTaskEntry *)jarg2; 
  {
    size_t ii;
    eqlib::CTaskEntry *b = (eqlib::CTaskEntry *) arg1->SharedTaskEntries;
    for (ii = 0; ii < (size_t)eqlib::MAX_SHARED_TASK_ENTRIES; ii++) b[ii] = *((eqlib::CTaskEntry *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_SharedTaskEntries_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (eqlib::CTaskEntry *)(eqlib::CTaskEntry *) ((arg1)->SharedTaskEntries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_QuestHistoryEntries_set(void * jarg1, void * jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *arg2 = (eqlib::CTaskEntry *) (eqlib::CTaskEntry *)0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (eqlib::CTaskEntry *)jarg2; 
  {
    size_t ii;
    eqlib::CTaskEntry *b = (eqlib::CTaskEntry *) arg1->QuestHistoryEntries;
    for (ii = 0; ii < (size_t)eqlib::MAX_QUEST_HISTORY_ENTRIES; ii++) b[ii] = *((eqlib::CTaskEntry *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_QuestHistoryEntries_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (eqlib::CTaskEntry *)(eqlib::CTaskEntry *) ((arg1)->QuestHistoryEntries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_UnknownQuestEntries_set(void * jarg1, void * jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *arg2 = (eqlib::CTaskEntry *) (eqlib::CTaskEntry *)0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (eqlib::CTaskEntry *)jarg2; 
  {
    size_t ii;
    eqlib::CTaskEntry *b = (eqlib::CTaskEntry *) arg1->UnknownQuestEntries;
    for (ii = 0; ii < (size_t)eqlib::MAX_QUEST_ENTRIES; ii++) b[ii] = *((eqlib::CTaskEntry *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_UnknownQuestEntries_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskEntry *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (eqlib::CTaskEntry *)(eqlib::CTaskEntry *) ((arg1)->UnknownQuestEntries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_AddPlayerID_set(void * jarg1, int jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AddPlayerID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTaskManager_AddPlayerID_get(void * jarg1) {
  int jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  int result;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (int) ((arg1)->AddPlayerID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_bAddPlayerIsSwap_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAddPlayerIsSwap = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTaskManager_bAddPlayerIsSwap_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (bool) ((arg1)->bAddPlayerIsSwap);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_AddPlayerSwapeeName_set(void * jarg1, char * jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->AddPlayerSwapeeName, (const char *)arg2, 0x40-1);
      arg1->AddPlayerSwapeeName[0x40-1] = 0;
    } else {
      arg1->AddPlayerSwapeeName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_CTaskManager_AddPlayerSwapeeName_get(void * jarg1) {
  char * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (char *)(char *) ((arg1)->AddPlayerSwapeeName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_pFirstMember_set(void * jarg1, void * jarg2) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::SharedTaskClientPlayerInfo *arg2 = (eqlib::SharedTaskClientPlayerInfo *) 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (eqlib::SharedTaskClientPlayerInfo *)jarg2; 
  if (arg1) (arg1)->pFirstMember = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_pFirstMember_get(void * jarg1) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::SharedTaskClientPlayerInfo *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  result = (eqlib::SharedTaskClientPlayerInfo *) ((arg1)->pFirstMember);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_GetEntry__SWIG_0(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  eqlib::CTaskEntry *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (eqlib::CTaskEntry *)(arg1)->GetEntry(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_GetEntry__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  int arg2 ;
  int arg3 ;
  eqlib::CTaskEntry *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (eqlib::CTaskEntry *)(arg1)->GetEntry(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTaskManager_GetTaskStatus(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  void * jresult ;
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::PcClient *arg2 = (eqlib::PcClient *) 0 ;
  int arg3 ;
  eqlib::TaskSystemType arg4 ;
  PCTaskStatus *result = 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (eqlib::PcClient *)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (eqlib::TaskSystemType)jarg4; 
  result = (PCTaskStatus *)(arg1)->GetTaskStatus(arg2,arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTaskManager_GetElementDescription(void * jarg1, void * jarg2, char * jarg3) {
  eqlib::CTaskManager *arg1 = (eqlib::CTaskManager *) 0 ;
  eqlib::CTaskElement *arg2 = (eqlib::CTaskElement *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (eqlib::CTaskManager *)jarg1; 
  arg2 = (eqlib::CTaskElement *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->GetElementDescription((eqlib::CTaskElement const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQ_AltAbility(void * jarg1) {
  eqlib::EQ_AltAbility *arg1 = (eqlib::EQ_AltAbility *) 0 ;
  
  arg1 = (eqlib::EQ_AltAbility *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQ_Equipment(void * jarg1) {
  eqlib::EQ_Equipment *arg1 = (eqlib::EQ_Equipment *) 0 ;
  
  arg1 = (eqlib::EQ_Equipment *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_LoadingS_SetProgressBar(void * jarg1, int jarg2, char * jarg3) {
  eqlib::EQ_LoadingS *arg1 = (eqlib::EQ_LoadingS *) 0 ;
  int arg2 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (eqlib::EQ_LoadingS *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetProgressBar(arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EqEmitterData(void * jarg1) {
  eqlib::EqEmitterData *arg1 = (eqlib::EqEmitterData *) 0 ;
  
  arg1 = (eqlib::EqEmitterData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_pPrev_set(void * jarg1, void * jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::EQPlacedItem *arg2 = (eqlib::EQPlacedItem *) 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (eqlib::EQPlacedItem *)jarg2; 
  if (arg1) (arg1)->pPrev = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItem_pPrev_get(void * jarg1) {
  void * jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::EQPlacedItem *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (eqlib::EQPlacedItem *) ((arg1)->pPrev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_pNext_set(void * jarg1, void * jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::EQPlacedItem *arg2 = (eqlib::EQPlacedItem *) 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (eqlib::EQPlacedItem *)jarg2; 
  if (arg1) (arg1)->pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItem_pNext_get(void * jarg1) {
  void * jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::EQPlacedItem *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (eqlib::EQPlacedItem *) ((arg1)->pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_RecordNum_set(void * jarg1, int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RecordNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQPlacedItem_RecordNum_get(void * jarg1) {
  int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (int) ((arg1)->RecordNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_ItemGuid_set(void * jarg1, void * jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::EqItemGuid *arg2 = (eqlib::EqItemGuid *) 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (eqlib::EqItemGuid *)jarg2; 
  if (arg1) (arg1)->ItemGuid = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItem_ItemGuid_get(void * jarg1) {
  void * jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::EqItemGuid *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (eqlib::EqItemGuid *)& ((arg1)->ItemGuid);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_RealEstateID_set(void * jarg1, int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RealEstateID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQPlacedItem_RealEstateID_get(void * jarg1) {
  int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (int) ((arg1)->RealEstateID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_RealEstateItemID_set(void * jarg1, int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RealEstateItemID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQPlacedItem_RealEstateItemID_get(void * jarg1) {
  int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (int) ((arg1)->RealEstateItemID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_bIsNPC_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIsNPC = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQPlacedItem_bIsNPC_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (bool) ((arg1)->bIsNPC);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_PlacingItemNpcID_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->PlacingItemNpcID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQPlacedItem_PlacingItemNpcID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  unsigned int result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (unsigned int) ((arg1)->PlacingItemNpcID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_pLight_set(void * jarg1, void * jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::CLightInterface *arg2 = (eqlib::CLightInterface *) 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (eqlib::CLightInterface *)jarg2; 
  if (arg1) (arg1)->pLight = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItem_pLight_get(void * jarg1) {
  void * jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::CLightInterface *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (eqlib::CLightInterface *) ((arg1)->pLight);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_pActor_set(void * jarg1, void * jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  if (arg1) (arg1)->pActor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItem_pActor_get(void * jarg1) {
  void * jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::CActorInterface *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (eqlib::CActorInterface *) ((arg1)->pActor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Name_set(void * jarg1, char * jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, eqlib::EQ_ACTOR_TAG-1);
      arg1->Name[eqlib::EQ_ACTOR_TAG-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQPlacedItem_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Unknown0x7c_set(void * jarg1, int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0x7c = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQPlacedItem_Unknown0x7c_get(void * jarg1) {
  int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (int) ((arg1)->Unknown0x7c);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Unknown0x80_set(void * jarg1, int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Unknown0x80 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQPlacedItem_Unknown0x80_get(void * jarg1) {
  int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (int) ((arg1)->Unknown0x80);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Scale_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_Scale_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->Scale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Heading_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_Heading_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->Heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Angle_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Angle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_Angle_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->Angle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Roll_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Roll = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_Roll_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->Roll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Y_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_Y_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_X_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_X_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_Z_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_Z_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_bIgnoreCollisions_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bIgnoreCollisions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQPlacedItem_bIgnoreCollisions_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (bool) ((arg1)->bIgnoreCollisions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_bDisablePlacementRotation_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisablePlacementRotation = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQPlacedItem_bDisablePlacementRotation_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (bool) ((arg1)->bDisablePlacementRotation);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_bDisableFreePlacement_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisableFreePlacement = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQPlacedItem_bDisableFreePlacement_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (bool) ((arg1)->bDisableFreePlacement);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_PlacementType_set(void * jarg1, int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::ePlacementType arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (eqlib::ePlacementType)jarg2; 
  if (arg1) (arg1)->PlacementType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQPlacedItem_PlacementType_get(void * jarg1) {
  int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  eqlib::ePlacementType result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (eqlib::ePlacementType) ((arg1)->PlacementType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_ScaleRangeMin_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleRangeMin = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_ScaleRangeMin_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->ScaleRangeMin);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_ScaleRangeMax_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ScaleRangeMax = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_ScaleRangeMax_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->ScaleRangeMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_DefaultScale_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultScale = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_DefaultScale_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->DefaultScale);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_DefaultHeading_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultHeading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_DefaultHeading_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->DefaultHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_DefaultAngle_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_DefaultAngle_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->DefaultAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_DefaultRoll_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultRoll = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_DefaultRoll_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->DefaultRoll);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_LightType_set(void * jarg1, int jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LightType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQPlacedItem_LightType_get(void * jarg1) {
  int jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  int result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (int) ((arg1)->LightType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItem_NPCHeight_set(void * jarg1, float jarg2) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->NPCHeight = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQPlacedItem_NPCHeight_get(void * jarg1) {
  float jresult ;
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  float result;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  result = (float) ((arg1)->NPCHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQPlacedItem(void * jarg1) {
  eqlib::EQPlacedItem *arg1 = (eqlib::EQPlacedItem *) 0 ;
  
  arg1 = (eqlib::EQPlacedItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItemManager_Instance() {
  void * jresult ;
  eqlib::EQPlacedItemManager *result = 0 ;
  
  result = (eqlib::EQPlacedItemManager *) &eqlib::EQPlacedItemManager::Instance();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItemManager_GetItemByGuid(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::EQPlacedItemManager *arg1 = (eqlib::EQPlacedItemManager *) 0 ;
  eqlib::EqItemGuid *arg2 = 0 ;
  eqlib::EQPlacedItem *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItemManager *)jarg1; 
  arg2 = (eqlib::EqItemGuid *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::EqItemGuid const & is null", 0);
    return 0;
  } 
  result = (eqlib::EQPlacedItem *)(arg1)->GetItemByGuid((eqlib::EqItemGuid const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItemManager_GetItemByRealEstateAndRealEstateItemIds(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  eqlib::EQPlacedItemManager *arg1 = (eqlib::EQPlacedItemManager *) 0 ;
  int arg2 ;
  int arg3 ;
  eqlib::EQPlacedItem *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItemManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (eqlib::EQPlacedItem *)(arg1)->GetItemByRealEstateAndRealEstateItemIds(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQPlacedItemManager_Top_set(void * jarg1, void * jarg2) {
  eqlib::EQPlacedItemManager *arg1 = (eqlib::EQPlacedItemManager *) 0 ;
  eqlib::EQPlacedItem *arg2 = (eqlib::EQPlacedItem *) 0 ;
  
  arg1 = (eqlib::EQPlacedItemManager *)jarg1; 
  arg2 = (eqlib::EQPlacedItem *)jarg2; 
  if (arg1) (arg1)->Top = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQPlacedItemManager_Top_get(void * jarg1) {
  void * jresult ;
  eqlib::EQPlacedItemManager *arg1 = (eqlib::EQPlacedItemManager *) 0 ;
  eqlib::EQPlacedItem *result = 0 ;
  
  arg1 = (eqlib::EQPlacedItemManager *)jarg1; 
  result = (eqlib::EQPlacedItem *) ((arg1)->Top);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQPlacedItemManager() {
  void * jresult ;
  eqlib::EQPlacedItemManager *result = 0 ;
  
  result = (eqlib::EQPlacedItemManager *)new eqlib::EQPlacedItemManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQPlacedItemManager(void * jarg1) {
  eqlib::EQPlacedItemManager *arg1 = (eqlib::EQPlacedItemManager *) 0 ;
  
  arg1 = (eqlib::EQPlacedItemManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_WavePlay(void * jarg1, int jarg2, void * jarg3) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int arg2 ;
  eqlib::SoundControl *arg3 = (eqlib::SoundControl *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::SoundControl *)jarg3; 
  (arg1)->WavePlay(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_PlayScriptMp3__SWIG_0(void * jarg1, char * jarg2, float jarg3) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->PlayScriptMp3(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_PlayScriptMp3__SWIG_1(void * jarg1, char * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->PlayScriptMp3(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pMp3Manager_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::Mp3Manager *arg2 = (eqlib::Mp3Manager *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::Mp3Manager *)jarg2; 
  if (arg1) (arg1)->pMp3Manager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pMp3Manager_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::Mp3Manager *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::Mp3Manager *) ((arg1)->pMp3Manager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pSoundManager_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundManager *arg2 = (eqlib::SoundManager *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundManager *)jarg2; 
  if (arg1) (arg1)->pSoundManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pSoundManager_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundManager *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundManager *) ((arg1)->pSoundManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pEmitterManager_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::EmitterManager *arg2 = (eqlib::EmitterManager *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::EmitterManager *)jarg2; 
  if (arg1) (arg1)->pEmitterManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pEmitterManager_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::EmitterManager *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::EmitterManager *) ((arg1)->pEmitterManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pMusicManager_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::MusicManager *arg2 = (eqlib::MusicManager *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::MusicManager *)jarg2; 
  if (arg1) (arg1)->pMusicManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pMusicManager_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::MusicManager *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::MusicManager *) ((arg1)->pMusicManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pGlobalMidiAsset_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pGlobalMidiAsset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pGlobalMidiAsset_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pGlobalMidiAsset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pOpenerMidiAsset_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pOpenerMidiAsset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pOpenerMidiAsset_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pOpenerMidiAsset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pOpenerMp3Asset_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pOpenerMp3Asset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pOpenerMp3Asset_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pOpenerMp3Asset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pDeathMp3Asset_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pDeathMp3Asset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pDeathMp3Asset_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pDeathMp3Asset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pCombatMp3Asset_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pCombatMp3Asset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pCombatMp3Asset_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pCombatMp3Asset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pMerchantMp3Asset_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pMerchantMp3Asset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pMerchantMp3Asset_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pMerchantMp3Asset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pZoneMidiAsset_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pZoneMidiAsset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pZoneMidiAsset_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pZoneMidiAsset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pScriptMp3Asset_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pScriptMp3Asset = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pScriptMp3Asset_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pScriptMp3Asset);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_bDisabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bDisabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EqSoundManager_bDisabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  bool result;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (bool) ((arg1)->bDisabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_NextMusicID_set(void * jarg1, int jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NextMusicID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EqSoundManager_NextMusicID_get(void * jarg1) {
  int jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int result;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (int) ((arg1)->NextMusicID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pEmitters_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundEmitter **arg2 = (eqlib::SoundEmitter **) (eqlib::SoundEmitter **)0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundEmitter **)jarg2; 
  {
    size_t ii;
    eqlib::SoundEmitter * *b = (eqlib::SoundEmitter * *) arg1->pEmitters;
    for (ii = 0; ii < (size_t)1000; ii++) b[ii] = *((eqlib::SoundEmitter * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pEmitters_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundEmitter **result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundEmitter **)(eqlib::SoundEmitter **) ((arg1)->pEmitters);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_EmittersCount_set(void * jarg1, int jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EmittersCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EqSoundManager_EmittersCount_get(void * jarg1) {
  int jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int result;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (int) ((arg1)->EmittersCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pRainEmitter_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundEmitter *arg2 = (eqlib::SoundEmitter *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundEmitter *)jarg2; 
  if (arg1) (arg1)->pRainEmitter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pRainEmitter_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundEmitter *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundEmitter *) ((arg1)->pRainEmitter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_pWindEmitter_set(void * jarg1, void * jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundEmitter *arg2 = (eqlib::SoundEmitter *) 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (eqlib::SoundEmitter *)jarg2; 
  if (arg1) (arg1)->pWindEmitter = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSoundManager_pWindEmitter_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  eqlib::SoundEmitter *result = 0 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (eqlib::SoundEmitter *) ((arg1)->pWindEmitter);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_EnvironmentHigh_set(void * jarg1, int jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnvironmentHigh = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EqSoundManager_EnvironmentHigh_get(void * jarg1) {
  int jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int result;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (int) ((arg1)->EnvironmentHigh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_EnvironmentLow_set(void * jarg1, int jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnvironmentLow = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EqSoundManager_EnvironmentLow_get(void * jarg1) {
  int jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int result;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (int) ((arg1)->EnvironmentLow);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_EnvironmentOutside_set(void * jarg1, int jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnvironmentOutside = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EqSoundManager_EnvironmentOutside_get(void * jarg1) {
  int jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  int result;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (int) ((arg1)->EnvironmentOutside);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_fEffectsLevel_set(void * jarg1, float jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fEffectsLevel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EqSoundManager_fEffectsLevel_get(void * jarg1) {
  float jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  float result;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (float) ((arg1)->fEffectsLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSoundManager_fWaveVolumeLevel_set(void * jarg1, float jarg2) {
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->fWaveVolumeLevel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EqSoundManager_fWaveVolumeLevel_get(void * jarg1) {
  float jresult ;
  eqlib::EqSoundManager *arg1 = (eqlib::EqSoundManager *) 0 ;
  float result;
  
  arg1 = (eqlib::EqSoundManager *)jarg1; 
  result = (float) ((arg1)->fWaveVolumeLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_UseSwitch__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3, int jarg4, void * jarg5) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  UINT arg2 ;
  int arg3 ;
  int arg4 ;
  eqlib::CVector3 *arg5 = (eqlib::CVector3 *) 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (eqlib::CVector3 *)jarg5; 
  (arg1)->UseSwitch(arg2,arg3,arg4,(eqlib::CVector3 const *)arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_UseSwitch__SWIG_1(void * jarg1, unsigned int jarg2, int jarg3, int jarg4) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  UINT arg2 ;
  int arg3 ;
  int arg4 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (UINT)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->UseSwitch(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_ObjType_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->ObjType = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_ObjType_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->ObjType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_ID_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->ID = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_ID_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->ID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Name_set(void * jarg1, char * jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, 0x20-1);
      arg1->Name[0x20-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQSwitch_Name_get(void * jarg1) {
  char * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Type_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_Type_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_State_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->State = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_State_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->State);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_DefaultY_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_DefaultY_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->DefaultY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_DefaultX_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_DefaultX_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->DefaultX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_DefaultZ_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_DefaultZ_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->DefaultZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_DefaultHeading_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultHeading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_DefaultHeading_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->DefaultHeading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_DefaultDoorAngle_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DefaultDoorAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_DefaultDoorAngle_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->DefaultDoorAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_TopSpeed1_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TopSpeed1 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_TopSpeed1_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->TopSpeed1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_TopSpeed2_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->TopSpeed2 = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_TopSpeed2_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->TopSpeed2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Y_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_Y_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_X_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_X_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Z_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_Z_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Heading_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_Heading_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->Heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_DoorAngle_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->DoorAngle = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_DoorAngle_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->DoorAngle);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_DefaultState_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->DefaultState = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_DefaultState_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->DefaultState);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_SelfActivated_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->SelfActivated = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_SelfActivated_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->SelfActivated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Dependent_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->Dependent = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_Dependent_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->Dependent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_bTemplate_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bTemplate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSwitch_bTemplate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (bool) ((arg1)->bTemplate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Difficulty_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->Difficulty = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_Difficulty_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->Difficulty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_AffectSlots_set(void * jarg1, void * jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE *)jarg2; 
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->AffectSlots;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSwitch_AffectSlots_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE *result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE *)(BYTE *) ((arg1)->AffectSlots);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_CurrentCombination_set(void * jarg1, void * jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE *)jarg2; 
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->CurrentCombination;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSwitch_CurrentCombination_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE *result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE *)(BYTE *) ((arg1)->CurrentCombination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_ReqCombination_set(void * jarg1, void * jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE *)jarg2; 
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->ReqCombination;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSwitch_ReqCombination_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE *result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE *)(BYTE *) ((arg1)->ReqCombination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_RandomCombo_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->RandomCombo = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_RandomCombo_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->RandomCombo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Key_set(void * jarg1, int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Key = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSwitch_Key_get(void * jarg1) {
  int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (int) ((arg1)->Key);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_ScaleFactor_set(void * jarg1, short jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  SHORT arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (SHORT)jarg2; 
  if (arg1) (arg1)->ScaleFactor = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_EQSwitch_ScaleFactor_get(void * jarg1) {
  short jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  SHORT result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (SHORT) ((arg1)->ScaleFactor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_SpellID_set(void * jarg1, int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SpellID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSwitch_SpellID_get(void * jarg1) {
  int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (int) ((arg1)->SpellID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_TargetID_set(void * jarg1, void * jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE *arg2 = (BYTE *) (BYTE *)0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE *)jarg2; 
  {
    size_t ii;
    BYTE *b = (BYTE *) arg1->TargetID;
    for (ii = 0; ii < (size_t)0x5; ii++) b[ii] = *((BYTE *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSwitch_TargetID_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE *result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE *)(BYTE *) ((arg1)->TargetID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Script_set(void * jarg1, char * jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Script, (const char *)arg2, 0x20-1);
      arg1->Script[0x20-1] = 0;
    } else {
      arg1->Script[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQSwitch_Script_get(void * jarg1) {
  char * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (char *)(char *) ((arg1)->Script);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_pActor_set(void * jarg1, void * jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  if (arg1) (arg1)->pActor = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSwitch_pActor_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  eqlib::CActorInterface *result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (eqlib::CActorInterface *) ((arg1)->pActor);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_particle_set(void * jarg1, void * jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  eqlib::CParticleCloudInterface *arg2 = (eqlib::CParticleCloudInterface *) 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (eqlib::CParticleCloudInterface *)jarg2; 
  if (arg1) (arg1)->particle = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSwitch_particle_get(void * jarg1) {
  void * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  eqlib::CParticleCloudInterface *result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (eqlib::CParticleCloudInterface *) ((arg1)->particle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_TimeStamp_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->TimeStamp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSwitch_TimeStamp_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (DWORD) ((arg1)->TimeStamp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_Accel_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Accel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_Accel_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->Accel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_AlwaysActive_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (BYTE)jarg2; 
  if (arg1) (arg1)->AlwaysActive = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQSwitch_AlwaysActive_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  BYTE result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (BYTE) ((arg1)->AlwaysActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_AdventureDoorID_set(void * jarg1, int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->AdventureDoorID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSwitch_AdventureDoorID_get(void * jarg1) {
  int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (int) ((arg1)->AdventureDoorID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_ReturnY_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ReturnY = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_ReturnY_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->ReturnY);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_ReturnX_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ReturnX = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_ReturnX_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->ReturnX);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_ReturnZ_set(void * jarg1, float jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ReturnZ = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQSwitch_ReturnZ_get(void * jarg1) {
  float jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  float result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (float) ((arg1)->ReturnZ);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_DynDoorID_set(void * jarg1, int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->DynDoorID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSwitch_DynDoorID_get(void * jarg1) {
  int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (int) ((arg1)->DynDoorID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_bHasScript_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHasScript = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSwitch_bHasScript_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (bool) ((arg1)->bHasScript);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_SomeID_set(void * jarg1, int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SomeID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSwitch_SomeID_get(void * jarg1) {
  int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (int) ((arg1)->SomeID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_bUsable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bUsable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSwitch_bUsable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (bool) ((arg1)->bUsable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_bRemainOpen_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bRemainOpen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSwitch_bRemainOpen_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (bool) ((arg1)->bRemainOpen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_bVisible_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bVisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSwitch_bVisible_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (bool) ((arg1)->bVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_bHeadingChanged_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bHeadingChanged = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSwitch_bHeadingChanged_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (bool) ((arg1)->bHeadingChanged);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_bAllowCorpseDrag_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bAllowCorpseDrag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQSwitch_bAllowCorpseDrag_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (bool) ((arg1)->bAllowCorpseDrag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQSwitch_RealEstateDoorID_set(void * jarg1, int jarg2) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->RealEstateDoorID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQSwitch_RealEstateDoorID_get(void * jarg1) {
  int jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  int result;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (int) ((arg1)->RealEstateDoorID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQSwitch_getter_pSwitch(void * jarg1) {
  void * jresult ;
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  eqlib::CActorInterface **result = 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  result = (eqlib::CActorInterface **) &(arg1)->getter_pSwitch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQSwitch(void * jarg1) {
  eqlib::EQSwitch *arg1 = (eqlib::EQSwitch *) 0 ;
  
  arg1 = (eqlib::EQSwitch *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EqSwitchManager_GetCount(void * jarg1) {
  int jresult ;
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  int result;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  result = (int)((eqlib::EqSwitchManager const *)arg1)->GetCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSwitchManager_GetSwitch(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  int arg2 ;
  eqlib::EQSwitch *result = 0 ;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::EQSwitch *)(arg1)->GetSwitch(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSwitchManager_GetSwitchById(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  int arg2 ;
  eqlib::EQSwitch *result = 0 ;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (eqlib::EQSwitch *)(arg1)->GetSwitchById(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSwitchManager_GetSwitchByActor(void * jarg1, void * jarg2) {
  void * jresult ;
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  eqlib::CActorInterface *arg2 = (eqlib::CActorInterface *) 0 ;
  eqlib::EQSwitch *result = 0 ;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  arg2 = (eqlib::CActorInterface *)jarg2; 
  result = (eqlib::EQSwitch *)(arg1)->GetSwitchByActor(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSwitchManager_NumEntries_set(void * jarg1, int jarg2) {
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->NumEntries = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EqSwitchManager_NumEntries_get(void * jarg1) {
  int jresult ;
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  int result;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  result = (int) ((arg1)->NumEntries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EqSwitchManager_Switches_set(void * jarg1, void * jarg2) {
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  eqlib::EQSwitch **arg2 = (eqlib::EQSwitch **) (eqlib::EQSwitch **)0 ;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  arg2 = (eqlib::EQSwitch **)jarg2; 
  {
    size_t ii;
    eqlib::EQSwitch * *b = (eqlib::EQSwitch * *) arg1->Switches;
    for (ii = 0; ii < (size_t)512; ii++) b[ii] = *((eqlib::EQSwitch * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSwitchManager_Switches_get(void * jarg1) {
  void * jresult ;
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  eqlib::EQSwitch **result = 0 ;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  result = (eqlib::EQSwitch **)(eqlib::EQSwitch **) ((arg1)->Switches);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EqSwitchManager_get_pDoor(void * jarg1) {
  void * jresult ;
  eqlib::EqSwitchManager *arg1 = (eqlib::EqSwitchManager *) 0 ;
  eqlib::EQSwitch **result = 0 ;
  
  arg1 = (eqlib::EqSwitchManager *)jarg1; 
  result = (eqlib::EQSwitch **)(arg1)->get_pDoor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_ZONES_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_ZONES;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_ZONE_SHORTNAME_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_ZONE_SHORTNAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MAX_ZONE_LONGNAME_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::MAX_ZONE_LONGNAME;
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_EQZoneFlag_NoMount_get() {
  unsigned long long jresult ;
  uint64_t result;
  
  result = (uint64_t)eqlib::EQZoneFlag_NoMount;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_EQExpansion_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  eqlib::EQExpansion arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (eqlib::EQExpansion)jarg2; 
  if (arg1) (arg1)->EQExpansion = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_EQExpansion_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  eqlib::EQExpansion result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (eqlib::EQExpansion) ((arg1)->EQExpansion);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_Id_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  eqlib::EQZoneIndex arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (eqlib::EQZoneIndex)jarg2; 
  if (arg1) (arg1)->Id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_Id_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  eqlib::EQZoneIndex result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (eqlib::EQZoneIndex) ((arg1)->Id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_ShortName_set(void * jarg1, char * jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ShortName, (const char *)arg2, eqlib::MAX_ZONE_SHORTNAME+1-1);
      arg1->ShortName[eqlib::MAX_ZONE_SHORTNAME+1-1] = 0;
    } else {
      arg1->ShortName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQZoneInfo_ShortName_get(void * jarg1) {
  char * jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->ShortName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_LongName_set(void * jarg1, char * jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->LongName, (const char *)arg2, eqlib::MAX_ZONE_LONGNAME+1-1);
      arg1->LongName[eqlib::MAX_ZONE_LONGNAME+1-1] = 0;
    } else {
      arg1->LongName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_EQZoneInfo_LongName_get(void * jarg1) {
  char * jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (char *)(char *) ((arg1)->LongName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_ZoneFlags_set(void * jarg1, unsigned long long jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  uint64_t arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (uint64_t)jarg2; 
  if (arg1) (arg1)->ZoneFlags = arg2;
}


SWIGEXPORT unsigned long long SWIGSTDCALL CSharp_EQZoneInfo_ZoneFlags_get(void * jarg1) {
  unsigned long long jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  uint64_t result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (uint64_t) ((arg1)->ZoneFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_eqstrID_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->eqstrID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_eqstrID_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->eqstrID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_AccessLevel_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->AccessLevel = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQZoneInfo_AccessLevel_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (uint8_t) ((arg1)->AccessLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_MinLevel_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MinLevel = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_MinLevel_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->MinLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_CurPlayerCount_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->CurPlayerCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_CurPlayerCount_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->CurPlayerCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_MaxPlayerCount_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MaxPlayerCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_MaxPlayerCount_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->MaxPlayerCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_NextInstanceID_set(void * jarg1, unsigned short jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  uint16_t arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->NextInstanceID = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_EQZoneInfo_NextInstanceID_get(void * jarg1) {
  unsigned short jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  uint16_t result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (uint16_t) ((arg1)->NextInstanceID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_Cpu1_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Cpu1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_Cpu1_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->Cpu1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_Cpu2_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Cpu2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_Cpu2_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->Cpu2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_Memory_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Memory = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_Memory_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->Memory);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_MemLoad_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->MemLoad = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_MemLoad_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->MemLoad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_VirtMemLoad_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->VirtMemLoad = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_VirtMemLoad_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->VirtMemLoad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_ActiveMercenaries_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ActiveMercenaries = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_ActiveMercenaries_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->ActiveMercenaries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_SuspendedMercenaries_set(void * jarg1, int jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->SuspendedMercenaries = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQZoneInfo_SuspendedMercenaries_get(void * jarg1) {
  int jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int result;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int) ((arg1)->SuspendedMercenaries);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQZoneInfo_Unknown0x1D4_set(void * jarg1, void * jarg2) {
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int *arg2 = (int *) (int *)0 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  arg2 = (int *)jarg2; 
  {
    size_t ii;
    int *b = (int *) arg1->Unknown0x1D4;
    for (ii = 0; ii < (size_t)9; ii++) b[ii] = *((int *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQZoneInfo_Unknown0x1D4_get(void * jarg1) {
  void * jresult ;
  eqlib::EQZoneInfo *arg1 = (eqlib::EQZoneInfo *) 0 ;
  int *result = 0 ;
  
  arg1 = (eqlib::EQZoneInfo *)jarg1; 
  result = (int *)(int *) ((arg1)->Unknown0x1D4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQWorldData_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::EQWorldData_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_EQWorldData(void * jarg1) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQWorldData_GetZone(void * jarg1, int jarg2) {
  void * jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  eqlib::EQZoneIndex arg2 ;
  eqlib::EQZoneInfo *result = 0 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (eqlib::EQZoneIndex)jarg2; 
  result = (eqlib::EQZoneInfo *)((eqlib::EQWorldData const *)arg1)->GetZone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQWorldData_GetZoneBaseId(int jarg1) {
  int jresult ;
  eqlib::EQZoneIndex arg1 ;
  eqlib::EQZoneIndex result;
  
  arg1 = (eqlib::EQZoneIndex)jarg1; 
  result = (eqlib::EQZoneIndex)eqlib::EQWorldData::GetZoneBaseId(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQWorldData_IsFlagSet(void * jarg1, int jarg2, unsigned long long jarg3) {
  unsigned int jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  eqlib::EQZoneIndex arg2 ;
  uint64_t arg3 ;
  bool result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (eqlib::EQZoneIndex)jarg2; 
  arg3 = (uint64_t)jarg3; 
  result = (bool)((eqlib::EQWorldData const *)arg1)->IsFlagSet(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_Hour_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Hour = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQWorldData_Hour_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint8_t) ((arg1)->Hour);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_Minute_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Minute = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQWorldData_Minute_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint8_t) ((arg1)->Minute);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_Day_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Day = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQWorldData_Day_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint8_t) ((arg1)->Day);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_Month_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->Month = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQWorldData_Month_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint8_t) ((arg1)->Month);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_Year_set(void * jarg1, int jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Year = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQWorldData_Year_get(void * jarg1) {
  int jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  int result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (int) ((arg1)->Year);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_LastHour_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LastHour = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQWorldData_LastHour_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint8_t) ((arg1)->LastHour);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_LastMinute_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LastMinute = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQWorldData_LastMinute_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint8_t) ((arg1)->LastMinute);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_LastDay_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LastDay = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQWorldData_LastDay_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint8_t) ((arg1)->LastDay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_LastMonth_set(void * jarg1, unsigned char jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->LastMonth = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_EQWorldData_LastMonth_get(void * jarg1) {
  unsigned char jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint8_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint8_t) ((arg1)->LastMonth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_LastYear_set(void * jarg1, int jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->LastYear = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQWorldData_LastYear_get(void * jarg1) {
  int jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  int result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (int) ((arg1)->LastYear);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_LastAdvance_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastAdvance = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQWorldData_LastAdvance_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint32_t) ((arg1)->LastAdvance);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_LastTime_set(void * jarg1, void * jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  eqtime_t arg2 ;
  eqtime_t *argp2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  argp2 = (eqtime_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null eqtime_t", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->LastTime = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQWorldData_LastTime_get(void * jarg1) {
  void * jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  eqtime_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result =  ((arg1)->LastTime);
  jresult = new eqtime_t(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_NextMercenaryId_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->NextMercenaryId = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQWorldData_NextMercenaryId_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (uint32_t) ((arg1)->NextMercenaryId);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQWorldData_ZoneArray_set(void * jarg1, void * jarg2) {
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  eqlib::EQZoneInfo **arg2 = (eqlib::EQZoneInfo **) (eqlib::EQZoneInfo **)0 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  arg2 = (eqlib::EQZoneInfo **)jarg2; 
  {
    size_t ii;
    eqlib::EQZoneInfo * *b = (eqlib::EQZoneInfo * *) arg1->ZoneArray;
    for (ii = 0; ii < (size_t)eqlib::MAX_ZONES; ii++) b[ii] = *((eqlib::EQZoneInfo * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQWorldData_ZoneArray_get(void * jarg1) {
  void * jresult ;
  eqlib::EQWorldData *arg1 = (eqlib::EQWorldData *) 0 ;
  eqlib::EQZoneInfo **result = 0 ;
  
  arg1 = (eqlib::EQWorldData *)jarg1; 
  result = (eqlib::EQZoneInfo **)(eqlib::EQZoneInfo **) ((arg1)->ZoneArray);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_EQWorldData() {
  void * jresult ;
  eqlib::EQWorldData *result = 0 ;
  
  result = (eqlib::EQWorldData *)new eqlib::EQWorldData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KeypressHandler_AttachAltKeyToEqCommand(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  eqlib::KeyCombo *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  arg2 = (eqlib::KeyCombo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::KeyCombo const & is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->AttachAltKeyToEqCommand((eqlib::KeyCombo const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KeypressHandler_AttachKeyToEqCommand(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  eqlib::KeyCombo *arg2 = 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  arg2 = (eqlib::KeyCombo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::KeyCombo const & is null", 0);
    return 0;
  } 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->AttachKeyToEqCommand((eqlib::KeyCombo const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KeypressHandler_HandleKeyDown(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  eqlib::KeyCombo *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  arg2 = (eqlib::KeyCombo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::KeyCombo const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->HandleKeyDown((eqlib::KeyCombo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_KeypressHandler_HandleKeyUp(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  eqlib::KeyCombo *arg2 = 0 ;
  bool result;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  arg2 = (eqlib::KeyCombo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::KeyCombo const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->HandleKeyUp((eqlib::KeyCombo const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypressHandler_ClearCommandStateArray(void * jarg1) {
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  (arg1)->ClearCommandStateArray();
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypressHandler_SaveKeymapping(void * jarg1, unsigned int jarg2, void * jarg3, int jarg4) {
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  unsigned int arg2 ;
  eqlib::KeyCombo *arg3 = 0 ;
  int arg4 ;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (eqlib::KeyCombo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "eqlib::KeyCombo const & is null", 0);
    return ;
  } 
  arg4 = (int)jarg4; 
  (arg1)->SaveKeymapping(arg2,(eqlib::KeyCombo const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypressHandler_NormalKey_set(void * jarg1, void * jarg2) {
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  eqlib::KeyCombo *arg2 = (eqlib::KeyCombo *) (eqlib::KeyCombo *)0 ;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  arg2 = (eqlib::KeyCombo *)jarg2; 
  {
    size_t ii;
    eqlib::KeyCombo *b = (eqlib::KeyCombo *) arg1->NormalKey;
    for (ii = 0; ii < (size_t)eqlib::nEQMappableCommands; ii++) b[ii] = *((eqlib::KeyCombo *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KeypressHandler_NormalKey_get(void * jarg1) {
  void * jresult ;
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  eqlib::KeyCombo *result = 0 ;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  result = (eqlib::KeyCombo *)(eqlib::KeyCombo *) ((arg1)->NormalKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypressHandler_AltKey_set(void * jarg1, void * jarg2) {
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  eqlib::KeyCombo *arg2 = (eqlib::KeyCombo *) (eqlib::KeyCombo *)0 ;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  arg2 = (eqlib::KeyCombo *)jarg2; 
  {
    size_t ii;
    eqlib::KeyCombo *b = (eqlib::KeyCombo *) arg1->AltKey;
    for (ii = 0; ii < (size_t)eqlib::nEQMappableCommands; ii++) b[ii] = *((eqlib::KeyCombo *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_KeypressHandler_AltKey_get(void * jarg1) {
  void * jresult ;
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  eqlib::KeyCombo *result = 0 ;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  result = (eqlib::KeyCombo *)(eqlib::KeyCombo *) ((arg1)->AltKey);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_KeypressHandler_CommandState_set(void * jarg1, char * jarg2) {
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->CommandState, (const char *)arg2, eqlib::nEQMappableCommands-1);
      arg1->CommandState[eqlib::nEQMappableCommands-1] = 0;
    } else {
      arg1->CommandState[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_KeypressHandler_CommandState_get(void * jarg1) {
  char * jresult ;
  eqlib::KeypressHandler *arg1 = (eqlib::KeypressHandler *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::KeypressHandler *)jarg1; 
  result = (char *)(char *) ((arg1)->CommandState);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MidiInstance(void * jarg1) {
  eqlib::MidiInstance *arg1 = (eqlib::MidiInstance *) 0 ;
  
  arg1 = (eqlib::MidiInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoundObject(void * jarg1) {
  eqlib::SoundObject *arg1 = (eqlib::SoundObject *) 0 ;
  
  arg1 = (eqlib::SoundObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundObject_refCount_set(void * jarg1, int jarg2) {
  eqlib::SoundObject *arg1 = (eqlib::SoundObject *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SoundObject *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->refCount = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundObject_refCount_get(void * jarg1) {
  int jresult ;
  eqlib::SoundObject *arg1 = (eqlib::SoundObject *) 0 ;
  int result;
  
  arg1 = (eqlib::SoundObject *)jarg1; 
  result = (int) ((arg1)->refCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoundAsset(void * jarg1) {
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundAsset_szName_set(void * jarg1, char * jarg2) {
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->szName, (const char *)arg2, 512-1);
      arg1->szName[512-1] = 0;
    } else {
      arg1->szName[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SoundAsset_szName_get(void * jarg1) {
  char * jresult ;
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  result = (char *)(char *) ((arg1)->szName);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundAsset_rawData_set(void * jarg1, char * jarg2) {
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    delete [] arg1->rawData;
    if (arg2) {
      arg1->rawData = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->rawData, (const char *)arg2);
    } else {
      arg1->rawData = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SoundAsset_rawData_get(void * jarg1) {
  char * jresult ;
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  result = (char *) ((arg1)->rawData);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundAsset_rawDataLen_set(void * jarg1, int jarg2) {
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rawDataLen = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundAsset_rawDataLen_get(void * jarg1) {
  int jresult ;
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  int result;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  result = (int) ((arg1)->rawDataLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundAsset_assetType_set(void * jarg1, int jarg2) {
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  eqlib::AssetType arg2 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  arg2 = (eqlib::AssetType)jarg2; 
  if (arg1) (arg1)->assetType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundAsset_assetType_get(void * jarg1) {
  int jresult ;
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  eqlib::AssetType result;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  result = (eqlib::AssetType) ((arg1)->assetType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundAsset_soundManager_set(void * jarg1, void * jarg2) {
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  eqlib::SoundManager *arg2 = (eqlib::SoundManager *) 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  arg2 = (eqlib::SoundManager *)jarg2; 
  if (arg1) (arg1)->soundManager = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoundAsset_soundManager_get(void * jarg1) {
  void * jresult ;
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  eqlib::SoundManager *result = 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  result = (eqlib::SoundManager *) ((arg1)->soundManager);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundAsset_soundInstance_set(void * jarg1, void * jarg2) {
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  eqlib::SoundInstance *arg2 = (eqlib::SoundInstance *) 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  arg2 = (eqlib::SoundInstance *)jarg2; 
  if (arg1) (arg1)->soundInstance = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoundAsset_soundInstance_get(void * jarg1) {
  void * jresult ;
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  eqlib::SoundInstance *result = 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  result = (eqlib::SoundInstance *) ((arg1)->soundInstance);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundAsset_pNext_set(void * jarg1, void * jarg2) {
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  eqlib::SoundAsset *arg2 = (eqlib::SoundAsset *) 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  arg2 = (eqlib::SoundAsset *)jarg2; 
  if (arg1) (arg1)->pNext = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SoundAsset_pNext_get(void * jarg1) {
  void * jresult ;
  eqlib::SoundAsset *arg1 = (eqlib::SoundAsset *) 0 ;
  eqlib::SoundAsset *result = 0 ;
  
  arg1 = (eqlib::SoundAsset *)jarg1; 
  result = (eqlib::SoundAsset *) ((arg1)->pNext);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_volumeLevel_set(void * jarg1, float jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->volumeLevel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundControl_volumeLevel_get(void * jarg1) {
  float jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (float) ((arg1)->volumeLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_fadeInTime_set(void * jarg1, int jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fadeInTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundControl_fadeInTime_get(void * jarg1) {
  int jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  int result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (int) ((arg1)->fadeInTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_loops_set(void * jarg1, int jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->loops = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundControl_loops_get(void * jarg1) {
  int jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  int result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (int) ((arg1)->loops);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_sequence_set(void * jarg1, int jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sequence = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundControl_sequence_get(void * jarg1) {
  int jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  int result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (int) ((arg1)->sequence);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_x_set(void * jarg1, float jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundControl_x_get(void * jarg1) {
  float jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (float) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_y_set(void * jarg1, float jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundControl_y_get(void * jarg1) {
  float jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (float) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_z_set(void * jarg1, float jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundControl_z_get(void * jarg1) {
  float jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (float) ((arg1)->z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_minDistance_set(void * jarg1, float jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->minDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundControl_minDistance_get(void * jarg1) {
  float jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (float) ((arg1)->minDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_maxDistance_set(void * jarg1, float jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->maxDistance = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundControl_maxDistance_get(void * jarg1) {
  float jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (float) ((arg1)->maxDistance);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_effectsLevel_set(void * jarg1, float jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->effectsLevel = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_SoundControl_effectsLevel_get(void * jarg1) {
  float jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  float result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (float) ((arg1)->effectsLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_poolNumber_set(void * jarg1, int jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->poolNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SoundControl_poolNumber_get(void * jarg1) {
  int jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  int result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (int) ((arg1)->poolNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_fireOnce_set(void * jarg1, unsigned int jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->fireOnce = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundControl_fireOnce_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  bool result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (bool) ((arg1)->fireOnce);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SoundControl_startUp_set(void * jarg1, unsigned int jarg2) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->startUp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SoundControl_startUp_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  bool result;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  result = (bool) ((arg1)->startUp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoundControl() {
  void * jresult ;
  eqlib::SoundControl *result = 0 ;
  
  result = (eqlib::SoundControl *)new eqlib::SoundControl();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoundControl(void * jarg1) {
  eqlib::SoundControl *arg1 = (eqlib::SoundControl *) 0 ;
  
  arg1 = (eqlib::SoundControl *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoundEmitter(void * jarg1) {
  eqlib::SoundEmitter *arg1 = (eqlib::SoundEmitter *) 0 ;
  
  arg1 = (eqlib::SoundEmitter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SoundInstance(void * jarg1) {
  eqlib::SoundInstance *arg1 = (eqlib::SoundInstance *) 0 ;
  
  arg1 = (eqlib::SoundInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SoundManager() {
  void * jresult ;
  eqlib::SoundManager *result = 0 ;
  
  result = (eqlib::SoundManager *)new eqlib::SoundManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Wave3dInstance(void * jarg1) {
  eqlib::Wave3dInstance *arg1 = (eqlib::Wave3dInstance *) 0 ;
  
  arg1 = (eqlib::Wave3dInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WaveInstance(void * jarg1) {
  eqlib::WaveInstance *arg1 = (eqlib::WaveInstance *) 0 ;
  
  arg1 = (eqlib::WaveInstance *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DatabaseStringTable_GetString__SWIG_0(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  char * jresult ;
  eqlib::DatabaseStringTable *arg1 = (eqlib::DatabaseStringTable *) 0 ;
  int arg2 ;
  eqlib::eDatabaseStringType arg3 ;
  bool *arg4 = (bool *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::DatabaseStringTable *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::eDatabaseStringType)jarg3; 
  arg4 = (bool *)jarg4; 
  result = (char *)(arg1)->GetString(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DatabaseStringTable_GetString__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  char * jresult ;
  eqlib::DatabaseStringTable *arg1 = (eqlib::DatabaseStringTable *) 0 ;
  int arg2 ;
  eqlib::eDatabaseStringType arg3 ;
  char *result = 0 ;
  
  arg1 = (eqlib::DatabaseStringTable *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (eqlib::eDatabaseStringType)jarg3; 
  result = (char *)(arg1)->GetString(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DatabaseStringTable_GetString__SWIG_2(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  char * jresult ;
  eqlib::DatabaseStringTable *arg1 = (eqlib::DatabaseStringTable *) 0 ;
  int arg2 ;
  int arg3 ;
  bool *arg4 = (bool *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::DatabaseStringTable *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (bool *)jarg4; 
  result = (char *)(arg1)->GetString(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DatabaseStringTable_GetString__SWIG_3(void * jarg1, int jarg2, int jarg3) {
  char * jresult ;
  eqlib::DatabaseStringTable *arg1 = (eqlib::DatabaseStringTable *) 0 ;
  int arg2 ;
  int arg3 ;
  char *result = 0 ;
  
  arg1 = (eqlib::DatabaseStringTable *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (char *)(arg1)->GetString(arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DatabaseStringTable() {
  void * jresult ;
  eqlib::DatabaseStringTable *result = 0 ;
  
  result = (eqlib::DatabaseStringTable *)new eqlib::DatabaseStringTable();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DatabaseStringTable(void * jarg1) {
  eqlib::DatabaseStringTable *arg1 = (eqlib::DatabaseStringTable *) 0 ;
  
  arg1 = (eqlib::DatabaseStringTable *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTribute_GetActiveFavorCost(void * jarg1) {
  int jresult ;
  eqlib::CTribute *arg1 = (eqlib::CTribute *) 0 ;
  int result;
  
  arg1 = (eqlib::CTribute *)jarg1; 
  result = (int)(arg1)->GetActiveFavorCost();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CTribute() {
  void * jresult ;
  eqlib::CTribute *result = 0 ;
  
  result = (eqlib::CTribute *)new eqlib::CTribute();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTribute(void * jarg1) {
  eqlib::CTribute *arg1 = (eqlib::CTribute *) 0 ;
  
  arg1 = (eqlib::CTribute *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_ImageNumber_set(void * jarg1, int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ImageNumber = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Skill_ImageNumber_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (int) ((arg1)->ImageNumber);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_ImageDep_set(void * jarg1, int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ImageDep = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Skill_ImageDep_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (int) ((arg1)->ImageDep);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_nName_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->nName = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Skill_nName_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (DWORD) ((arg1)->nName);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_ReuseTimer_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->ReuseTimer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Skill_ReuseTimer_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (DWORD) ((arg1)->ReuseTimer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_BaseDamage_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (DWORD)jarg2; 
  if (arg1) (arg1)->BaseDamage = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Skill_BaseDamage_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (DWORD) ((arg1)->BaseDamage);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_SkillCombatType_set(void * jarg1, int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  eqlib::eSkillCombatType arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (eqlib::eSkillCombatType)jarg2; 
  if (arg1) (arg1)->SkillCombatType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Skill_SkillCombatType_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  eqlib::eSkillCombatType result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (eqlib::eSkillCombatType) ((arg1)->SkillCombatType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_EnduranceCost_set(void * jarg1, int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->EnduranceCost = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_EQ_Skill_EnduranceCost_get(void * jarg1) {
  int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  int result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (int) ((arg1)->EnduranceCost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_Force_set(void * jarg1, float jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Force = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_EQ_Skill_Force_get(void * jarg1) {
  float jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  float result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (float) ((arg1)->Force);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_Activated_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->Activated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Skill_Activated_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (bool) ((arg1)->Activated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_LevelCappedSkill_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->LevelCappedSkill = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Skill_LevelCappedSkill_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (bool) ((arg1)->LevelCappedSkill);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_MinLevel_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD *arg2 = (DWORD *) (DWORD *)0 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (DWORD *)jarg2; 
  {
    size_t ii;
    DWORD *b = (DWORD *) arg1->MinLevel;
    for (ii = 0; ii < (size_t)eqlib::MAX_CLASSES+1; ii++) b[ii] = *((DWORD *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Skill_MinLevel_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD *result = 0 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (DWORD *)(DWORD *) ((arg1)->MinLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_Available_set(void * jarg1, void * jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD *arg2 = (DWORD *) (DWORD *)0 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = (DWORD *)jarg2; 
  {
    size_t ii;
    DWORD *b = (DWORD *) arg1->Available;
    for (ii = 0; ii < (size_t)eqlib::MAX_CLASSES+1; ii++) b[ii] = *((DWORD *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EQ_Skill_Available_get(void * jarg1) {
  void * jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  DWORD *result = 0 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (DWORD *)(DWORD *) ((arg1)->Available);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_EQ_Skill_bSkillupable_set(void * jarg1, unsigned int jarg2) {
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSkillupable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_EQ_Skill_bSkillupable_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::EQ_Skill *arg1 = (eqlib::EQ_Skill *) 0 ;
  bool result;
  
  arg1 = (eqlib::EQ_Skill *)jarg1; 
  result = (bool) ((arg1)->bSkillupable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SkillManager_size_get() {
  unsigned int jresult ;
  size_t result;
  
  result = eqlib::SkillManager_size;
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SkillManager_GetNameToken(void * jarg1, int jarg2) {
  int jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->GetNameToken(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SkillManager_GetSkillCap(void * jarg1, void * jarg2, int jarg3, void * jarg4, int jarg5, unsigned int jarg6, unsigned int jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  eqlib::PcZoneClient *arg2 = (eqlib::PcZoneClient *) 0 ;
  int arg3 ;
  EQClass arg4 ;
  int arg5 ;
  bool arg6 ;
  bool arg7 ;
  bool arg8 ;
  EQClass *argp4 ;
  unsigned int result;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (eqlib::PcZoneClient *)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (EQClass *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null EQClass", 0);
    return 0;
  }
  arg4 = *argp4; 
  arg5 = (int)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  arg8 = jarg8 ? true : false; 
  result = (unsigned int)(arg1)->GetSkillCap(arg2,arg3,SWIG_STD_MOVE(arg4),arg5,arg6,arg7,arg8);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SkillManager_IsActivatedSkill(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsActivatedSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SkillManager_IsAvailable(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsAvailable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SkillManager_IsCombatSkill(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->IsCombatSkill(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SkillManager_GetSkillTimerDuration(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned int)(arg1)->GetSkillTimerDuration(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SkillManager_GetSkillLastUsed(void * jarg1, int jarg2) {
  unsigned int jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  int arg2 ;
  unsigned int result;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned int)(arg1)->GetSkillLastUsed(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_pSkill_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  eqlib::TSafeArrayStatic< eqlib::EQ_Skill *,100 > *arg2 = (eqlib::TSafeArrayStatic< eqlib::EQ_Skill *,100 > *) 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (eqlib::TSafeArrayStatic< eqlib::EQ_Skill *,100 > *)jarg2; 
  if (arg1) (arg1)->pSkill = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_pSkill_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  eqlib::TSafeArrayStatic< eqlib::EQ_Skill *,100 > *result = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (eqlib::TSafeArrayStatic< eqlib::EQ_Skill *,100 > *)& ((arg1)->pSkill);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_SkillCaps_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  int (*arg2)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1] = (int (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1]) (int (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1])0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (int (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1])jarg2; 
  {
    int (*inp)[eqlib::NUM_SKILLS] = (int (*)[eqlib::NUM_SKILLS])(arg2);
    int (*dest)[eqlib::NUM_SKILLS] = (int (*)[eqlib::NUM_SKILLS])(arg1->SkillCaps);
    size_t ii = 0;
    for (; ii < eqlib::MAX_CLASSES+1; ++ii) {
      int *ip = inp[ii];
      int *dp = dest[ii];
      size_t jj = 0;
      for (; jj < eqlib::NUM_SKILLS; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_SkillCaps_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  int (*result)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1] = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (int (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1])(int (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1]) ((arg1)->SkillCaps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_SkillMods_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  float (*arg2)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1] = (float (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1]) (float (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1])0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (float (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1])jarg2; 
  {
    float (*inp)[eqlib::NUM_SKILLS] = (float (*)[eqlib::NUM_SKILLS])(arg2);
    float (*dest)[eqlib::NUM_SKILLS] = (float (*)[eqlib::NUM_SKILLS])(arg1->SkillMods);
    size_t ii = 0;
    for (; ii < eqlib::MAX_CLASSES+1; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < eqlib::NUM_SKILLS; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_SkillMods_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  float (*result)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1] = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (float (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1])(float (*)[eqlib::NUM_SKILLS][eqlib::MAX_PC_LEVEL+1]) ((arg1)->SkillMods);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_SkillCapsFilename_set(void * jarg1, char * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  char *arg2 = (char *) (char *)0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->SkillCapsFilename, (const char *)arg2, MAX_PATH-1);
      arg1->SkillCapsFilename[MAX_PATH-1] = 0;
    } else {
      arg1->SkillCapsFilename[0] = 0;
    }
  }
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SkillManager_SkillCapsFilename_get(void * jarg1) {
  char * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  char *result = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (char *)(char *) ((arg1)->SkillCapsFilename);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_SkillLastUsed_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->SkillLastUsed;
    for (ii = 0; ii < (size_t)eqlib::NUM_SKILLS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_SkillLastUsed_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->SkillLastUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_SkillTimerDuration_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->SkillTimerDuration;
    for (ii = 0; ii < (size_t)eqlib::NUM_SKILLS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_SkillTimerDuration_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->SkillTimerDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_CombatSkillLastUsed_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->CombatSkillLastUsed;
    for (ii = 0; ii < (size_t)eqlib::CONCURRENT_SKILLS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_CombatSkillLastUsed_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->CombatSkillLastUsed);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_CombatSkillDuration_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  uint32_t *arg2 = (uint32_t *) (uint32_t *)0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (uint32_t *)jarg2; 
  {
    size_t ii;
    uint32_t *b = (uint32_t *) arg1->CombatSkillDuration;
    for (ii = 0; ii < (size_t)eqlib::CONCURRENT_SKILLS; ii++) b[ii] = *((uint32_t *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_CombatSkillDuration_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  uint32_t *result = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (uint32_t *)(uint32_t *) ((arg1)->CombatSkillDuration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_bSkillCanUse_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->bSkillCanUse;
    for (ii = 0; ii < (size_t)eqlib::NUM_SKILLS; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_bSkillCanUse_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (bool *)(bool *) ((arg1)->bSkillCanUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SkillManager_bCombatSkillCanUse_set(void * jarg1, void * jarg2) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  bool *arg2 = (bool *) (bool *)0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  arg2 = (bool *)jarg2; 
  {
    size_t ii;
    bool *b = (bool *) arg1->bCombatSkillCanUse;
    for (ii = 0; ii < (size_t)eqlib::CONCURRENT_SKILLS; ii++) b[ii] = *((bool *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SkillManager_bCombatSkillCanUse_get(void * jarg1) {
  void * jresult ;
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  bool *result = 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  result = (bool *)(bool *) ((arg1)->bCombatSkillCanUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SkillManager() {
  void * jresult ;
  eqlib::SkillManager *result = 0 ;
  
  result = (eqlib::SkillManager *)new eqlib::SkillManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SkillManager(void * jarg1) {
  eqlib::SkillManager *arg1 = (eqlib::SkillManager *) 0 ;
  
  arg1 = (eqlib::SkillManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tp_coords_Index_set(void * jarg1, int jarg2) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->Index = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tp_coords_Index_get(void * jarg1) {
  int jresult ;
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  int result;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  result = (int) ((arg1)->Index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tp_coords_Y_set(void * jarg1, float jarg2) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Y = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tp_coords_Y_get(void * jarg1) {
  float jresult ;
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  float result;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  result = (float) ((arg1)->Y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tp_coords_X_set(void * jarg1, float jarg2) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->X = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tp_coords_X_get(void * jarg1) {
  float jresult ;
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  float result;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  result = (float) ((arg1)->X);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tp_coords_Z_set(void * jarg1, float jarg2) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Z = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tp_coords_Z_get(void * jarg1) {
  float jresult ;
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  float result;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  result = (float) ((arg1)->Z);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tp_coords_Heading_set(void * jarg1, float jarg2) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->Heading = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_tp_coords_Heading_get(void * jarg1) {
  float jresult ;
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  float result;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  result = (float) ((arg1)->Heading);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tp_coords_ZoneId_set(void * jarg1, int jarg2) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->ZoneId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tp_coords_ZoneId_get(void * jarg1) {
  int jresult ;
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  int result;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  result = (int) ((arg1)->ZoneId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tp_coords_FilterID_set(void * jarg1, int jarg2) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  int arg2 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->FilterID = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tp_coords_FilterID_get(void * jarg1) {
  int jresult ;
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  int result;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  result = (int) ((arg1)->FilterID);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_tp_coords_VehicleID_set(void * jarg1, unsigned int jarg2) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  UINT arg2 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  arg2 = (UINT)jarg2; 
  if (arg1) (arg1)->VehicleID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_tp_coords_VehicleID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  UINT result;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  result = (UINT) ((arg1)->VehicleID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_tp_coords() {
  void * jresult ;
  eqlib::tp_coords *result = 0 ;
  
  result = (eqlib::tp_coords *)new eqlib::tp_coords();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_tp_coords(void * jarg1) {
  eqlib::tp_coords *arg1 = (eqlib::tp_coords *) 0 ;
  
  arg1 = (eqlib::tp_coords *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_bVisible_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bVisible = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetIndicator_bVisible_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (bool) ((arg1)->bVisible);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_bSettingsLoaded_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->bSettingsLoaded = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetIndicator_bSettingsLoaded_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (bool) ((arg1)->bSettingsLoaded);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_lasttarget_set(void * jarg1, void * jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  if (arg1) (arg1)->lasttarget = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetIndicator_lasttarget_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (eqlib::PlayerClient *) ((arg1)->lasttarget);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_MarkedTarget_set(void * jarg1, void * jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::PlayerClient **arg2 = (eqlib::PlayerClient **) (eqlib::PlayerClient **)0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (eqlib::PlayerClient **)jarg2; 
  {
    size_t ii;
    eqlib::PlayerClient * *b = (eqlib::PlayerClient * *) arg1->MarkedTarget;
    for (ii = 0; ii < (size_t)eqlib::CTargetIndicator::MarkerCount; ii++) b[ii] = *((eqlib::PlayerClient * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetIndicator_MarkedTarget_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::PlayerClient **result = 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (eqlib::PlayerClient **)(eqlib::PlayerClient **) ((arg1)->MarkedTarget);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_IndicatorHidden_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->IndicatorHidden = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetIndicator_IndicatorHidden_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (bool) ((arg1)->IndicatorHidden);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_CanActivate_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->CanActivate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetIndicator_CanActivate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (bool) ((arg1)->CanActivate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_TargetIndicatorSettings_set(void * jarg1, void * jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CTargetIndicatorSettings *arg2 = (eqlib::CTargetIndicatorSettings *) 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (eqlib::CTargetIndicatorSettings *)jarg2; 
  if (arg1) (arg1)->TargetIndicatorSettings = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetIndicator_TargetIndicatorSettings_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CTargetIndicatorSettings *result = 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (eqlib::CTargetIndicatorSettings *) ((arg1)->TargetIndicatorSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_MarkerIndicatorSettings_set(void * jarg1, void * jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CTargetIndicatorSettings *arg2 = (eqlib::CTargetIndicatorSettings *) 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (eqlib::CTargetIndicatorSettings *)jarg2; 
  if (arg1) (arg1)->MarkerIndicatorSettings = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetIndicator_MarkerIndicatorSettings_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CTargetIndicatorSettings *result = 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (eqlib::CTargetIndicatorSettings *) ((arg1)->MarkerIndicatorSettings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_IndicatorType_set(void * jarg1, int jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CTargetIndicator::ETargetType arg2 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (eqlib::CTargetIndicator::ETargetType)jarg2; 
  if (arg1) (arg1)->IndicatorType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTargetIndicator_IndicatorType_get(void * jarg1) {
  int jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CTargetIndicator::ETargetType result;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (eqlib::CTargetIndicator::ETargetType) ((arg1)->IndicatorType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_SegmentLength_set(void * jarg1, float jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->SegmentLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CTargetIndicator_SegmentLength_get(void * jarg1) {
  float jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  float result;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (float) ((arg1)->SegmentLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_ControlSegmentLength_set(void * jarg1, float jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->ControlSegmentLength = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CTargetIndicator_ControlSegmentLength_get(void * jarg1) {
  float jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  float result;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (float) ((arg1)->ControlSegmentLength);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_pTargetThickLine_set(void * jarg1, void * jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CThickLineInterface *arg2 = (eqlib::CThickLineInterface *) 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (eqlib::CThickLineInterface *)jarg2; 
  if (arg1) (arg1)->pTargetThickLine = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetIndicator_pTargetThickLine_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CThickLineInterface *result = 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (eqlib::CThickLineInterface *) ((arg1)->pTargetThickLine);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_pFreeTargetThickLine_set(void * jarg1, void * jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CThickLineInterface *arg2 = (eqlib::CThickLineInterface *) 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (eqlib::CThickLineInterface *)jarg2; 
  if (arg1) (arg1)->pFreeTargetThickLine = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetIndicator_pFreeTargetThickLine_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CThickLineInterface *result = 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (eqlib::CThickLineInterface *) ((arg1)->pFreeTargetThickLine);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetIndicator_pMarkerThickLine_set(void * jarg1, void * jarg2) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CThickLineInterface **arg2 = (eqlib::CThickLineInterface **) (eqlib::CThickLineInterface **)0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  arg2 = (eqlib::CThickLineInterface **)jarg2; 
  {
    size_t ii;
    eqlib::CThickLineInterface * *b = (eqlib::CThickLineInterface * *) arg1->pMarkerThickLine;
    for (ii = 0; ii < (size_t)eqlib::CTargetIndicator::MarkerCount; ii++) b[ii] = *((eqlib::CThickLineInterface * *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetIndicator_pMarkerThickLine_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  eqlib::CThickLineInterface **result = 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  result = (eqlib::CThickLineInterface **)(eqlib::CThickLineInterface **) ((arg1)->pMarkerThickLine);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CTargetIndicator() {
  void * jresult ;
  eqlib::CTargetIndicator *result = 0 ;
  
  result = (eqlib::CTargetIndicator *)new eqlib::CTargetIndicator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTargetIndicator(void * jarg1) {
  eqlib::CTargetIndicator *arg1 = (eqlib::CTargetIndicator *) 0 ;
  
  arg1 = (eqlib::CTargetIndicator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargetData_player_set(void * jarg1, void * jarg2) {
  eqlib::STargetData *arg1 = (eqlib::STargetData *) 0 ;
  eqlib::PlayerClient *arg2 = (eqlib::PlayerClient *) 0 ;
  
  arg1 = (eqlib::STargetData *)jarg1; 
  arg2 = (eqlib::PlayerClient *)jarg2; 
  if (arg1) (arg1)->player = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STargetData_player_get(void * jarg1) {
  void * jresult ;
  eqlib::STargetData *arg1 = (eqlib::STargetData *) 0 ;
  eqlib::PlayerClient *result = 0 ;
  
  arg1 = (eqlib::STargetData *)jarg1; 
  result = (eqlib::PlayerClient *) ((arg1)->player);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargetData_distanceSquared_set(void * jarg1, float jarg2) {
  eqlib::STargetData *arg1 = (eqlib::STargetData *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::STargetData *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->distanceSquared = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_STargetData_distanceSquared_get(void * jarg1) {
  float jresult ;
  eqlib::STargetData *arg1 = (eqlib::STargetData *) 0 ;
  float result;
  
  arg1 = (eqlib::STargetData *)jarg1; 
  result = (float) ((arg1)->distanceSquared);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_STargetData_visited_set(void * jarg1, unsigned int jarg2) {
  eqlib::STargetData *arg1 = (eqlib::STargetData *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::STargetData *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->visited = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_STargetData_visited_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::STargetData *arg1 = (eqlib::STargetData *) 0 ;
  bool result;
  
  arg1 = (eqlib::STargetData *)jarg1; 
  result = (bool) ((arg1)->visited);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_STargetData() {
  void * jresult ;
  eqlib::STargetData *result = 0 ;
  
  result = (eqlib::STargetData *)new eqlib::STargetData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_STargetData(void * jarg1) {
  eqlib::STargetData *arg1 = (eqlib::STargetData *) 0 ;
  
  arg1 = (eqlib::STargetData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetManager_Get() {
  void * jresult ;
  eqlib::CTargetManager *result = 0 ;
  
  result = (eqlib::CTargetManager *)eqlib::CTargetManager::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CTargetManager_MaxTargetHistory_get() {
  int jresult ;
  int result;
  
  result = (int)eqlib::CTargetManager::MaxTargetHistory;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_CycleNPCList_set(void * jarg1, void * jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  eqlib::STargetData *arg2 = (eqlib::STargetData *) (eqlib::STargetData *)0 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (eqlib::STargetData *)jarg2; 
  {
    size_t ii;
    eqlib::STargetData *b = (eqlib::STargetData *) arg1->CycleNPCList;
    for (ii = 0; ii < (size_t)eqlib::CTargetManager::MaxTargetHistory; ii++) b[ii] = *((eqlib::STargetData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetManager_CycleNPCList_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  eqlib::STargetData *result = 0 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (eqlib::STargetData *)(eqlib::STargetData *) ((arg1)->CycleNPCList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_CyclePCList_set(void * jarg1, void * jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  eqlib::STargetData *arg2 = (eqlib::STargetData *) (eqlib::STargetData *)0 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (eqlib::STargetData *)jarg2; 
  {
    size_t ii;
    eqlib::STargetData *b = (eqlib::STargetData *) arg1->CyclePCList;
    for (ii = 0; ii < (size_t)eqlib::CTargetManager::MaxTargetHistory; ii++) b[ii] = *((eqlib::STargetData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetManager_CyclePCList_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  eqlib::STargetData *result = 0 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (eqlib::STargetData *)(eqlib::STargetData *) ((arg1)->CyclePCList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_CycleCorpseList_set(void * jarg1, void * jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  eqlib::STargetData *arg2 = (eqlib::STargetData *) (eqlib::STargetData *)0 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (eqlib::STargetData *)jarg2; 
  {
    size_t ii;
    eqlib::STargetData *b = (eqlib::STargetData *) arg1->CycleCorpseList;
    for (ii = 0; ii < (size_t)eqlib::CTargetManager::MaxTargetHistory; ii++) b[ii] = *((eqlib::STargetData *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetManager_CycleCorpseList_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  eqlib::STargetData *result = 0 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (eqlib::STargetData *)(eqlib::STargetData *) ((arg1)->CycleCorpseList);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_LastTargetID_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastTargetID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_LastTargetID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->LastTargetID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_TabTargetID_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->TabTargetID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_TabTargetID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->TabTargetID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_AttackTargetID_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->AttackTargetID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_AttackTargetID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->AttackTargetID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_LastHoverUpdate_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastHoverUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_LastHoverUpdate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->LastHoverUpdate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_HoverUpdateInterval_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->HoverUpdateInterval = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_HoverUpdateInterval_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->HoverUpdateInterval);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_LastFreeTargetUpdate_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->LastFreeTargetUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_LastFreeTargetUpdate_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->LastFreeTargetUpdate);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_FreeTargetUpdateInterval_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->FreeTargetUpdateInterval = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_FreeTargetUpdateInterval_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->FreeTargetUpdateInterval);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_PreviousTargetID_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->PreviousTargetID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_PreviousTargetID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->PreviousTargetID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_HoverTargetID_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->HoverTargetID = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_HoverTargetID_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  uint32_t result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (uint32_t) ((arg1)->HoverTargetID);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_freeTargetingEnabled_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->freeTargetingEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_freeTargetingEnabled_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (bool) ((arg1)->freeTargetingEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_freeTargetingRangeSquared_set(void * jarg1, float jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  float arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->freeTargetingRangeSquared = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_CTargetManager_freeTargetingRangeSquared_get(void * jarg1) {
  float jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  float result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (float) ((arg1)->freeTargetingRangeSquared);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_lastFreeTargetingPosition_set(void * jarg1, void * jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  glm::vec3 arg2 ;
  glm::vec3 *argp2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  argp2 = (glm::vec3 *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null glm::vec3", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->lastFreeTargetingPosition = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTargetManager_lastFreeTargetingPosition_get(void * jarg1) {
  void * jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  glm::vec3 result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result =  ((arg1)->lastFreeTargetingPosition);
  jresult = new glm::vec3(result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CTargetManager_lastFreeTargetingInRange_set(void * jarg1, unsigned int jarg2) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  bool arg2 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lastFreeTargetingInRange = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CTargetManager_lastFreeTargetingInRange_get(void * jarg1) {
  unsigned int jresult ;
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  bool result;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  result = (bool) ((arg1)->lastFreeTargetingInRange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CTargetManager() {
  void * jresult ;
  eqlib::CTargetManager *result = 0 ;
  
  result = (eqlib::CTargetManager *)new eqlib::CTargetManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CTargetManager(void * jarg1) {
  eqlib::CTargetManager *arg1 = (eqlib::CTargetManager *) 0 ;
  
  arg1 = (eqlib::CTargetManager *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_boolp() {
  void * jresult ;
  bool *result = 0 ;
  
  result = (bool *)new_boolp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_copy_boolp(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  bool *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (bool *)copy_boolp(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_boolp(void * jarg1) {
  bool *arg1 = (bool *) 0 ;
  
  arg1 = (bool *)jarg1; 
  delete_boolp(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_boolp_assign(void * jarg1, unsigned int jarg2) {
  bool *arg1 = (bool *) 0 ;
  bool arg2 ;
  
  arg1 = (bool *)jarg1; 
  arg2 = jarg2 ? true : false; 
  boolp_assign(arg1,arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_boolp_value(void * jarg1) {
  unsigned int jresult ;
  bool *arg1 = (bool *) 0 ;
  bool result;
  
  arg1 = (bool *)jarg1; 
  result = (bool)boolp_value(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT mq_event * SWIGSTDCALL CSharp_gamestate_event_SWIGUpcast(gamestate_event *jarg1) {
    return (mq_event *)jarg1;
}

SWIGEXPORT mq_event * SWIGSTDCALL CSharp_chat_color_event_SWIGUpcast(chat_color_event *jarg1) {
    return (mq_event *)jarg1;
}

SWIGEXPORT mq_event * SWIGSTDCALL CSharp_incoming_chat_event_SWIGUpcast(incoming_chat_event *jarg1) {
    return (mq_event *)jarg1;
}

SWIGEXPORT mq_event * SWIGSTDCALL CSharp_spawn_event_SWIGUpcast(spawn_event *jarg1) {
    return (mq_event *)jarg1;
}

SWIGEXPORT mq_event * SWIGSTDCALL CSharp_ground_item_event_SWIGUpcast(ground_item_event *jarg1) {
    return (mq_event *)jarg1;
}

SWIGEXPORT mq_event * SWIGSTDCALL CSharp_string_event_SWIGUpcast(string_event *jarg1) {
    return (mq_event *)jarg1;
}

SWIGEXPORT mq::MQVarPtr * SWIGSTDCALL CSharp_MQTypeVar_SWIGUpcast(mq::MQTypeVar *jarg1) {
    return (mq::MQVarPtr *)jarg1;
}

SWIGEXPORT eqlib::CLineBase * SWIGSTDCALL CSharp_CLineSegment_SWIGUpcast(eqlib::CLineSegment *jarg1) {
    return (eqlib::CLineBase *)jarg1;
}

SWIGEXPORT eqlib::CLineSegment * SWIGSTDCALL CSharp_CCapsule_SWIGUpcast(eqlib::CCapsule *jarg1) {
    return (eqlib::CLineSegment *)jarg1;
}

SWIGEXPORT eqlib::PhysicsBase * SWIGSTDCALL CSharp_PlayerPhysics_SWIGUpcast(eqlib::PlayerPhysics *jarg1) {
    return (eqlib::PhysicsBase *)jarg1;
}

SWIGEXPORT eqlib::PlayerPhysics * SWIGSTDCALL CSharp_PlayerPhysicsClient_SWIGUpcast(eqlib::PlayerPhysicsClient *jarg1) {
    return (eqlib::PlayerPhysics *)jarg1;
}

SWIGEXPORT eqlib::PlayerManagerBase * SWIGSTDCALL CSharp_PlayerManagerClient_SWIGUpcast(eqlib::PlayerManagerClient *jarg1) {
    return (eqlib::PlayerManagerBase *)jarg1;
}

SWIGEXPORT eqlib::PlayerBase * SWIGSTDCALL CSharp_PlayerZoneClient_SWIGUpcast(eqlib::PlayerZoneClient *jarg1) {
    return (eqlib::PlayerBase *)jarg1;
}

SWIGEXPORT eqlib::PlayerZoneClient * SWIGSTDCALL CSharp_PlayerClient_SWIGUpcast(eqlib::PlayerClient *jarg1) {
    return (eqlib::PlayerZoneClient *)jarg1;
}

SWIGEXPORT eqlib::IChildItemContainer * SWIGSTDCALL CSharp_ItemBase_SWIGUpcast(eqlib::ItemBase *jarg1) {
    return (eqlib::IChildItemContainer *)jarg1;
}

SWIGEXPORT eqlib::ItemBase * SWIGSTDCALL CSharp_ItemClient_SWIGUpcast(eqlib::ItemClient *jarg1) {
    return (eqlib::ItemBase *)jarg1;
}

SWIGEXPORT eqlib::SpellManager * SWIGSTDCALL CSharp_ClientSpellManager_SWIGUpcast(eqlib::ClientSpellManager *jarg1) {
    return (eqlib::SpellManager *)jarg1;
}

SWIGEXPORT eqlib::CXStr::ConstIterator * SWIGSTDCALL CSharp_CXStr_Iterator_SWIGUpcast(eqlib::CXStr::Iterator *jarg1) {
    return (eqlib::CXStr::ConstIterator *)jarg1;
}

SWIGEXPORT eqlib::CEQException * SWIGSTDCALL CSharp_CExceptionApplication_SWIGUpcast(eqlib::CExceptionApplication *jarg1) {
    return (eqlib::CEQException *)jarg1;
}

SWIGEXPORT eqlib::CEQException * SWIGSTDCALL CSharp_CExceptionMemoryAllocation_SWIGUpcast(eqlib::CExceptionMemoryAllocation *jarg1) {
    return (eqlib::CEQException *)jarg1;
}

SWIGEXPORT eqlib::CExceptionApplication * SWIGSTDCALL CSharp_CDynamicArrayException_SWIGUpcast(eqlib::CDynamicArrayException *jarg1) {
    return (eqlib::CExceptionApplication *)jarg1;
}

SWIGEXPORT eqlib::CEverQuestBase * SWIGSTDCALL CSharp_CEverQuest_SWIGUpcast(eqlib::CEverQuest *jarg1) {
    return (eqlib::CEverQuestBase *)jarg1;
}

SWIGEXPORT eqlib::CTextObjectInterface * SWIGSTDCALL CSharp_CTextObjectBase_SWIGUpcast(eqlib::CTextObjectBase *jarg1) {
    return (eqlib::CTextObjectInterface *)jarg1;
}

SWIGEXPORT eqlib::CTextObjectBase * SWIGSTDCALL CSharp_CTextObject_SWIGUpcast(eqlib::CTextObject *jarg1) {
    return (eqlib::CTextObjectBase *)jarg1;
}

SWIGEXPORT eqlib::CActorInterfaceBase * SWIGSTDCALL CSharp_CActorInterface_SWIGUpcast(eqlib::CActorInterface *jarg1) {
    return (eqlib::CActorInterfaceBase *)jarg1;
}

SWIGEXPORT eqlib::CActorInterface * SWIGSTDCALL CSharp_CActor_SWIGUpcast(eqlib::CActor *jarg1) {
    return (eqlib::CActorInterface *)jarg1;
}

SWIGEXPORT eqlib::CResolutionHandlerBase * SWIGSTDCALL CSharp_CResolutionHandler_SWIGUpcast(eqlib::CResolutionHandler *jarg1) {
    return (eqlib::CResolutionHandlerBase *)jarg1;
}

SWIGEXPORT eqlib::CActorApplicationData * SWIGSTDCALL CSharp_EQPlacedItem_SWIGUpcast(eqlib::EQPlacedItem *jarg1) {
    return (eqlib::CActorApplicationData *)jarg1;
}

SWIGEXPORT eqlib::CActorApplicationData * SWIGSTDCALL CSharp_EQSwitch_SWIGUpcast(eqlib::EQSwitch *jarg1) {
    return (eqlib::CActorApplicationData *)jarg1;
}

SWIGEXPORT eqlib::SoundObject * SWIGSTDCALL CSharp_SoundAsset_SWIGUpcast(eqlib::SoundAsset *jarg1) {
    return (eqlib::SoundObject *)jarg1;
}

SWIGEXPORT eqlib::SoundObject * SWIGSTDCALL CSharp_SoundInstance_SWIGUpcast(eqlib::SoundInstance *jarg1) {
    return (eqlib::SoundObject *)jarg1;
}

SWIGEXPORT eqlib::SoundInstance * SWIGSTDCALL CSharp_Wave3dInstance_SWIGUpcast(eqlib::Wave3dInstance *jarg1) {
    return (eqlib::SoundInstance *)jarg1;
}

SWIGEXPORT eqlib::SoundInstance * SWIGSTDCALL CSharp_WaveInstance_SWIGUpcast(eqlib::WaveInstance *jarg1) {
    return (eqlib::SoundInstance *)jarg1;
}

#ifdef __cplusplus
}
#endif

